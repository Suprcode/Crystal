<doc>
  <assembly>
    <name>Microsoft.DirectX.Direct3DX</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.Direct3D.AllocateHierarchy">
      <summary>Derived by the application to allocate/free frame and mesh container objects. Methods of this class are called during loading and destruction of frame hierarchies.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.CreateFrame(System.String)">
      <summary>Requests allocation of a frame object.</summary>
      <param name="name">Name of the frame to create.</param>
      <returns>Created frame object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.CreateMeshContainer(System.String,Microsoft.DirectX.Direct3D.MeshData,Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.EffectInstance[],Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.SkinInformation)">
      <summary>Requests allocation of a <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" /> object.</summary>
      <param name="name">String that represents the name of the mesh.</param>
      <param name="meshData">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.MeshData" /> structure.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures used in the mesh.</param>
      <param name="effectInstances">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures used in the mesh.</param>
      <param name="adjacency">Array of <see cref="T:Microsoft.DirectX.GraphicsStream" /> objects that represent an adjacency array for the mesh.</param>
      <param name="skinInfo">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object, if skin data is found.</param>
      <returns>Created <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AllocateHierarchy" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AllocateHierarchy.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.AllocateHierarchy" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationController">
      <summary>Controls animation functionality, connecting animation sets to the transformation frames being animated.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.AnimationController.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.AnimationController.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.AdvanceTime(System.Double)">
      <summary>Animates the mesh and advances the global animation time by a specified amount.</summary>
      <param name="timeDelta">Amount, in seconds, by which to advance the global animation time. This value must be non-negative or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.AdvanceTime(System.Double,Microsoft.DirectX.Direct3D.HandleAnimationCallback)">
      <summary>Animates the mesh and advances the global animation time by a specified amount.</summary>
      <param name="timeDelta">Amount, in seconds, by which to advance the global animation time. This value must be non-negative or 0.</param>
      <param name="callbackHandler">A <see cref="T:Microsoft.DirectX.Direct3D.HandleAnimationCallback" /> user-defined animation callback handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Clone(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Clones, or copies, an animation controller.</summary>
      <param name="maxNumberAnimationOutputs">Maximum number of animation outputs the controller can support.</param>
      <param name="maxNumberAnimationSets">Maximum number of animation sets the controller can support.</param>
      <param name="maxNumberTracks">Maximum number of tracks the controller can support.</param>
      <param name="maxNumberEvents">Maximum number of events the controller can support.</param>
      <returns>A cloned <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> class.</summary>
      <param name="maxNumberMatrices">Maximum number of matrices that can be animated.</param>
      <param name="maxNumberAnimationSets">Maximum number of animation sets that can be mixed.</param>
      <param name="maxNumberTracks">Maximum number of animation sets that can be mixed simultaneously.</param>
      <param name="maxNumberEvents">Maximum number of outstanding events that the controller will support.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetAnimationSet(System.String)">
      <summary>Retrieves the animation set.</summary>
      <param name="animationName">A string that contains the name of the animation set to retrieve.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object at the given <see cref="M:Microsoft.DirectX.Direct3D.AnimationController.GetAnimationSet" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetAnimationSet(System.Int32)">
      <summary>Retrieves the animation set.</summary>
      <param name="index">An integer that represent the index of the animation set to retrieve.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object at the given <see cref="M:Microsoft.DirectX.Direct3D.AnimationController.GetAnimationSet" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetCurrentPriorityBlend">
      <summary>Returns an event handle to a priority blend event that is currently running.</summary>
      <returns>Priority event. If no priority blend event is currently running, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetCurrentTrackEvent(System.Int32,Microsoft.DirectX.Direct3D.EventType)">
      <summary>Returns an event handle to the event that is currently running on the specified animation track.</summary>
      <param name="track">Track identifier.</param>
      <param name="eventType">Type of event to query.</param>
      <returns>Event currently running on the specified track. If no event is running on the specified track, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetEventDescription(System.Int32)">
      <summary>Retrieves a description of a specified animation event.</summary>
      <param name="eventHandle">Event handle to the animation event to describe.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EventDescription" /> structure that contains a description of the animation event.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXAnimationController, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetTrackAnimationSet(System.Int32)">
      <summary>Retrieves the animation set for a given track.</summary>
      <param name="track">Track identifier.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> class for the given track.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetTrackDescription(System.Int32)">
      <summary>Retrieves the description for a track.</summary>
      <param name="trackNumber">Track identifier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.TrackDescription" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetUpcomingPriorityBlend(System.Int32)">
      <summary>Returns an event handle to the next priority blend event scheduled to occur after a specified event.</summary>
      <param name="eventHandle">Event handle to the specified event. If set to 0, the method returns the next scheduled priority blend event.</param>
      <returns>Event handle to the next scheduled priority blend event. If no new priority blend event is scheduled, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.GetUpcomingTrackEvent(System.Int32,System.Int32)">
      <summary>Returns an event handle to the next event scheduled to occur after a specified event on an animation track.</summary>
      <param name="track">Track identifier.</param>
      <param name="eventHandle">Event handle to the specified event. If set to 0, the method returns the next scheduled event.</param>
      <returns>Event handle to the next event scheduled to run on the specified track. If no new event is scheduled, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.ICloneable.Clone">
      <summary>Makes a copy of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" />.</summary>
      <returns>Cloned object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.IsEventValid(System.Int32)">
      <summary>Determines whether a specified event handle is valid and an animation event has completed.</summary>
      <param name="eventHandle">Event handle to the animation event.</param>
      <returns>Returns true if the method succeeds; false if it fails.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.IsEventValid(System.Int32,System.Int32@)">
      <summary>Determines whether a specified event handle is valid and an animation event has completed.</summary>
      <param name="eventHandle">Event handle to the animation event.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <returns>Returns true if the method succeeds; false if it fails.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyPriorityBlend(System.Single,System.Double,System.Double,Microsoft.DirectX.Direct3D.TransitionType)">
      <summary>Sets blending event keys for the specified animation track.</summary>
      <param name="newBlendWeight">Number between 0 and 1 that is used to blend tracks.</param>
      <param name="startTime">Global time at which to start the blend.</param>
      <param name="duration">Global time duration of the blend.</param>
      <param name="method">Transition type used for the duration of the blend. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TransitionType" />.</param>
      <returns>Handle to the priority blend event. If one or more of the input parameters is invalid, or if no free event is available, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackEnable(System.Int32,System.Boolean,System.Double)">
      <summary>Sets an event key that enables or disables an animation track.</summary>
      <param name="track">Identifier of the animation track to modify.</param>
      <param name="newEnable">Set to true to enable the animation track. Set to false to disable the animation track.</param>
      <param name="startTime">Global time key that specifies the global time at which the change will occur.</param>
      <returns>Priority blend event. If the track is invalid, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackPosition(System.Int32,System.Double,System.Double)">
      <summary>Sets an event key that changes the local time of an animation track.</summary>
      <param name="track">Identifier of the track to modify.</param>
      <param name="newPosition">New local time of the animation track.</param>
      <param name="startTime">Global time key that specifies the global time at which the change will occur.</param>
      <returns>Priority blend event. If track is invalid, or if no free event is available, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackSpeed(System.Int32,System.Single,System.Double,System.Double,Microsoft.DirectX.Direct3D.TransitionType)">
      <summary>Sets an event key that changes the local time of an animation track.</summary>
      <param name="track">Identifier of the track to modify.</param>
      <param name="newSpeed">New speed of the animation track.</param>
      <param name="startTime">Global time key that specifies the global time at which the change will occur.</param>
      <param name="duration">Transition time, which specifies how long the smooth transition will take to complete.</param>
      <param name="method">Transition type used for transitioning between speeds. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TransitionType" />.</param>
      <returns>Event handle to the priority blend event. If one or more of the input parameters is invalid, or if no free event is available, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.KeyTrackWeight(System.Int32,System.Single,System.Double,System.Double,Microsoft.DirectX.Direct3D.TransitionType)">
      <summary>Sets an event key that changes the weight of an animation track.</summary>
      <param name="track">Identifier of the track to modify.</param>
      <param name="newWeight">New weight of the track.</param>
      <param name="startTime">Global time key that specifies the global time at which the change will occur.</param>
      <param name="duration">Transition time, which specifies how long the smooth transition will take to complete.</param>
      <param name="method">Transition type used for transitioning between weights. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TransitionType" />.</param>
      <returns>Event handle to the priority blend event. If one or more of the input parameters is invalid, or if no free event is available, a value of 0 is returned.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.op_Equality(Microsoft.DirectX.Direct3D.AnimationController,Microsoft.DirectX.Direct3D.AnimationController)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.op_Inequality(Microsoft.DirectX.Direct3D.AnimationController,Microsoft.DirectX.Direct3D.AnimationController)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.AnimationController.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.RegisterAnimationOutput(Microsoft.DirectX.Direct3D.Frame)">
      <summary>Adds an animation output to the animation controller and registers objects for scale, rotate, and translate (SRT) transformations.</summary>
      <param name="animationFrame">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that encapsulates a transform frame in a transformation frame hierarchy. Uses the <see cref="P:Microsoft.DirectX.Direct3D.Frame.TransformationMatrix" /> property.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.RegisterAnimationOutput(Microsoft.DirectX.Direct3D.AnimationOutput)">
      <summary>Adds an animation output to the animation controller and registers objects for scale, rotate, and translate (SRT) transformations.</summary>
      <param name="output">An <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutput" /> object that encapsulates the scale, rotate, and translate (SRT) transformations objects.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.RegisterAnimationSet(Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Adds an animation set to the animation controller.</summary>
      <param name="animationSet">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> to add.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.ResetTime">
      <summary>Resets the global animation time to zero. Any pending events retain their original schedules, but in the new time frame.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackAnimationSet(System.Int32,Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Applies the animation set to the specified track.</summary>
      <param name="track">Identifier of the track to which the animation set is applied.</param>
      <param name="animationSet">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> to add to the track.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackDescription(System.Int32,Microsoft.DirectX.Direct3D.TrackDescription)">
      <summary>Sets the track description.</summary>
      <param name="trackNumber">Identifier of the track to modify.</param>
      <param name="value">Description of the track.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackEnable(System.Int32,System.Boolean)">
      <summary>Enables or disables a track in the animation controller.</summary>
      <param name="track">Track identifier.</param>
      <param name="enable">Set to true if the track is enabled in the controller. Set to false if the track should not be mixed.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackPosition(System.Int32,System.Double)">
      <summary>Sets the track to the specified local animation time.</summary>
      <param name="track">Track identifier.</param>
      <param name="position">Local animation time value to assign to the track.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackPriority(System.Int32,Microsoft.DirectX.Direct3D.PriorityType)">
      <summary>Sets the priority blending weight for the specified animation track.</summary>
      <param name="track">Track identifier.</param>
      <param name="priority">Track priority; should be set to one of the <see cref="T:Microsoft.DirectX.Direct3D.PriorityType" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackSpeed(System.Int32,System.Single)">
      <summary>Sets the priority blending weight for the specified animation track.</summary>
      <param name="track">Track identifier.</param>
      <param name="speed">Track priority; should be set to one of the constants from <see cref="T:Microsoft.DirectX.Direct3D.PriorityType" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.SetTrackWeight(System.Int32,System.Single)">
      <summary>Sets the track weight, which is used to determine how to blend multiple tracks together.</summary>
      <param name="track">Identifier of the track for which to set the weight.</param>
      <param name="weight">Weight value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnkeyAllPriorityBlends">
      <summary>Removes all scheduled priority blend events from the animation controller.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnkeyAllTrackEvents(System.Int32)">
      <summary>Removes all events from a specified animation track.</summary>
      <param name="track">Identifier of the track from which to remove events.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnkeyEvent(System.Int32)">
      <summary>Removes a specified event from an animation track, preventing the event from being run.</summary>
      <param name="eventHandle">Event handle to the event to remove.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnregisterAnimationOutput(Microsoft.DirectX.Direct3D.Frame)">
      <summary>Removes an animation output from the animation controller.</summary>
      <param name="animationFrame">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object to remove.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnregisterAnimationOutput(Microsoft.DirectX.Direct3D.AnimationOutput)">
      <summary>Removes an animation output from the animation controller.</summary>
      <param name="output">An <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutput" /> object to remove.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnregisterAnimationOutput(System.String)">
      <summary>Removes an animation output from the animation controller.</summary>
      <param name="name">A string that represents the name of the animation output to remove.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UnregisterAnimationSet(Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Removes an animation set from the animation controller.</summary>
      <param name="animationSet">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> to remove.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationController.ValidateEvent(System.Int32)">
      <summary>Determines whether a specified event handle is valid and the animation event has completed.</summary>
      <param name="eventHandle">Event handle to the animation event.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberAnimationOutputs">
      <summary>Retrieves the maximum number of animation outputs the controller can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberAnimationSets">
      <summary>Retrieves the maximum number of animation sets the controller can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberEvents">
      <summary>Retrieves the maximum number of events the controller can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.MaxNumberTracks">
      <summary>Retrieves the maximum number of tracks in the mixer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.NumberAnimationSets">
      <summary>Returns the number of animation sets currently registered in the animation controller.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.PriorityBlend">
      <summary>Retrieves or sets the track blending weight.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.Time">
      <summary>Retrieves the local animation time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationController.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationOutput">
      <summary>Encapsulates matrix, scale, rotate, and translate (SRT) transformation objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationOutput.#ctor(System.String,Microsoft.DirectX.Direct3D.AnimationOutputFlags)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutput" /> class.</summary>
      <param name="name">Name of the animation output.</param>
      <param name="flags">One or more values of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutputFlags" /> enumeration that specify which outputs to receive.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationOutput.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutput" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationOutput.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutput" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationOutput.Matrix">
      <summary>Retrieves the matrix output for the animation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationOutput.Name">
      <summary>Retrieves the name of the animation output.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationOutput.Rotation">
      <summary>Retrieves the rotation output for the animation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationOutput.Scale">
      <summary>Retrieves the scale output for the animation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationOutput.Translation">
      <summary>Retrieves the translation output for the animation.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationSet">
      <summary>Encapsulates the minimum functionality required of an animation set by an animation controller. Advanced users might want to implement this class themselves to suit their specialized needs. For most users, however, the derived <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> and <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> classes should suffice.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.AnimationSet.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.AnimationSet.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetAnimationIndex(System.String)">
      <summary>Retrieves the index of an animation, given its name.</summary>
      <param name="name">Animation name.</param>
      <returns>Returns the index of the named animation; otherwise, throws a <see cref="T:Microsoft.DirectX.Direct3D.Direct3DXException" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetAnimationName(System.Int32)">
      <summary>Retrieves the name of an animation, given its index.</summary>
      <param name="index">Animation index.</param>
      <returns>Returns a string that contains the animation name; otherwise, throws a <see cref="T:Microsoft.DirectX.Direct3D.Direct3DXException" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetCallback(System.Double,Microsoft.DirectX.Direct3D.CallbackSearchFlags)">
      <summary>Retrieves information about a specific callback in an animation set.</summary>
      <param name="position">Position from which to find callbacks.</param>
      <param name="flags">Callback search flags. This parameter can be set to one or more <see cref="T:Microsoft.DirectX.Direct3D.CallbackSearchFlags" /> constants.</param>
      <returns>This method's return values are implemented by an application programmer. In general, if no error occurs, the method should return an empty structure; otherwise, it should throw an exception. For more information, see <see cref="T:Microsoft.DirectX.DirectXException" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXAnimationSet, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetPeriodicPosition(System.Double)">
      <summary>Returns the time position in the local timeframe of an animation set.</summary>
      <param name="position">Local time of the animation set.</param>
      <returns>Time position as measured in the timeframe of the animation set. This value is bounded by the period of the animation set.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.GetScaleRotateTranslate(System.Double,System.Int32)">
      <summary>Retrieves the scale, rotate, and translate (SRT) values of an animation set.</summary>
      <param name="periodicPosition">Position of the animation set; can be obtained by calling <see cref="M:Microsoft.DirectX.Direct3D.AnimationSet.GetPeriodicPosition(System.Double)" />.</param>
      <param name="animation">Animation index.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.ScaleRotateTranslate" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.op_Equality(Microsoft.DirectX.Direct3D.AnimationSet,Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.op_Inequality(Microsoft.DirectX.Direct3D.AnimationSet,Microsoft.DirectX.Direct3D.AnimationSet)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.AnimationSet.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationSet.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object. This method supports the .NET Framework Infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.AnimationSet" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.Name">
      <summary>Retrieves the name of an animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.NumberAnimations">
      <summary>Retrieves a value that indicates the number of animations in the animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.Period">
      <summary>Retrieves the period of an animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationSet.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseEffect">
      <summary>Provides methods for retrieving and setting effect parameters such as constants, functions, shaders, and techniques.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.BaseEffect.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetAnnotation(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Retrieves an annotation.</summary>
      <param name="technique">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents a technique, pass, or top-level parameter.</param>
      <param name="name">Annotation name.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that specifies the annotation, or null if the annotation is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetAnnotation(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an annotation.</summary>
      <param name="technique">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents a technique, pass, or top-level parameter.</param>
      <param name="index">Annotation index.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that specifies the annotation, or null if the annotation is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunction(System.String)">
      <summary>Retrieves a function.</summary>
      <param name="name">String that contains the name of the function.</param>
      <returns>Specified <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> associated with the function, or null if it is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunction(System.Int32)">
      <summary>Retrieves a function.</summary>
      <param name="index">Index of the function.</param>
      <returns>Specified <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> associated with the function, or null if it is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunctionDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a function description.</summary>
      <param name="shader">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that indicates the function form from which to retrieve the description.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.FunctionDescription" /> structure that describes the function.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXBaseEffect, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameter(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Retrieves a top-level parameter or a structure member parameter.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that indicates the parameter, or null for top-level parameters.</param>
      <param name="name">String that contains the parameter name.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the specified parameter, or null if the parameter is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameter(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves a top-level parameter or a structure member parameter.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that indicates the parameter, or null for top-level parameters.</param>
      <param name="index">Parameter index.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the specified parameter, or null if the parameter is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterBySemantic(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Retrieves the handle of a top-level parameter or structure member parameter by looking up its semantic.</summary>
      <param name="constant">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the parameter, or null for top-level parameters.</param>
      <param name="name">String that contains the semantic name.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the first parameter that matches the specified semantic, or null if the semantic is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a parameter or annotation description.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that indicates the parameter or annotation handle.</param>
      <returns>Description of the specified parameter or annotation. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.ParameterDescription" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterElement(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of an array element parameter.</summary>
      <param name="constant">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> associated with the array.</param>
      <param name="index">Array element index.</param>
      <returns>Handle of the specified parameter, or null if either <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterElement(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)" /> or <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.GetParameterElement(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)" /> is invalid.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetPass(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of a pass.</summary>
      <param name="technique">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the parent technique.</param>
      <param name="name">String that contains the name of the pass.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the specified pass inside the specified technique, or null if the index is invalid.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetPass(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of a pass.</summary>
      <param name="technique">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the parent technique.</param>
      <param name="index">Index for the pass.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the specified pass inside the specified technique, or null if the index is invalid.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetPassDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a pass description.</summary>
      <param name="pass">Pass <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.PassDescription" /> of the specified pass.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetTechnique(System.String)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of a technique.</summary>
      <param name="name">String that contains the technique name.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the first technique that has the specified name, or null if the name is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetTechnique(System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of a technique.</summary>
      <param name="index">Technique index.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of the first technique that has the specified name, or null if the name is not found.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetTechniqueDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a technique description.</summary>
      <param name="technique">Technique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.TechniqueDescription" /> of the specified technique.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="numberBytes">Number of bytes in the <see cref="T:Microsoft.DirectX.GraphicsStream" />. To skip size validation, pass in 0, provided the <see cref="T:Microsoft.DirectX.GraphicsStream" /> is large enough to contain the entire parameter.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueBoolean(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a Boolean value.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>Boolean value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueBooleanArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of Boolean values.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="count">Number of Boolean values in the returned array.</param>
      <returns>Array of Boolean values.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueColor(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> associated with the color value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueColorArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structures.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> associated with the color value array.</param>
      <param name="count">Number of values in the returned array.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueFloat(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a floating-point value.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>A <see cref="T:System.Single" /> value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueFloatArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of floating-point values.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="count">Number of floating-point values in the returned array.</param>
      <returns>Array of <see cref="T:System.Single" /> values.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueInteger(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves an integer.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>Integer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueIntegerArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of integers.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="count">Number of integers in the returned array.</param>
      <returns>Array of integers.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrix(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a nontransposed matrix.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>Nontransposed <see cref="T:Microsoft.DirectX.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrixArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of nontransposed matrices.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="count">Number of matrices in the returned array.</param>
      <returns>Nontransposed <see cref="T:Microsoft.DirectX.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrixTranspose(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a transposed matrix.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>Transposed <see cref="T:Microsoft.DirectX.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueMatrixTransposeArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of transposed matrices.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="count">Number of matrices in the returned array.</param>
      <returns>Array of transposed <see cref="T:Microsoft.DirectX.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValuePixelShader(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a pixel shader.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueString(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a string.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>String identified by the effect handle <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueString(Microsoft.DirectX.Direct3D.EffectHandle)" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueTexture(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a texture.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueVector(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a vector.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueVectorArray(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of vectors.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="count">Number of vectors in the returned array.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector4" /> objects.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.GetValueVertexShader(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a vertex shader.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.op_Equality(Microsoft.DirectX.Direct3D.BaseEffect,Microsoft.DirectX.Direct3D.BaseEffect)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.op_Inequality(Microsoft.DirectX.Direct3D.BaseEffect,Microsoft.DirectX.Direct3D.BaseEffect)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.BaseEffect.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="str">A <see cref="T:System.String" /> to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32[])">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="n">Array of <see cref="T:System.Int32" /> values to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="n">An <see cref="T:System.Int32" /> value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean[])">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="b">Array of <see cref="T:System.Boolean" /> values to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="b">A <see cref="T:System.Boolean" /> value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.GraphicsStream)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the data to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Void,System.Int32)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="data">A buffer containing the data to set.</param>
      <param name="dataSize">Number of bytes in the <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue" /> buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="matrix">Array of <see cref="T:Microsoft.DirectX.Matrix" /> structures to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="matrix">A <see cref="T:Microsoft.DirectX.Matrix" /> structure to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.ColorValue[])">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="color">Array of <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structures to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="color">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4[])">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="vector">Array of <see cref="T:Microsoft.DirectX.Vector4" /> structures to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="vector">A <see cref="T:Microsoft.DirectX.Vector4" /> structure to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Single[])">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="f">Array of <see cref="T:System.Single" /> values to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Single)">
      <summary>Sets the value of an arbitrary parameter or annotation, including simple types, structures, arrays, strings, shaders, and textures.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="f">A <see cref="T:System.Single" /> value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValueTranspose(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Sets a transposed matrix.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="matrix">Array of <see cref="T:Microsoft.DirectX.Matrix" /> structures to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.SetValueTranspose(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Sets a transposed matrix.</summary>
      <param name="parameter">Unique <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> identifier.</param>
      <param name="matrix">A <see cref="T:Microsoft.DirectX.Matrix" /> structure to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseEffect.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.BaseEffect" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseEffect.Description">
      <summary>Retrieves an effect description.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseEffect.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseEffect.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseMesh">
      <summary>Manipulates and queries mesh objects and derived mesh objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.BaseMesh.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones, or copies, a mesh object.</summary>
      <param name="options">Mesh creation options, as specified with one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags, which should not be used for this purpose).</param>
      <param name="declaration">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the mesh data to duplicate.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>Cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones, or copies, a mesh object.</summary>
      <param name="options">Mesh creation options, as specified with one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags, which should not be used for this purpose).</param>
      <param name="declaration">Vertex data, as defined with an array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>Cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones, or copies, a mesh object.</summary>
      <param name="options">Mesh creation options, as specified with one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags, which should not be used for this purpose).</param>
      <param name="vertexFormat">Mesh vertex format, as specified with one or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>Cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ComputeNormals">
      <summary>Computes normals for each vertex in a mesh.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ComputeNormals(System.Int32[])">
      <summary>Computes normals for each vertex in a mesh.</summary>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face, which specify the three neighbors for each face in the mesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ComputeNormals(Microsoft.DirectX.GraphicsStream)">
      <summary>Computes normals for each vertex in a mesh.</summary>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains three <see cref="T:System.Int32" /> values per face, which specify the three neighbors for each face in the mesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertAdjacencyToPointReps(Microsoft.DirectX.GraphicsStream)">
      <summary>Converts mesh adjacency information to an array of point representatives.</summary>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains three <see cref="T:System.Int32" /> values per face, which specify the three neighbors for each face in the mesh.</param>
      <returns>Array that contains one <see cref="T:System.Int32" /> per vertex of the mesh that is filled with point representative data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertAdjacencyToPointReps(System.Int32[])">
      <summary>Converts mesh adjacency information to an array of point representatives.</summary>
      <param name="adjaceny">Array of three <see cref="T:System.Int32" /> values per face, which specify the three neighbors for each face in the mesh.</param>
      <returns>Array that contains one <see cref="T:System.Int32" /> per vertex of the mesh that is filled with point representative data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertPointRepsToAdjacency(Microsoft.DirectX.GraphicsStream)">
      <summary>Converts point representative data to mesh adjacency information.</summary>
      <param name="pointReps">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains one <see cref="T:System.Int32" /> per vertex of the mesh that represents point representative data. This parameter is optional; supplying a value of 0 causes it to be interpreted as an "identity" array.</param>
      <returns>Array of three <see cref="T:System.Int32" /> values per face, which specify the three neighbors for each face in the mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.ConvertPointRepsToAdjacency(System.Int32[])">
      <summary>Converts point representative data to mesh adjacency information.</summary>
      <param name="pointReps">Array that contains one <see cref="T:System.Int32" /> per vertex of the mesh that contains point representative data. This parameter is optional; supplying a value of 0 causes it to be interpreted as an "identity" array.</param>
      <returns>Array of three <see cref="T:System.Int32" /> values per face, which specify the three neighbors for each face in the mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.DrawSubset(System.Int32)">
      <summary>Draws a subset of a mesh.</summary>
      <param name="attributeID">An <see cref="T:System.Int32" /> value that specifies which subset of the mesh to draw. This value is used to differentiate faces in a mesh as belonging to one or more attribute groups.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])">
      <summary>Generates adjacency information based on mesh indices.</summary>
      <param name="epsilon">Specifies that vertices that differ in position by less than epsilon should be treated as coincident.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face to be filled with adjacent face indices. The size of this array must be at least 3 * <see cref="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberFaces" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.GetAttributeTable">
      <summary>Retrieves an attribute table for a mesh.</summary>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.AttributeRange" /> structures, which represent each entry in the attribute table.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXBaseMesh, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockIndexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks an index buffer and obtains the index buffer data.</summary>
      <param name="typeIndex">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockIndexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks an index buffer and obtains the index buffer data.</summary>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockVertexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a vertex buffer and obtains a pointer to the vertex buffer memory.</summary>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.LockVertexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a vertex buffer and obtains a pointer to the vertex buffer memory.</summary>
      <param name="typeVertex">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.op_Equality(Microsoft.DirectX.Direct3D.BaseMesh,Microsoft.DirectX.Direct3D.BaseMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.op_Inequality(Microsoft.DirectX.Direct3D.BaseMesh,Microsoft.DirectX.Direct3D.BaseMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.BaseMesh.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.SetIndexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Sets index buffer data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to copy into the index buffer. This can be any value type or array of value types. The <see cref="T:System.Int32" /> and <see cref="T:System.Int16" /> values are commonly used.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform when setting the data. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.SetVertexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Sets vertex buffer data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to copy into the vertex buffer. This can be any value type or array of value types. The <see cref="T:System.Int32" /> and <see cref="T:System.Int16" /> values are commonly used.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform when setting the data. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UnlockIndexBuffer">
      <summary>Unlocks an index buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UnlockVertexBuffer">
      <summary>Unlocks a vertex buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UpdateSemantics(Microsoft.DirectX.GraphicsStream)">
      <summary>Allows the user to change the mesh declaration without changing the data layout of the vertex buffer.  The call is valid only if the old and new declaration formats have the same vertex size.</summary>
      <param name="declaration">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that describe the vertex format of the mesh vertices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UpdateSemantics(Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Allows the user to change the mesh declaration without changing the data layout of the vertex buffer.  The call is valid only if the old and new declaration formats have the same vertex size.</summary>
      <param name="declaration">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that describe the vertex format of the mesh vertices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseMesh.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Declaration">
      <summary>Retrieves a declaration that describes the vertices in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Device">
      <summary>Retrieves the device associated with a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.IndexBuffer">
      <summary>Retrieves the data in an index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberAttributes">
      <summary>Retrieves the number of entries stored in an attribute table for a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberBytesPerVertex">
      <summary>Retrieves the number of bytes per vertex.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberFaces">
      <summary>Retrieves the number of faces in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberVertices">
      <summary>Retrieves the number of vertices in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.Options">
      <summary>Retrieves the mesh options enabled for the current mesh at creation time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.VertexBuffer">
      <summary>Retrieves the vertex buffer of a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseMesh.VertexFormat">
      <summary>Retrieves the vertex format that describes the contents of vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CannotAttributeSortException">
      <summary>Attribute sort is not supported as an optimization technique. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotAttributeSortException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotAttributeSortException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotAttributeSortException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotAttributeSortException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotAttributeSortException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException">
      <summary>The index buffer cannot be modified.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CannotModifyIndexBufferException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorOperator">
      <summary>Contains methods for manipulating colors.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Add(Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Adds two color values together to create a new color value.</summary>
      <param name="c1">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the color to add.</param>
      <param name="c2">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the color to add.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the sum of the two colors added together.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Add(System.Int32,System.Int32)">
      <summary>Adds two color values together to create a new color value.</summary>
      <param name="c1" />
      <param name="c2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Add(System.Drawing.Color,System.Drawing.Color)">
      <summary>Adds two color values together to create a new color value.</summary>
      <param name="c1">A <see cref="T:System.Drawing.Color" /> object that specifies the color to add.</param>
      <param name="c2">A <see cref="T:System.Drawing.Color" /> object that specifies the color to add.</param>
      <returns>Returns a <see cref="T:System.Drawing.Color" /> object that represents the sum of the two colors added together.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustContrast(Microsoft.DirectX.Direct3D.ColorValue,System.Single)">
      <summary>Adjusts the contrast value of a color.</summary>
      <param name="c">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the color to adjust.</param>
      <param name="s">Floating-point value that represents the contrast value to apply to the given color. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the result of the contrast adjustment.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustContrast(System.Int32,System.Single)">
      <summary>Adjusts the contrast value of a color.</summary>
      <param name="c" />
      <param name="s">Floating-point value that represents the contrast value to apply to the given color. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustContrast(System.Drawing.Color,System.Single)">
      <summary>Adjusts the contrast value of a color.</summary>
      <param name="c">A <see cref="T:System.Drawing.Color" /> object that specifies the color to adjust.</param>
      <param name="s">Floating-point value that represents the contrast value to apply to the given color. See Remarks.</param>
      <returns>Returns a <see cref="T:System.Drawing.Color" /> object that represents the result of the contrast adjustment.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustSaturation(Microsoft.DirectX.Direct3D.ColorValue,System.Single)">
      <summary>Adjusts the saturation value of a color.</summary>
      <param name="c">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the color to adjust.</param>
      <param name="s">Floating-point value that represents the saturation value to apply to the given color. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the result of the saturation adjustment.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustSaturation(System.Int32,System.Single)">
      <summary>Adjusts the saturation value of a color.</summary>
      <param name="c" />
      <param name="s">Floating-point value that represents the saturation value to apply to the given color. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.AdjustSaturation(System.Drawing.Color,System.Single)">
      <summary>Adjusts the saturation value of a color.</summary>
      <param name="c">A <see cref="T:System.Drawing.Color" /> object that specifies the color to adjust.</param>
      <param name="s">Floating-point value that represents the saturation value to apply to the given color. See Remarks.</param>
      <returns>Returns a <see cref="T:System.Drawing.Color" /> object that represents the result of the saturation adjustment.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp(Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.Direct3D.ColorValue,System.Single)">
      <summary>Creates a color value using linear interpolation.</summary>
      <param name="c1">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the first source color.</param>
      <param name="c2">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the second source color.</param>
      <param name="s">Floating-point value that linearly interpolates between the colors <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp" /> and <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp" />, treating them both as 4-D vectors. There are no limits on this parameter's value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp(System.Int32,System.Int32,System.Single)">
      <summary>Creates a color value using linear interpolation.</summary>
      <param name="c1" />
      <param name="c2" />
      <param name="s">Floating-point value that linearly interpolates between the colors <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp" /> and <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp" />, treating them both as 4-D vectors. There are no limits on this parameter's value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp(System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>Creates a color value using linear interpolation.</summary>
      <param name="c1">A <see cref="T:System.Drawing.Color" /> object that specifies the first source color.</param>
      <param name="c2">A <see cref="T:System.Drawing.Color" /> object that specifies the second source color.</param>
      <param name="s">Floating-point value that linearly interpolates between the colors <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp" /> and <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Lerp" />, treating them both as 4-D vectors. There are no limits on this parameter's value.</param>
      <returns>A <see cref="T:System.Drawing.Color" /> object that represents the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Modulate(Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Blends two colors.</summary>
      <param name="c1">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the first source color to modulate.</param>
      <param name="c2">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the second source color to modulate.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the result of the blending operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Modulate(System.Int32,System.Int32)">
      <summary>Blends two colors.</summary>
      <param name="c1" />
      <param name="c2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Modulate(System.Drawing.Color,System.Drawing.Color)">
      <summary>Blends two colors.</summary>
      <param name="c1">A <see cref="T:System.Drawing.Color" /> object that specifies the first source color to modulate.</param>
      <param name="c2">A <see cref="T:System.Drawing.Color" /> object that specifies the second source color to modulate.</param>
      <returns>A <see cref="T:System.Drawing.Color" /> object that represents the result of the blending operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Negative(Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Creates a negative color value from a given color value.</summary>
      <param name="c">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the source color.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the negative color value of the source color.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Negative(System.Int32)">
      <summary>Creates a negative color value from a given color value.</summary>
      <param name="c" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Negative(System.Drawing.Color)">
      <summary>Creates a negative color value from a given color value.</summary>
      <param name="c">A <see cref="T:System.Drawing.Color" /> object that specifies the source color.</param>
      <returns>A <see cref="T:System.Drawing.Color" /> object that represents the negative color value of the source color.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale(Microsoft.DirectX.Direct3D.ColorValue,System.Single)">
      <summary>Scales a color value.</summary>
      <param name="c">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the source color to scale.</param>
      <param name="s">Floating-point value that represents the scaling factor to apply. The scaling factor scales the color, treating it like a 4-D vector. There are no limits on this parameter's value. If <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale" /> is 1, the resulting color is the original color.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that is the scaled color value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale(System.Int32,System.Single)">
      <summary>Scales a color value.</summary>
      <param name="c" />
      <param name="s">Floating-point value that represents the scaling factor to apply. The scaling factor scales the color, treating it like a 4-D vector. There are no limits on this parameter's value. If <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale" /> is 1, the resulting color is the original color.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale(System.Drawing.Color,System.Single)">
      <summary>Scales a color value.</summary>
      <param name="c">A <see cref="T:System.Drawing.Color" /> object that specifies the source color to scale.</param>
      <param name="s">Floating-point value that represents the scaling factor to apply. The scaling factor scales the color, treating it like a 4-D vector. There are no limits on this parameter's value. If <see cref="M:Microsoft.DirectX.Direct3D.ColorOperator.Scale" /> is 1, the resulting color is the original color.</param>
      <returns>A <see cref="T:System.Drawing.Color" /> object that is the scaled color value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Subtract(Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Subtracts two color values to create a new color value.</summary>
      <param name="c1">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the color to subtract.</param>
      <param name="c2">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that specifies the color to subtract.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object that represents the difference between the two colors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Subtract(System.Int32,System.Int32)">
      <summary>Subtracts two color values to create a new color value.</summary>
      <param name="c1" />
      <param name="c2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorOperator.Subtract(System.Drawing.Color,System.Drawing.Color)">
      <summary>Subtracts two color values to create a new color value.</summary>
      <param name="c1">A <see cref="T:System.Drawing.Color" /> object that specifies the color to subtract.</param>
      <param name="c2">A <see cref="T:System.Drawing.Color" /> object that specifies the color to subtract.</param>
      <returns>A <see cref="T:System.Drawing.Color" /> object that represents the difference between the two colors.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet">
      <summary>Implements a keyframe animation set that is stored in a compressed data format.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet)">
      <summary>Creates a <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object that stores key-frame data in a compressed format.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.#ctor(System.IntPtr)">
      <summary>Creates a <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object that stores key-frame data in a compressed format.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.#ctor(System.String,System.Double,Microsoft.DirectX.Direct3D.PlaybackType,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.KeyCallback[])">
      <summary>Creates a <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object that stores key-frame data in a compressed format.</summary>
      <param name="name">Animation set name.</param>
      <param name="ticksPerSecond">Number of key-frame ticks that elapse per second.</param>
      <param name="playback">Type of the animation set playback loop. See <see cref="T:Microsoft.DirectX.Direct3D.PlaybackType" />.</param>
      <param name="compressedData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the animation set graphics data.</param>
      <param name="callbackKeys">Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> objects that store user callback data.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.GetCallbackKeys">
      <summary>Fills an array with callback key data that is used for keyframe animation.</summary>
      <returns>Returns an array of <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> objects filled with callback data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXCompressedAnimationSet, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.op_Equality(Microsoft.DirectX.Direct3D.CompressedAnimationSet,Microsoft.DirectX.Direct3D.CompressedAnimationSet)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.op_Inequality(Microsoft.DirectX.Direct3D.CompressedAnimationSet,Microsoft.DirectX.Direct3D.CompressedAnimationSet)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CompressedAnimationSet.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CompressedAnimationSet.CompressedData">
      <summary>Retrieves the data buffer that stores compressed keyframe animation data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CompressedAnimationSet.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CompressedAnimationSet.NumberCallbackKeys">
      <summary>Retrieves the number of callback keys in the animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CompressedAnimationSet.PlaybackType">
      <summary>Retrieves the type of the animation set playback loop.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CompressedAnimationSet.SourceTicksPerSecond">
      <summary>Retrieves the number of animation keyframe ticks that occur per second.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CompressedAnimationSet.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConstantTable">
      <summary>Provides access to the constant table, which contains the variables that are used by high-level language shaders and effects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.ConstantTable.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.ConstantTable.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.FromShader(Microsoft.DirectX.GraphicsStream)">
      <summary>Returns a constant table from a <see cref="T:Microsoft.DirectX.GraphicsStream" /> shader data object.</summary>
      <param name="code">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains shader data.</param>
      <returns>The constant table contained within the <see cref="T:Microsoft.DirectX.GraphicsStream" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstant(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Retrieves a constant by looking up its index or by name.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that serves as a unique identifier to the parent data structure. If the constant is a top-level parameter (that is, if there is no parent data structure), use 0.</param>
      <param name="name">Name of the constant.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> class that represents the constant.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstant(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves a constant by looking up its index or by name.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that serves as a unique identifier to the parent data structure. If the constant is a top-level parameter (that is, if there is no parent data structure), use 0.</param>
      <param name="index">Zero-based index of the constant.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> class that represents the constant.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstantDescription(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of constant descriptions in the constant table.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> class that uniquely identifies a constant.</param>
      <param name="numberConstants">[in, out] Input supplied must be the maximum size of the array. Output is the number of elements that are filled in the array when the function returns.</param>
      <returns>Array of descriptions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.ConstantDescription" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetConstantElement(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves a constant from an array of constants.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> class that uniquely identifies the array of constants. This value cannot be 0.</param>
      <param name="index">Zero-based index of the element in the array.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that uniquely identifies the constant.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXConstantTable, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.GetSamplerIndex(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves the sampler index.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier for the sampler whose index is to be retrieved.</param>
      <returns>The sampler index number from the constant table.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.op_Equality(Microsoft.DirectX.Direct3D.ConstantTable,Microsoft.DirectX.Direct3D.ConstantTable)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.op_Inequality(Microsoft.DirectX.Direct3D.ConstantTable,Microsoft.DirectX.Direct3D.ConstantTable)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.ConstantTable.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetDefaults(Microsoft.DirectX.Direct3D.Device)">
      <summary>Sets constants to their default values, which are declared in the variable declarations in the shader.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="matrix">Array of nontransposed <see cref="T:Microsoft.DirectX.Matrix" /> to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="matrix">Nontransposed <see cref="T:Microsoft.DirectX.Matrix" /> to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean[])">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="b">Array of <see cref="T:System.Boolean" /> values to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="b">A <see cref="T:System.Boolean" /> value to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.GraphicsStream)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains values to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Void,System.Int32)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="data">A buffer containing the data to set.</param>
      <param name="dataSize">Number of bytes in the <see cref="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue" /> buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.ColorValue[])">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="color">Array of <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structures to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="color">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4[])">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="vector">Array of <see cref="T:Microsoft.DirectX.Vector4" /> structures to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="vector">A <see cref="T:Microsoft.DirectX.Vector4" /> structure to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Single[])">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="f">Array of <see cref="T:System.Single" /> values to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Single)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="f">A <see cref="T:System.Single" /> value to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Int32[])">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="n">Array of <see cref="T:System.Int32" /> values to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValue(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Sets the value to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="n">An <see cref="T:System.Int32" /> value to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValueTranspose(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Matrix" /> or an array of matrices to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="matrix">Array of transposed matrices to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.SetValueTranspose(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Matrix" /> or an array of matrices to the constant table.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the constant table.</param>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents a unique identifier of a constant.</param>
      <param name="matrix">Transposed matrix to set to the constant table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTable.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.Description">
      <summary>Retrieves a description of the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.StreamData">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTable.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.D3DX">
      <summary>Contains default constant values for Microsoft Direct3D extensions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.Default">
      <summary>Retrieves the value of the <see cref="F:Microsoft.DirectX.Direct3D.D3DX.Default" /> constant for Microsoft Direct3D extensions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.DefaultFloat">
      <summary>Retrieves the value of the <see cref="F:Microsoft.DirectX.Direct3D.D3DX.DefaultFloat" /> constant for Microsoft Direct3D extensions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.DefaultNonPowerOf2">
      <summary>Retrieves the value of the <see cref="F:Microsoft.DirectX.Direct3D.D3DX.DefaultNonPowerOf2" /> constant for Microsoft Direct3D extensions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.FormatFromFile">
      <summary>Retrieves the value of the <see cref="F:Microsoft.DirectX.Direct3D.D3DX.FormatFromFile" /> constant for Microsoft Direct3D extensions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.D3DX.FromFile">
      <summary>Retrieves the value of the <see cref="F:Microsoft.DirectX.Direct3D.D3DX.FromFile" /> constant for Microsoft Direct3D extensions.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.D3DX.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.D3DX" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceInformation">
      <summary>Contains functionality for retrieving the driver level for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceInformation.GetDriverLevel(Microsoft.DirectX.Direct3D.Device)">
      <summary>Retrieves the driver level for a device.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that is used to retrieve the driver level.</param>
      <returns>An <see cref="T:System.Int32" /> value that indicates the driver level of the device.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Direct3DXException">
      <summary>Base exception class for D3DX. Derives from <see cref="T:Microsoft.DirectX.DirectXException" />.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Direct3DXException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Direct3DXException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Direct3DXException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Direct3DXException" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Direct3DXException.GetExceptionFromResultInternal(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Exception" /> object that represents the result code passed in.</summary>
      <param name="resultCode">Integer that represents the result code of the exception.</param>
      <returns>An <see cref="T:System.Exception" /> object that represents the error that occurred.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException">
      <summary>There is a duplicate named fragment.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DuplicateNamedFragmentException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Effect">
      <summary>Used to set and query effects and choose techniques.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Effect.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Effect.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Effect.Lost">
      <summary>Occurs when an object is lost, normally just before a device is reset.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Effect.Reset">
      <summary>Occurs after the <see cref="M:Microsoft.DirectX.Direct3D.Effect.OnResetDevice" /> method is called or after the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> is reset.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.ApplyParameterBlock(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Assigns a state value to each effect parameter in a parameter block.</summary>
      <param name="parameterBlock">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that is returned by <see cref="M:Microsoft.DirectX.Direct3D.Effect.EndParameterBlock" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)">
      <summary>Begins the application of an effect technique.</summary>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.FX" /> enumerated values that determine whether state modified by an effect will be saved and restored. The default value, 0, specifies that <see cref="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)" /> and <see cref="M:Microsoft.DirectX.Direct3D.Effect.End" /> will save and restore all state modified by the effect (including pixel and vertex shader constants). <see cref="F:Microsoft.DirectX.Direct3D.FX.DoNotSaveShaderState" /> indicates that shader device state will not be saved or restored; <see cref="F:Microsoft.DirectX.Direct3D.FX.DoNotSaveState" /> indicates that device state will not be saved or restored.</param>
      <returns>An integer value that indicates the number of passes needed to render the current effect technique.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.BeginParameterBlock">
      <summary>Captures parameter effect state changes.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.BeginPass(System.Int32)">
      <summary>Applies the state settings for the specified pass of a technique.</summary>
      <param name="passNumber">An integer that identifies the pass to apply. This value is returned by <see cref="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)" />, which must be called before rendering an effect.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Clone(Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a clone of an effect.</summary>
      <param name="dev">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the effect.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object that contains the cloned effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.CommitChanges">
      <summary>Propagates the state change that occurs inside of an active pass to the device before rendering.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> class.</summary>
      <param name="pData">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect" /> interface pointer.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.DeleteParameterBlock(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Deletes an effect parameter block.</summary>
      <param name="parameterBlock">Handle to the parameter block to delete. This is the handle returned by <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.EndParameterBlock" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Disassemble(System.Boolean)">
      <summary>Disassembles an effect.</summary>
      <param name="enableColorCode">Set to true to enable color coding to make the disassembly easier to read. Set to false for no color coding.</param>
      <returns>A string that contains the disassembled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Disassemble(Microsoft.DirectX.Direct3D.Effect,System.Boolean)">
      <summary>Disassembles an effect.</summary>
      <param name="effect">An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object that contains the effect to disassemble.</param>
      <param name="enableColorCode">Set to true to enable color coding to make the disassembly easier to read. Set to false for no color coding.</param>
      <returns>A string that contains the disassembled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.End">
      <summary>Ends the application of the current effect technique.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.EndParameterBlock">
      <summary>Stops the capturing of effect parameter state changes.</summary>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> for the parameter state block.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.EndPass">
      <summary>Signals the end of an effect pass.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FindNextValidTechnique(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Searches for the next valid technique, starting at the technique after the one specified.</summary>
      <param name="technique">Unique identifier of a technique. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" />. Specify null for this parameter to find the first valid technique.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that identifies the next technique, or null if the current technique is the last.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Creates an effect from an ASCII or binary effect description.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that creates the effect.</param>
      <param name="sourceDataFile">A <see cref="T:System.String" /> object that indicates the file name.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Creates an effect from an ASCII or binary effect description.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that creates the effect.</param>
      <param name="sourceDataFile">A <see cref="T:System.String" /> object that indicates the file name.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Creates an effect from an ASCII or binary effect description.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that creates the effect.</param>
      <param name="sourceDataFile">A <see cref="T:System.String" /> object that indicates the file name.</param>
      <param name="preprocessorDefines">Optional array of preprocessor macro definitions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Macro" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Creates an effect from an ASCII or binary effect description.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that will create the effect.</param>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the data used to create the <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Creates an effect from an ASCII or binary effect description.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that will create the effect.</param>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the data used to create the <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Creates an effect from an ASCII or binary effect description.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that will create the effect.</param>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the data used to create the <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.</param>
      <param name="preprocessorDefines">Optional array of preprocessor macro definitions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Macro" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromString(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Creates an effect from an ASCII or binary effect description in a string.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that will create the effect.</param>
      <param name="sourceData">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> to create.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromString(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Creates an effect from an ASCII or binary effect description in a string.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that will create the effect.</param>
      <param name="sourceData">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> to create.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.FromString(Microsoft.DirectX.Direct3D.Device,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectPool,System.String@)">
      <summary>Creates an effect from an ASCII or binary effect description in a string.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that will create the effect.</param>
      <param name="sourceData">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> to create.</param>
      <param name="preprocessorDefines">Optional null-terminated array of preprocessor macro definitions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Macro" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="skipConstants">A string of effect parameters that will be ignored by the effect system. The string must be NULL terminated and needs to contain the name of each application-managed constant separated by a semicolon.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="pool">An <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to use for shared parameters. If this value is null, no parameters are shared.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXEffect, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.IsParameterUsed(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Determines whether a parameter is used by a technique.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that acts as a unique identifier for the parameter.</param>
      <param name="technique">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that acts as a unique identifier for the technique.</param>
      <returns>Value that is true if the parameter is being used, or false if it is not being used.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.IsTechniqueValid(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Validates a technique.</summary>
      <param name="technique">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of a technique.</param>
      <returns>A value that is set to true, if the technique is valid; otherwise, true.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.IsTechniqueValid(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32@)">
      <summary>Validates a technique.</summary>
      <param name="technique">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> of a technique.</param>
      <param name="returnValue">Return code for validation.</param>
      <returns>A value that is set to true, if the technique is valid; otherwise, true.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.OnResetDevice">
      <summary>Should be called after a device is reset and before any other methods are called, if <see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> is set to false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.op_Equality(Microsoft.DirectX.Direct3D.Effect,Microsoft.DirectX.Direct3D.Effect)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.op_Inequality(Microsoft.DirectX.Direct3D.Effect,Microsoft.DirectX.Direct3D.Effect)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Effect.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises an <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="E:Microsoft.DirectX.Direct3D.Effect.Lost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises an <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="E:Microsoft.DirectX.Direct3D.Effect.Reset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.SetArrayRange(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32,System.Int32)">
      <summary>Sets the range of an array to pass to the device.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the effect.</param>
      <param name="start">The array starting index.</param>
      <param name="end">The array ending index.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Effect" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Effect.ValidateTechnique(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Validates a technique.</summary>
      <param name="technique">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object used as a unique identifier for the effect.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Device">
      <summary>Retrieves the device associated with an effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Pool">
      <summary>Retrieves an effect pool object that represents the pool of shared parameters.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.StateManager">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.EffectStateManager" /> object for this effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.Technique">
      <summary>Retreives and sets the active technique.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Effect.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectCompiler">
      <summary>Compiles an effect from a function or vertex shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.EffectCompiler.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileEffect">
      <summary>Compiles an effect.</summary>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileEffect(Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Compiles an effect.</summary>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> that specify compile options, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileEffect(Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Compiles an effect.</summary>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> that specify compile options, or 0.</param>
      <param name="errorMessages">String that contains at least the first compile error message that occurs, including effect compiler errors and high-level language compile errors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled effect.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Compiles a shader from an effect that contains one or more functions.</summary>
      <param name="functionName">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> used as a unique identifier for the function to be compiled. This value must not be null.</param>
      <param name="target">String that identifies the shader version. See Remarks.</param>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> flags that specify compile options, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader. The compiler shader is an array of <see cref="T:System.Int32" /> values.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compiles a shader from an effect that contains one or more functions.</summary>
      <param name="functionName">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> used as a unique identifier for the function to be compiled. This value must not be null.</param>
      <param name="target">String that identifies the shader version. See Remarks.</param>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> flags that specify compile options, or 0.</param>
      <param name="table">A <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object that can be used to access shader constants. This value can be null.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader. The compiler shader is an array of <see cref="T:System.Int32" /> values.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Compiles a shader from an effect that contains one or more functions.</summary>
      <param name="functionName">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> used as a unique identifier for the function to be compiled. This value must not be null.</param>
      <param name="target">String that identifies the shader version. See Remarks.</param>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> flags that specify compile options, or 0.</param>
      <param name="errorMessages">String that contains at least the first compile error message that occurred. This includes effect compiler errors and high-level language compile errors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader. The compiler shader is an array of <see cref="T:System.Int32" /> values.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.CompileShader(Microsoft.DirectX.Direct3D.EffectHandle,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary>Compiles a shader from an effect that contains one or more functions.</summary>
      <param name="functionName">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> used as a unique identifier for the function to be compiled. This value must not be null.</param>
      <param name="target">String that identifies the shader version. See Remarks.</param>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> flags that specify compile options, or 0.</param>
      <param name="errorMessages">String that contains at least the first compile error message that occurred. This includes effect compiler errors and high-level language compile errors.</param>
      <param name="table">A <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object that can be used to access shader constants. This value can be null.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader. The compiler shader is an array of <see cref="T:System.Int32" /> values.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceFile">String that indicates the file name.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceFile">String that indicates the file name.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description.</summary>
      <param name="sourceFile">String that indicates the file name.</param>
      <param name="preprocessorDefines">Optional array of preprocessor macro definitions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Macro" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Creates an effect compiler from an ASCII or binary effect description in a stream.</summary>
      <param name="sourceData">A <see cref="T:System.IO.Stream" /> object that contains the data used to create the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description in a stream.</summary>
      <param name="sourceData">A <see cref="T:System.IO.Stream" /> object that contains the data used to create the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description in a stream.</summary>
      <param name="sourceData">A <see cref="T:System.IO.Stream" /> object that contains the data used to create the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" />.</param>
      <param name="preprocessorDefines">Optional array of preprocessor macro definitions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Macro" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Creates an effect compiler from an ASCII or binary effect description in a string.</summary>
      <param name="sourceData">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> to create.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description in a string.</summary>
      <param name="sourceData">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> to create.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.FromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Creates an effect compiler from an ASCII or binary effect description in a string.</summary>
      <param name="sourceData">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> to create.</param>
      <param name="preprocessorDefines">Optional array of preprocessor macro definitions. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Macro" />.</param>
      <param name="includeFile">Optional <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to use for handling #include directives. If this value is null, #include directives are either honored when compiling from a file, or cause an error when compiled from a resource or memory.</param>
      <param name="flags">One or more compile options identified by the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration.</param>
      <param name="compilationErrors">String that contains a listing of compilation errors.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> that represents the effect compiler.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.GetLiteral(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a literal status of a parameter.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that is used as the unique identifier of the parameter.</param>
      <returns>Value that is true if the parameter is a literal, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXEffectCompiler, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.op_Equality(Microsoft.DirectX.Direct3D.EffectCompiler,Microsoft.DirectX.Direct3D.EffectCompiler)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.op_Inequality(Microsoft.DirectX.Direct3D.EffectCompiler,Microsoft.DirectX.Direct3D.EffectCompiler)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.EffectCompiler.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.SetArrayRange(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32,System.Int32)">
      <summary>Sets the range of an array to pass to the device.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the effect.</param>
      <param name="start">The array starting index.</param>
      <param name="end">The array ending index.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.SetLiteral(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean)">
      <summary>Toggles the literal status of a parameter.</summary>
      <param name="parameter">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that is used as a unique identifier for the parameter.</param>
      <param name="value">Set to true to make the parameter a literal. Set to false if the parameter can change value during the shader lifetime.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectCompiler.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.EffectCompiler" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectCompiler.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectCompiler.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectHandle">
      <summary>Represents a handle to specific effects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.FromString(System.String)">
      <summary>Creates an effect handle object from a string.</summary>
      <param name="value">A <see cref="T:System.String" /> that describes the <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> to create.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents the created effect handle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.op_Equality(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.op_Implicit(System.String)">
      <summary>This method has the same functionality as <see cref="M:Microsoft.DirectX.Direct3D.EffectHandle.FromString(System.String)" />, but is not supported.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectHandle.op_Inequality(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectPool">
      <summary>Allows applications to share resources between effects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.EffectPool.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.EffectPool.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool)">
      <summary>Creates a new instance of an <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.#ctor(System.IntPtr)">
      <summary>Creates a new instance of an <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.#ctor">
      <summary>Creates a new instance of an <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXEffectPool, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.op_Equality(Microsoft.DirectX.Direct3D.EffectPool,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.op_Inequality(Microsoft.DirectX.Direct3D.EffectPool,Microsoft.DirectX.Direct3D.EffectPool)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.EffectPool.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectPool.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.EffectPool" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectPool.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectPool.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectStateManager">
      <summary>
        <see cref="T:Microsoft.DirectX.Direct3D.EffectStateManager" /> is a user-implemented class that allows an application to set the device state from an effect. Each of the methods in this class must be implemented by the user and will then be used as a callback to the application when either of the following occur: <see cref="M:Microsoft.DirectX.Direct3D.Effect.BeginPass(System.Int32)" /> is called.<see cref="T:Microsoft.DirectX.Direct3D.Effect" /> state is dynamically updated by calling the appropriate state change application programming interface (API). See individual method pages for details.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.EffectStateManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.EffectStateManager" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.LightEnable(System.Int32,System.Boolean)">
      <summary>Enables or disables a light.</summary>
      <param name="lightIndex">An integer that represents the index of the light to enable or disable.</param>
      <param name="isEnabled">Set to true to enable the light. Set to false to disable the light.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetLight(System.Int32,Microsoft.DirectX.Direct3D.Light)">
      <summary>Sets a light.</summary>
      <param name="lightIndex">The zero-based index of the light.</param>
      <param name="light">The <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetMaterial(Microsoft.DirectX.Direct3D.Material@)">
      <summary>Sets a material.</summary>
      <param name="material">The <see cref="T:Microsoft.DirectX.Direct3D.Material" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetNPatchMode(System.Single)">
      <summary>Sets the number of subdivision segments for N-patches.</summary>
      <param name="numberSegments">A float value that represents the number of segments for N-patches.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShader(Microsoft.DirectX.Direct3D.PixelShader)">
      <summary>Sets a pixel shader.</summary>
      <param name="pixelShader">The <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets an array of pixel shader Boolean constants.</summary>
      <param name="registerIndex">The zero-based index of the first constant register.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of Boolean constants.</param>
      <param name="registerCount">The number of registers in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" /></param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets an array of pixel shader integer constants.</summary>
      <param name="registerIndex">The zero-based index of the first constant register.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of integer constants.</param>
      <param name="registerCount">The number of registers in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets an array of pixel shader floating-point constants.</summary>
      <param name="registerIndex">The zero-based index of the first constant register.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of floating-point constants.</param>
      <param name="registerCount">The number of registers in &gt;<see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetPixelShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetRenderState(Microsoft.DirectX.Direct3D.RenderStates,System.Int32)">
      <summary>Sets a render state.</summary>
      <param name="renderState">A value from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration to set.</param>
      <param name="stateValue">The render state value to set for the given render state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetSamplerState(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates,System.Int32)">
      <summary>Sets a sampler state.</summary>
      <param name="samplerStage">The zero-based sampler stage index.</param>
      <param name="state">A <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that identifies sampler state, which can specify the filtering, addressing, or the border color.</param>
      <param name="value">The value to set for the sampler state type specified in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetSamplerState(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetTexture(System.Int32,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Sets a texture.</summary>
      <param name="textureStage">The zero-based texture stage index.</param>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the texture to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetTextureStageState(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates,System.Int32)">
      <summary>Sets a texture stage state.</summary>
      <param name="textureStage">The zero-based texture stage index.</param>
      <param name="state">A <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that identifies texture state to set.</param>
      <param name="value">The value to set for the texture state type specified in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetTextureStageState(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix@)">
      <summary>Sets a transform.</summary>
      <param name="transformType">A value from the <see cref="T:Microsoft.DirectX.Direct3D.TransformType" /> enumeration to set.</param>
      <param name="transform">A transformation <see cref="T:Microsoft.DirectX.Matrix" /> to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexFormat(Microsoft.DirectX.Direct3D.VertexFormats)">
      <summary>Sets a vertex format code.</summary>
      <param name="vertexFormat">A value of the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> enumeration that detemines how to interpret vertex data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShader(Microsoft.DirectX.Direct3D.VertexShader)">
      <summary>Sets a vertex shader.</summary>
      <param name="vertexShader">The <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets an array of vertex shader Boolean constants.</summary>
      <param name="registerIndex">The zero-based index of the first constant register.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of Boolean constants.</param>
      <param name="registerCount">The number of registers in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets an array of vertex shader integer constants.</summary>
      <param name="registerIndex">The zero-based index of the first constant register.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of integer constants.</param>
      <param name="registerCount">The number of registers in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets an array of vertex shader floating-point constants.</summary>
      <param name="registerIndex">The zero-based index of the first constant register.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of floating-point constants.</param>
      <param name="registerCount">The number of registers in <see cref="M:Microsoft.DirectX.Direct3D.EffectStateManager.SetVertexShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Font">
      <summary>Encapsulates the textures and resources needed to render a specific font on a specific device.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Font.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Font.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Font.Lost">
      <summary>Occurs when an object is lost, normally just before a device is reset.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Font.Reset">
      <summary>Occurs after the <see cref="M:Microsoft.DirectX.Direct3D.Font.OnResetDevice" /> method is called or after the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> is reset.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont)">
      <summary>Creates a new instance of a <see cref="M:Microsoft.DirectX.Direct3D.Font.#ctor" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.#ctor(System.IntPtr)">
      <summary>Creates a new instance of a <see cref="M:Microsoft.DirectX.Direct3D.Font.#ctor" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font)">
      <summary>Creates a new instance of a <see cref="M:Microsoft.DirectX.Direct3D.Font.#ctor" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the font object.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.FontDescription)">
      <summary>Creates a new instance of a <see cref="M:Microsoft.DirectX.Direct3D.Font.#ctor" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the font object.</param>
      <param name="description">A <see cref="T:Microsoft.DirectX.Direct3D.FontDescription" /> structure.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.FontWeight,System.Int32,System.Boolean,Microsoft.DirectX.Direct3D.CharacterSet,Microsoft.DirectX.Direct3D.Precision,Microsoft.DirectX.Direct3D.FontQuality,Microsoft.DirectX.Direct3D.PitchAndFamily,System.String)">
      <summary>Creates a new instance of a <see cref="M:Microsoft.DirectX.Direct3D.Font.#ctor" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the font object.</param>
      <param name="height">Height of the font.</param>
      <param name="width">Width of the font.</param>
      <param name="weight">Weight of the font.</param>
      <param name="miplevels">Number of mip levels.</param>
      <param name="italic">Set to true if the font is in italics; otherwise, false.</param>
      <param name="charset">A <see cref="T:Microsoft.DirectX.Direct3D.CharacterSet" /> enumerated value that indicates the type of characters to use.</param>
      <param name="outputPrecision">A <see cref="T:Microsoft.DirectX.Direct3D.Precision" /> constant that indicates the font precision.</param>
      <param name="quality">A <see cref="T:Microsoft.DirectX.Direct3D.FontQuality" /> value that indicates the quality of the font.</param>
      <param name="pitchFamily">A <see cref="T:Microsoft.DirectX.Direct3D.PitchAndFamily" /> value that indicates the font pitch and family.</param>
      <param name="faceName">A string that indicates the name of the font.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(Microsoft.DirectX.Direct3D.Sprite,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>Draws formatted text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string. Can be null, in which case Microsoft Direct3D renders the string with its own sprite object.If <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> will be called more than once in a row, a sprite object should be specified to improve efficiency.</param>
      <param name="text">String to draw.</param>
      <param name="x">The x-coordinate where to draw the font.</param>
      <param name="y">The y-coordinate where to draw the font.</param>
      <param name="color">Color of the text. For more information, see <see cref="T:System.Drawing.Color" />.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Center" /> or <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Bottom" /> is specified in the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter, the return value is the offset from <see cref="P:System.Drawing.Rectangle.Top" /> to the bottom of the drawn text. If the function fails, the return value is 0.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(Microsoft.DirectX.Direct3D.Sprite,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Draws formatted text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string. Can be null, in which case Microsoft Direct3D renders the string with its own sprite object.If <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> will be called more than once in a row, a sprite object should be specified to improve efficiency.</param>
      <param name="text">String to draw.</param>
      <param name="x">The x-coordinate where to draw the font.</param>
      <param name="y">The y-coordinate where to draw the font.</param>
      <param name="color">Integer color value.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Center" /> or <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Bottom" /> is specified in the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter, the return value is the offset from <see cref="P:System.Drawing.Rectangle.Top" /> to the bottom of the drawn text. If the function fails, the return value is 0.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(Microsoft.DirectX.Direct3D.Sprite,System.String,System.Drawing.Point,System.Drawing.Color)">
      <summary>Draws formatted text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string. Can be null, in which case Microsoft Direct3D renders the string with its own sprite object.If <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> will be called more than once in a row, a sprite object should be specified to improve efficiency.</param>
      <param name="text">String to draw.</param>
      <param name="pos">A <see cref="T:System.Drawing.Point" /> structure that specifies the upper left-hand coordinates of where to draw the font.</param>
      <param name="color">Color of the text. For more information, see <see cref="T:System.Drawing.Color" />.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Center" /> or <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Bottom" /> is specified in the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter, the return value is the offset from <see cref="P:System.Drawing.Rectangle.Top" /> to the bottom of the drawn text. If the function fails, the return value is 0.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(Microsoft.DirectX.Direct3D.Sprite,System.String,System.Drawing.Point,System.Int32)">
      <summary>Draws formatted text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string. Can be null, in which case Microsoft Direct3D renders the string with its own sprite object.If <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> will be called more than once in a row, a sprite object should be specified to improve efficiency.</param>
      <param name="text">String to draw.</param>
      <param name="pos">A <see cref="T:System.Drawing.Point" /> structure that specifies the upper left-hand coordinates of where to draw the font.</param>
      <param name="color">Integer color value.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Center" /> or <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Bottom" /> is specified in the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter, the return value is the offset from <see cref="P:System.Drawing.Rectangle.Top" /> to the bottom of the drawn text. If the function fails, the return value is 0.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(Microsoft.DirectX.Direct3D.Sprite,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.DrawTextFormat,System.Drawing.Color)">
      <summary>Draws formatted text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string. Can be null, in which case Microsoft Direct3D renders the string with its own sprite object.If <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> will be called more than once in a row, a sprite object should be specified to improve efficiency.</param>
      <param name="text">String to draw.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the rectangle, in logical coordinates, in which the text is being formatted.</param>
      <param name="format">Method of formatting the text; can be any combination of values from the <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> enumeration.</param>
      <param name="color">Color of the text. For more information, see <see cref="T:System.Drawing.Color" />.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Center" /> or <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Bottom" /> is specified in the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter, the return value is the offset from <see cref="P:System.Drawing.Rectangle.Top" /> to the bottom of the drawn text. If the function fails, the return value is 0.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.DrawText(Microsoft.DirectX.Direct3D.Sprite,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.DrawTextFormat,System.Int32)">
      <summary>Draws formatted text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string. Can be null, in which case Microsoft Direct3D renders the string with its own sprite object.If <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> will be called more than once in a row, a sprite object should be specified to improve efficiency.</param>
      <param name="text">String to draw.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the rectangle, in logical coordinates, in which the text is being formatted.</param>
      <param name="format">Method of formatting the text; can be any combination of values from the <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> enumeration.</param>
      <param name="color">Integer color value.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Center" /> or <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.Bottom" /> is specified in the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter, the return value is the offset from <see cref="P:System.Drawing.Rectangle.Top" /> to the bottom of the drawn text. If the function fails, the return value is 0.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.GetGlyphData(System.Int32)">
      <summary>Returns information about the placement and orientation of a glyph in a character cell.
	</summary>
      <param name="glyph">Glyph identifier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that contains the glyph.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.GetGlyphData(System.Int32,System.Drawing.Rectangle@,System.Drawing.Point@)">
      <summary>Returns information about the placement and orientation of a glyph in a character cell.
	</summary>
      <param name="glyph">Glyph identifier.</param>
      <param name="blackBox">Smallest <see cref="T:System.Drawing.Rectangle" /> object that completely encloses the glyph (its black box).</param>
      <param name="cellInc">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that connects the origin of the current character cell to the origin of the next character cell.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that contains the glyph.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFont, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Font" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.MeasureString(Microsoft.DirectX.Direct3D.Sprite,System.String,Microsoft.DirectX.Direct3D.DrawTextFormat,System.Drawing.Color)">
      <summary>Measures the rectangular dimensions of the specified text string when drawn with the specified <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object and formatted with the specified <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> method of formatting text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string.</param>
      <param name="text">String to measure.</param>
      <param name="format">Method of formatting the text; can be any combination of values from the <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> enumeration.</param>
      <param name="color">Color of the text. For more information, see <see cref="T:System.Drawing.Color" />.</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> structure that contains the rectangle, in logical coordinates, that encompasses the formatted text string.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.MeasureString(Microsoft.DirectX.Direct3D.Sprite,System.String,Microsoft.DirectX.Direct3D.DrawTextFormat,System.Int32)">
      <summary>Measures the rectangular dimensions of the specified text string when drawn with the specified <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object and formatted with the specified <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> method of formatting text.</summary>
      <param name="sprite">A <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object that contains the string.</param>
      <param name="text">String to measure.</param>
      <param name="format">Method of formatting the text; can be any combination of values from the <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> enumeration.</param>
      <param name="color">Integer color value.</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> structure that contains the rectangle, in logical coordinates, that encompasses the formatted text string.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.OnResetDevice">
      <summary>Should be called after the device is reset and before any other methods are called, if <see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> is set to false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.op_Equality(Microsoft.DirectX.Direct3D.Font,Microsoft.DirectX.Direct3D.Font)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.op_Inequality(Microsoft.DirectX.Direct3D.Font,Microsoft.DirectX.Direct3D.Font)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.PreloadCharacters(System.Int32,System.Int32)">
      <summary>Loads a series of characters into video memory to improve the efficiency of rendering to a device.</summary>
      <param name="first">Identifier of the first character to load into video memory.</param>
      <param name="last">Identifier of the last character to load into video memory.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.PreloadGlyphs(System.Int32,System.Int32)">
      <summary>Loads a series of glyphs into video memory to improve the efficiency of rendering to a device.</summary>
      <param name="first">Identifier of the first glyph to load into video memory.</param>
      <param name="last">Identifier of the last glyph to load into video memory.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.PreloadText(System.String)">
      <summary>Loads formatted text into video memory to improve the efficiency of rendering to a device.</summary>
      <param name="text">String of characters to load into video memory.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Font.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Font" />.<see cref="E:Microsoft.DirectX.Direct3D.Font.Lost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Font" />.<see cref="E:Microsoft.DirectX.Direct3D.Font.Reset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Font.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Font" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.Description">
      <summary>Retrieves a description of the current font object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.Device">
      <summary>Retrieves the Microsoft Direct3D device associated with a font object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.DeviceContext">
      <summary>Returns a handle to a display device context (DC) that includes the font set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Font.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FragmentLinker">
      <summary>Links shader fragments at runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.FragmentLinker.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.FragmentLinker.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.AddFragments(Microsoft.DirectX.GraphicsStream)">
      <summary>Adds fragments to the existing fragment linker.</summary>
      <param name="fragments">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains shader fragments to add.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.ClearCache">
      <summary>Clears the fragment linker cache.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" />.</param>
      <param name="shaderCacheSize">Integer that represents the shader cache size.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromFile(System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="file">String that represents the name of the file that contains the shader fragments.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="file">String that represents the name of the file that contains the shader fragments.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="file">String that represents the name of the file that contains the shader fragments.</param>
      <param name="preprocessorDefines">Array of <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> objects that specify the preprocessor definitions to use.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="file">String that represents the name of the file that contains the shader fragments.</param>
      <param name="preprocessorDefines">Array of <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> objects that specify the preprocessor definitions to use.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <param name="compilationErrors">A <see cref="T:System.String" /> that contains a listing of errors and warnings that were encountered during compilation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader fragments.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader fragments.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader fragments.</param>
      <param name="preprocessorDefines">Array of <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> objects that specify the preprocessor definitions to use.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader fragments.</param>
      <param name="preprocessorDefines">Array of <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> objects that specify the preprocessor definitions to use.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <param name="compilationErrors">A <see cref="T:System.String" /> that contains a listing of errors and warnings that were encountered during compilation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromString(System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.String" /> that contains the shader fragments.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.String" /> that contains the shader fragments.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.String" /> that contains the shader fragments.</param>
      <param name="preprocessorDefines">Array of <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> objects that specify the preprocessor definitions to use.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles shader fragments and creates a new fragment linker object.</summary>
      <param name="data">A <see cref="T:System.String" /> that contains the shader fragments.</param>
      <param name="preprocessorDefines">Array of <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> objects that specify the preprocessor definitions to use.</param>
      <param name="includeFile">An <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the shader compiler options to use.</param>
      <param name="compilationErrors">A <see cref="T:System.String" /> that contains a listing of errors and warnings that were encountered during compilation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the created shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragment(System.String)">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader fragment.</summary>
      <param name="name">String that represents the name of the shader fragment.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader fragment.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragmentDescription(Microsoft.DirectX.Direct3D.EffectHandle)">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.Direct3D.FragmentDescription" /> object.</summary>
      <param name="name">
        <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents the shader fragment.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.FragmentDescription" /> object that contains the fragment description.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragmentHandle(System.String)">
      <summary>Retrieves an <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object by name or by index.</summary>
      <param name="name">String that represents the name of the shader fragment.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that contains the fragment handle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetFragmentHandle(System.Int32)">
      <summary>Retrieves an <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object by name or by index.</summary>
      <param name="index">Integer that represents the zero-based index of the shader fragment.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that contains the fragment handle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFragmentLinker, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.LinkPixelShader(System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectHandle[],System.String@)">
      <summary>Links a compiled pixel shader at run time.</summary>
      <param name="profile">A <see cref="T:System.String" /> that contains the pixel shader profile that determines the shader instruction set.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the link options to use.</param>
      <param name="fragmentHandles">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> objects that represent the handles of the fragments to link.</param>
      <param name="errors">A <see cref="T:System.String" /> that contains a listing of errors and warnings that were encountered during compilation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object that contains the linked pixel shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.LinkShader(System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectHandle[],System.String@)">
      <summary>Links a compiled shader at run time.</summary>
      <param name="profile">A <see cref="T:System.String" /> that contains the compiled shader profile that determines the shader instruction set.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the link options to use.</param>
      <param name="fragmentHandles">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> objects that represent the handles of the fragments to link.</param>
      <param name="errors">A <see cref="T:System.String" /> that contains a listing of errors and warnings that were encountered during compilation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the linked shader. This buffer contains the compiled shader code as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.LinkVertexShader(System.String,Microsoft.DirectX.Direct3D.ShaderFlags,Microsoft.DirectX.Direct3D.EffectHandle[],System.String@)">
      <summary>Links a compiled shader at run time.</summary>
      <param name="profile">A <see cref="T:System.String" /> that contains the vertex shader profile that determines the shader instruction set.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specifies the link options to use.</param>
      <param name="fragmentHandles">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> objects that represent the handles of the fragments to link.</param>
      <param name="errors">A <see cref="T:System.String" /> that contains a listing of errors and warnings that were encountered during compilation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object that contains the linked vertex shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.op_Equality(Microsoft.DirectX.Direct3D.FragmentLinker,Microsoft.DirectX.Direct3D.FragmentLinker)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.op_Inequality(Microsoft.DirectX.Direct3D.FragmentLinker,Microsoft.DirectX.Direct3D.FragmentLinker)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.FragmentLinker.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentLinker.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.FragmentLinker" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.AllFragments">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled linker fragments.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> for the current fragment linker.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.NumberOfFragments">
      <summary>Retrieves the number of fragments in the linker.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentLinker.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Frame">
      <summary>Encapsulates a transform frame in a transformation frame hierarchy.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.AppendChild(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.Frame)">
      <summary>Adds a child frame to a frame.</summary>
      <param name="parent">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the parent node in the frame hierarchy.</param>
      <param name="child">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the child node to add to the frame hierarchy.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.CalculateBoundingSphere(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Vector3@)">
      <summary>Computes the bounding sphere of all meshes in the frame hierarchy.</summary>
      <param name="frameRoot">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the root node in the frame hierarchy.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the center coordinates of the bounding sphere.</param>
      <returns>Floating-point value that represents the radius of the bounding sphere.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.Destroy(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.AllocateHierarchy)">
      <summary>Destroys the subtree of frames under the root, including the root.</summary>
      <param name="frameRoot">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the root node in the frame hierarchy.</param>
      <param name="allocHierarchy">An <see cref="T:Microsoft.DirectX.Direct3D.AllocateHierarchy" /> object used to deallocate nodes of the frame hierarchy.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.Find(Microsoft.DirectX.Direct3D.Frame,System.String)">
      <summary>Finds the child frame of a root frame.</summary>
      <param name="frameRoot">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the root node in the frame hierarchy.</param>
      <param name="name">String that represents the name of the child frame to find.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the located child frame.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.GetNumberNamedMatrices(Microsoft.DirectX.Direct3D.Frame)">
      <summary>Retrieves the number of frames in a subtree that have non-null names.</summary>
      <param name="frameRoot">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the root node of the subtree.</param>
      <returns>Integer that represents the number of frames that have non-null names.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Frame.RegisterNamedMatrices(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.AnimationController)">
      <summary>Given a frame hierarchy, registers all named matrices in the animation mixer.</summary>
      <param name="frameRoot">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the root node in the frame hierarchy.</param>
      <param name="animationMixer">An <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> object that represents the animation mixer.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.FrameFirstChild">
      <summary>Retrieves the first child of the frame.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.FrameSibling">
      <summary>Retrieves the first sibling of the current frame in the hierarchy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.MeshContainer">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" /> object in a transformation frame hierarchy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.Name">
      <summary>Retrieves or sets the name of a frame.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Frame.TransformationMatrix">
      <summary>Retrieves or sets the transformation <see cref="T:Microsoft.DirectX.Matrix" /> of a frame.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Geometry">
      <summary>Contains miscellaneous math-related functions.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.BoxBoundProbe(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines whether a ray intersects the volume of a bounding box.</summary>
      <param name="min">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the lower-left corner of the bounding box. See Remarks.</param>
      <param name="max">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the upper-right corner of the bounding box. See Remarks.</param>
      <param name="rayPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDirection">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray. This vector should not be (0,0,0), but does not need to be normalized.</param>
      <returns>Value that is true if the ray intersects the volume of the bounding box, or false if it does not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingBox(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
      <summary>Computes a coordinate axis-oriented bounding box.</summary>
      <param name="pointsFvf">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the points around which the bounding box is constructed.</param>
      <param name="numVertices">Number of vertices.</param>
      <param name="vertexFormat">A <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> object that specifies the format of the vertices that are passed in.</param>
      <param name="min">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned lower-left corner of the bounding box.</param>
      <param name="max">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned upper-right corner of the bounding box.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingBox(System.Array,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
      <summary>Computes a coordinate axis-oriented bounding box.</summary>
      <param name="pointsFvf">Array that contains the points around which the bounding box is constructed.</param>
      <param name="vertexFormat">A <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> object that specifies the format of the vertices that are passed in.</param>
      <param name="min">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned lower-left corner of the bounding box.</param>
      <param name="max">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned upper-right corner of the bounding box.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingBox(Microsoft.DirectX.GraphicsStream,System.Int32,System.Int32,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
      <summary>Computes a coordinate axis-oriented bounding box.</summary>
      <param name="pointsFvf">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the points around which the bounding box is constructed.</param>
      <param name="numVertices">Number of vertices.</param>
      <param name="strideSize" />
      <param name="min">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned lower-left corner of the bounding box.</param>
      <param name="max">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned upper-right corner of the bounding box.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingBox(System.Array,System.Int32,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
      <summary>Computes a coordinate axis-oriented bounding box.</summary>
      <param name="pointsFvf">Array that contains the points around which the bounding box is constructed.</param>
      <param name="strideSize" />
      <param name="min">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned lower-left corner of the bounding box.</param>
      <param name="max">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the returned upper-right corner of the bounding box.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingSphere(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@)">
      <summary>Computes a bounding sphere for a mesh.</summary>
      <param name="pointsFvf">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the points around which the bounding sphere is constructed.</param>
      <param name="numVertices">Number of vertices.</param>
      <param name="vertexFormat">A <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> object that specifies the format of the vertices that are passed in.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the coordinate center of the returned bounding sphere.</param>
      <returns>Radius of the returned bounding sphere.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingSphere(System.Array,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Vector3@)">
      <summary>Computes a bounding sphere for a mesh.</summary>
      <param name="pointsFvf">Array that contains the points around which the bounding box is constructed.</param>
      <param name="vertexFormat">A <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> object that specifies the format of the vertices that are passed in.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the coordinate center of the returned bounding sphere.</param>
      <returns>Radius of the returned bounding sphere.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingSphere(Microsoft.DirectX.GraphicsStream,System.Int32,System.Int32,Microsoft.DirectX.Vector3@)">
      <summary>Computes a bounding sphere for a mesh.</summary>
      <param name="pointsFvf">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the points around which the bounding sphere is constructed.</param>
      <param name="numVertices">Number of vertices.</param>
      <param name="strideSize" />
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the coordinate center of the returned bounding sphere.</param>
      <returns>Radius of the returned bounding sphere.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeBoundingSphere(System.Array,System.Int32,Microsoft.DirectX.Vector3@)">
      <summary>Computes a bounding sphere for a mesh.</summary>
      <param name="pointsFvf">Array that contains the points around which the bounding box is constructed.</param>
      <param name="strideSize" />
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the coordinate center of the returned bounding sphere.</param>
      <returns>Radius of the returned bounding sphere.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.ComputeTangentFrame(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.TangentOptions,Microsoft.DirectX.GraphicsStream,System.Single,System.Single,System.Single,Microsoft.DirectX.GraphicsStream@)">
      <summary>Performs tangent frame computations on a mesh. Tangent, binormal, and optionally normal vectors are generated. Singularities are handled as required by grouping edges and splitting vertices.</summary>
      <param name="mesh">Input <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> mesh object.</param>
      <param name="textureInSemantic">Specifies the name of the semantic declaration to use for reading texture coordinates, typically <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TextureCoordinate" />.</param>
      <param name="textureInIndex">If a mesh has multiple texture coordinates, specifies the texture coordinate to use for the tangent frame computations. If zero, the mesh has only a single texture coordinate.</param>
      <param name="upartialOutSemantic">Specifies the <see cref="T:Microsoft.DirectX.Direct3D.DeclarationUsage" /> type, typically <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BiNormal" />, that describes where the partial derivative with respect to the u texture coordinate will be stored.</param>
      <param name="upartialOutIndex">Specifies the semantic index at which to store the partial derivative with respect to the u texture coordinate.</param>
      <param name="vpartialOutSemantic">Specifies the <see cref="T:Microsoft.DirectX.Direct3D.DeclarationUsage" /> type, typically <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BiNormal" />, that describes where the partial derivative with respect to the v texture coordinate will be stored.</param>
      <param name="vpartialOutIndex">Specifies the semantic index at which to store the partial derivative with respect to the v texture coordinate.</param>
      <param name="normalOutSemantic">Specifies the <see cref="T:Microsoft.DirectX.Direct3D.DeclarationUsage" /> type, typically <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal" />, that describes where the normal vector at each vertex will be stored.</param>
      <param name="normalOutIndex">Specifies the semantic index at which to store the normal vector at each vertex.</param>
      <param name="options">Combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.TangentOptions" /> values that specify tangent frame computation options. If zero, the following options will be specified: &amp; !( WeightByArea | WeightEqual | OrthogonalizeFromU | OrthogonalizeFromV | WrapUV | DontNormalizePartials | WindClockwise | CalculateNormals ).</param>
      <param name="adjacency">
        <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="partialEdgeTreshold">Specifies the maximum cosine of the angle at which two partial derivatives are deemed to be incompatible with each other. If the dot product of the direction of the two partial derivatives in adjacent triangles is less than or equal to this threshold, then the vertices shared between these triangles will be split.</param>
      <param name="singularPointThreshold">Specifies the maximum magnitude of a partial derivative at which a vertex will be deemed singular. As multiple triangles are incident on a point that have nearby tangent frames, but altogether cancel each other out (such as at the top of a sphere), the magnitude of the partial derivative will decrease. If the magnitude is less than or equal to this threshold, then the vertex will be split for every triangle that contains it.</param>
      <param name="normalEdgeThreshold">Similar to <see cref="M:Microsoft.DirectX.Direct3D.Geometry.ComputeTangentFrame(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.TangentOptions,Microsoft.DirectX.GraphicsStream,System.Single,System.Single,System.Single,Microsoft.DirectX.GraphicsStream@)" />, specifies the maximum cosine of the angle between two normals that is a threshold beyond which vertices shared between triangles will be split. If the dot product of the two normals is less than the threshold, the shared vertices will be split, forming a hard edge between neighboring triangles. If the dot product is more than the threshold, neighboring triangles will have their normals interpolated.</param>
      <param name="vertexRemapping">Output <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that receives a mapping of new vertices computed by this method to the original vertices.</param>
      <returns>Output <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> mesh object that receives the computed tangent, binormal, and normal vector data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.DegreeToRadian(System.Single)">
      <summary>Converts degrees to radians.</summary>
      <param name="degree">Value, in degrees, to convert to radians.</param>
      <returns>Converted value in radians.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.FresnelTerm(System.Single,System.Single)">
      <summary>Calculates the Fresnel term.</summary>
      <param name="cosTheta">Cosine of the incident angle; must be between 0 and 1.</param>
      <param name="refractionIndex">Refraction index of a material; must be greater than 1.</param>
      <returns>Fresnel term for unpolarized light.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.IntersectTri(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Computes the intersection of a ray and a triangle.</summary>
      <param name="zero">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the first triangle vertex position.</param>
      <param name="one">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the second triangle vertex position.</param>
      <param name="two">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that describes the third triangle vertex position.</param>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the position of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="hitLocation">An <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> structure that indicates the coordinates at which the ray intersects with the triangle.</param>
      <returns>Value that is true if the ray intersects the area of the triangle, or false if it does not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.OptimizeFaces(System.Int32[],System.Int32)">
      <summary>Optimizes a set of faces.</summary>
      <param name="indices">Array of 32-bit indices that indicate the mesh faces to optimize.</param>
      <param name="numberVertices">Number of vertices in the mesh to optimize.</param>
      <returns>Array of <see cref="T:System.Int32" /> values that represent the optimized faces.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.OptimizeFaces(System.Int16[],System.Int32)">
      <summary>Optimizes a set of faces.</summary>
      <param name="indices">Array of 16-bit indices that indicate the mesh faces to optimize.</param>
      <param name="numberVertices">Number of vertices in the mesh to optimize.</param>
      <returns>Array of <see cref="T:System.Int32" /> values that represent the optimized faces.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.OptimizeVertices(System.Int32[],System.Int32)">
      <summary>Optimizes a set of vertices.</summary>
      <param name="indices">Array of 32-bit indices that indicate the vertices to optimize.</param>
      <param name="numberVertices">Number of vertices to optimize.</param>
      <returns>Optimized vertices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.OptimizeVertices(System.Int16[],System.Int32)">
      <summary>Optimizes a set of vertices.</summary>
      <param name="indices">Array of 16-bit indices that indicate the vertices to optimize.</param>
      <param name="numberVertices">Number of vertices to optimize.</param>
      <returns>Optimized vertices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.RadianToDegree(System.Single)">
      <summary>Converts radians to degrees.</summary>
      <param name="radian">Value, in radians, to convert to degrees.</param>
      <returns>Converted value in degrees.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Geometry.SphereBoundProbe(Microsoft.DirectX.Vector3,System.Single,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines whether a ray intersects the volume of a sphere's bounding box.</summary>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the center coordinate of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
      <param name="rayPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDirection">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray. This vector should not be (0,0,0), but does not need to be normalized.</param>
      <returns>Value that is true if the ray intersects the volume of the sphere's bounding box, or false if it does not.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Include">
      <summary>Provides access to include-file directives.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Include.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Include" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Include.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Include.Open(Microsoft.DirectX.Direct3D.IncludeType,System.String)">
      <summary>Opens and reads the contents of a shader #include file.</summary>
      <param name="includeType">An <see cref="T:Microsoft.DirectX.Direct3D.IncludeType" /> object that represents the #include file to open.</param>
      <param name="filename">A <see cref="T:System.String" /> that contains the name of the #include file to open.</param>
      <returns>A <see cref="T:System.IO.Stream" /> object that contains the #include file data.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IntegratedMetricTensor">
      <summary>Contains methods to calculate integrated metric tensor (IMT) values for use in <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> operations.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerTexelSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)">
      <summary>Calculates an IMT from per-texel data. This function is very similar to <see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromTexture(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.Texture,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)" />, but it uses a float array to pass in the data, and it can calculate higher dimensional values than 4.</summary>
      <param name="mesh">An input mesh (see <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />) that contains the object geometry for calculating the IMT.</param>
      <param name="textureIndex">Zero-based texture coordinate index that identifies which set of texture coordinates to use.</param>
      <param name="texelSignal">An array of floating-point values that represent the texel signals. The array size is equivalent to <see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerTexelSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)" />*<see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerTexelSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)" />*<see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerTexelSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)" />.</param>
      <param name="width">The width of the texture.</param>
      <param name="height">The height of the texture.</param>
      <param name="signalDimension">The number of floating-point values per component in each element of the <see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerTexelSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)" /> array.</param>
      <param name="components">The number of components in each element of the <see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerTexelSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)" /> array.</param>
      <param name="flags">Combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.ImtWrap" /> flags.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that will return the calculated IMT data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerVertexSignal(Microsoft.DirectX.Direct3D.Mesh,System.Single[],System.Int32,System.Int32)">
      <summary>Calculates an IMT from from per-vertex data.</summary>
      <param name="mesh">An input mesh (see <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />) that contains the object geometry for calculating the IMT.</param>
      <param name="vertexSignal">An array of floating-point values that represent per-vertex signal data. The array size is <see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromPerVertexSignal(Microsoft.DirectX.Direct3D.Mesh,System.Single[],System.Int32,System.Int32)" /> * v, where v is the number of vertices in the input mesh.</param>
      <param name="signalDimension">The number of floating-point values per vertex.</param>
      <param name="signalStride">The number of bytes per vertex in the array. This must be a multiple of sizeof(Single).</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that will return the calculated IMT data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32,System.Single,Microsoft.DirectX.Direct3D.ImtSignalCallback)">
      <summary>Calculates an IMT from data that varies over the surface of the mesh (generally at a higher frequency than vertex data).</summary>
      <param name="mesh">An input mesh (see <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />) that contains the object geometry for calculating the IMT.</param>
      <param name="textureIndex">Zero-based texture coordinate index that identifies which set of texture coordinates to use.</param>
      <param name="signalDimension">The number of components in each data point in the signal.</param>
      <param name="maxUVDistance">The maximum distance between vertices; the algorithm continues subdividing until the distance between all vertices is less than or equal to <see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32,System.Single,Microsoft.DirectX.Direct3D.ImtSignalCallback)" />.</param>
      <param name="callback">A callback that is useful for monitoring progress.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that returns the calculated IMT data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromTexture(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.Texture,System.Int32,Microsoft.DirectX.Direct3D.ImtWrap)">
      <summary>Calculates an IMT from texture data.</summary>
      <param name="mesh">An input mesh (see <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />) that contains the object geometry for calculating the IMT.</param>
      <param name="texture">The texture (see <see cref="T:Microsoft.DirectX.Direct3D.Texture" />) that is mapped to the mesh.</param>
      <param name="textureIndex">Zero-based texture coordinate index that identifies which set of texture coordinates to use.</param>
      <param name="flags">Combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.ImtWrap" /> flags.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that will return the calculated IMT data.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidDataException">
      <summary>The data is invalid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDataException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDataException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDataException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDataException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidMeshException">
      <summary>The mesh is invalid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidMeshException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidMeshException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidMeshException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidMeshException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidMeshException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet">
      <summary>Implements a keyframe animation set.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Compress(Microsoft.DirectX.Direct3D.CompressionFlags,System.Single,Microsoft.DirectX.Direct3D.Frame)">
      <summary>Transforms animations in an animation set into a compressed format and returns the compressed data.</summary>
      <param name="flags">One of the <see cref="T:Microsoft.DirectX.Direct3D.CompressionFlags" /> values that define the compression mode used for storing compressed animation set data.</param>
      <param name="lossiness">Desired compression loss ratio, in the range of 0 to 1.</param>
      <param name="hierarchy">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> transformation frame hierarchy. Can be null.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CompressedAnimationSet" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet)">
      <summary>Creates a <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" />.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.#ctor(System.IntPtr)">
      <summary>Creates a <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" />.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.#ctor(System.String,System.Double,Microsoft.DirectX.Direct3D.PlaybackType,System.Int32,Microsoft.DirectX.Direct3D.KeyCallback[])">
      <summary>Creates a <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" />.</summary>
      <param name="name">String that contains the name of the animation set.</param>
      <param name="ticksPerSecond">Number of key-frame ticks that elapse per second.</param>
      <param name="playback">Type of the animation set playback loop. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.PlaybackType" />.</param>
      <param name="numberAnimations">Number of scale, rotate, and translate (SRT) animation sets.</param>
      <param name="callbackKeys">Array that contains the <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" />.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetCallbackKey(System.Int32)">
      <summary>Retrieves information about a specific callback in the animation set.</summary>
      <param name="index">An integer that represents the animation index.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> object that describes the animation's callback key.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetCallbackKeys">
      <summary>Fills an array with callback key data used for keyframe animation.</summary>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> structures that contain callback data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetNumberRotationKeys(System.Int32)">
      <summary>Retrieves the number of rotation keys in the specified keyframe animation.</summary>
      <param name="animation">Animation index.</param>
      <returns>Number of rotation keys in the specified keyframe animation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetNumberScaleKeys(System.Int32)">
      <summary>Retrieves the number of scale keys in the specified keyframe animation.</summary>
      <param name="animation">Animation index.</param>
      <returns>Number of scale keys in the specified keyframe animation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetNumberTranslationKeys(System.Int32)">
      <summary>Retrieves the number of translation keys in the specified keyframe animation.</summary>
      <param name="animation">Animation index.</param>
      <returns>Number of translation keys in the specified keyframe animation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXKeyframedAnimationSet, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetRotationKey(System.Int32,System.Int32)">
      <summary>Retrieves rotation information for a specific key frame in the animation set.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.KeyQuaternion" /> object that contains the key frame's rotation data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetRotationKeys(System.Int32)">
      <summary>Fills an array with rotational key data used for keyframe animation.</summary>
      <param name="animation">Animation index.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyQuaternion" /> structures that contain animation rotation data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetScaleKey(System.Int32,System.Int32)">
      <summary>Retrieves scale information for a specific key frame in the animation set.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> object that contains the key frame's scale data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetScaleKeys(System.Int32)">
      <summary>Fills an array with scale key data used for keyframe animation.</summary>
      <param name="animation">Animation index.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> structures that contain animation scale data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetTranslationKey(System.Int32,System.Int32)">
      <summary>Retrieves translation information for a specific key frame in the animation set.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> object that contains the key frame's translation data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.GetTranslationKeys(System.Int32)">
      <summary>Fills an array with translational key data used for keyframe animation.</summary>
      <param name="animation">Animation index.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> structures that contain animation translation data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.op_Equality(Microsoft.DirectX.Direct3D.KeyframedAnimationSet,Microsoft.DirectX.Direct3D.KeyframedAnimationSet)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.op_Inequality(Microsoft.DirectX.Direct3D.KeyframedAnimationSet,Microsoft.DirectX.Direct3D.KeyframedAnimationSet)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.RegisterAnimationKeys(System.String,Microsoft.DirectX.Direct3D.KeyVector3[],Microsoft.DirectX.Direct3D.KeyQuaternion[],Microsoft.DirectX.Direct3D.KeyVector3[])">
      <summary>Registers all of the scale, rotate, and translate (SRT) keyframe data of an animation, and fills arrays with SRT key data used for keyframe animation.</summary>
      <param name="animationName">String that contains the animation name.</param>
      <param name="scaleKeys">Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> structures that contain animation scale data.</param>
      <param name="rotationKeys">Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyQuaternion" /> structures that contain animation rotation data.</param>
      <param name="translationKeys">Array of <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> structures that contain animation translation data.</param>
      <returns>The animation index.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.SetCallbackKey(System.Int32,Microsoft.DirectX.Direct3D.KeyCallback)">
      <summary>Sets information about a specific callback in the animation set.</summary>
      <param name="index">An integer that represents the animation index.</param>
      <param name="value">A <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> object that describes the animation's callback key.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.SetRotationKey(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.KeyQuaternion)">
      <summary>Sets rotation information for a specific key frame in the animation set.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <param name="value">A <see cref="T:Microsoft.DirectX.Direct3D.KeyQuaternion" /> object that contains the key frame's rotation data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.SetScaleKey(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.KeyVector3)">
      <summary>Sets scale information for a specific key frame in the animation set.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <param name="value">A <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> object that contains the key frame's scale data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.SetTranslationKey(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.KeyVector3)">
      <summary>Sets translation information for a specific key frame in the animation set.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <param name="value">A <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> object that contains the key frame's translation data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.UnregisterAnimation(System.Int32)">
      <summary>Removes the animation data from the animation set.</summary>
      <param name="index">An integer that represents the index of the animation data to be removed.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.UnregisterRotationKey(System.Int32,System.Int32)">
      <summary>Removes the rotation data at the specified key frame.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.UnregisterScaleKey(System.Int32,System.Int32)">
      <summary>Removes the scale data at the specified key frame.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.UnregisterTranslationKey(System.Int32,System.Int32)">
      <summary>Removes the translation data at the specified key frame.</summary>
      <param name="animation">An integer that represents the animation index.</param>
      <param name="key">An integer that represents the animation key frame.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.KeyframedAnimationSet" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.NumberCallbackKeys">
      <summary>Retrieves the number of callback keys in an animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.PlaybackType">
      <summary>Retrieves the type of the animation set playback loop.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.SourceTicksPerSecond">
      <summary>Retrieves the number of animation keyframe ticks that occur per second.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.KeyframedAnimationSet.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Line">
      <summary>Implements line drawing using textured triangles.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Line.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Line.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Line.Lost">
      <summary>Occurs when an object is lost, normally just before a device is reset.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Line.Reset">
      <summary>Occurs after the <see cref="M:Microsoft.DirectX.Direct3D.Line.OnResetDevice" /> method is called or after the <see cref="T:Microsoft.DirectX.Direct3D.Line" /> is reset.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Begin">
      <summary>Prepares a device to draw lines.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine)">
      <summary>Uses a left-handed coordinate system to create a line.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.#ctor(System.IntPtr)">
      <summary>Uses a left-handed coordinate system to create a line.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.#ctor(Microsoft.DirectX.Direct3D.Device)">
      <summary>Uses a left-handed coordinate system to create a line.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created line.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Draw(Microsoft.DirectX.Vector2[],System.Drawing.Color)">
      <summary>Draws a line strip in screen space. Input is in the form of an array that defines points (of <see cref="T:Microsoft.DirectX.Vector2" />) on the line strip.</summary>
      <param name="vertexList">Array of vertices that make up the line. For more information, see <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> object that specifies the color of the line.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Draw(Microsoft.DirectX.Vector2[],System.Int32)">
      <summary>Draws a line strip in screen space. Input is in the form of an array that defines points (of <see cref="T:Microsoft.DirectX.Vector2" />) on the line strip.</summary>
      <param name="vertexList">Array of vertices that make up the line. For more information, see <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <param name="color">An <see cref="T:System.Int32" /> color value that specifies the color of the line.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.DrawTransform(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix,System.Drawing.Color)">
      <summary>Draws a line strip in screen space with a specified input transformation matrix.</summary>
      <param name="vertexList">Array of vertices that make up the line. For more information, see <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <param name="transform">Scale, rotate, and translate (SRT) matrix for transforming the points. For more information, see <see cref="T:Microsoft.DirectX.Matrix" />. If this matrix is a projection matrix, any stippled lines are drawn with a perspective-correct stippling pattern. Or, vertices can be transformed and <see cref="M:Microsoft.DirectX.Direct3D.Line.Draw" /> used to draw the line with a stipple pattern and no perspective correction.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> object that specifies the color of the line.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.DrawTransform(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Draws a line strip in screen space with a specified input transformation matrix.</summary>
      <param name="vertexList">Array of vertices that make up the line. For more information, see <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <param name="transform">Scale, rotate, and translate (SRT) matrix for transforming the points. For more information, see <see cref="T:Microsoft.DirectX.Matrix" />. If this matrix is a projection matrix, any stippled lines are drawn with a perspective-correct stippling pattern. Or, vertices can be transformed and <see cref="M:Microsoft.DirectX.Direct3D.Line.Draw" /> used to draw the line with a stipple pattern and no perspective correction.</param>
      <param name="color">An <see cref="T:System.Int32" /> color value that specifies the color of the line.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.End">
      <summary>Restores the device to the state it was in when <see cref="M:Microsoft.DirectX.Direct3D.Line.Begin" /> was called.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXLine, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Line" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.OnResetDevice">
      <summary>Should be called after the device is reset and before any other methods are called, if <see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> is set to false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.op_Equality(Microsoft.DirectX.Direct3D.Line,Microsoft.DirectX.Direct3D.Line)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.op_Inequality(Microsoft.DirectX.Direct3D.Line,Microsoft.DirectX.Direct3D.Line)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Line.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Line" />.<see cref="E:Microsoft.DirectX.Direct3D.Line.Lost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Line" />.<see cref="E:Microsoft.DirectX.Direct3D.Line.Reset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Line.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Antialias">
      <summary>Retrieves or sets the antialiasing switch value for a line.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Device">
      <summary>Retrieves the Microsoft Direct3D device associated with a line object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.GlLines">
      <summary>Retrieves or sets a value that switches between Microsoft Direct3D and OpenGL line-drawing modes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Pattern">
      <summary>Retrieves or sets the line stipple pattern.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.PatternScale">
      <summary>Retrieves or sets the stipple-pattern scale value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Line.Width">
      <summary>Retrieves or sets the thickness of a line.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException">
      <summary>The mesh has no data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LoadedMeshHasNoDataException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LoadUserData">
      <summary>Derived by the application to allocate or free frame and mesh container objects. Methods of this class are called during loading and destruction of frame hierarchies.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LoadUserData" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.LoadUserData" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.LoadFrameChildData(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Loads frame child data from a Microsoft DirectX (.x) file.</summary>
      <param name="frame">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the frame hierarchy.</param>
      <param name="xofChildData">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the .x file data to load.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.LoadMeshChildData(Microsoft.DirectX.Direct3D.MeshContainer,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Loads mesh child data from a Microsoft DirectX (.x) file.</summary>
      <param name="meshContainer">A <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" /> object that represents the mesh container.</param>
      <param name="xofChildData">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the .x file data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LoadUserData.LoadTopLevelData(Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Loads top-level data from a Microsoft DirectX (.x) file.</summary>
      <param name="xofChildData">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the .x file data.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Mesh">
      <summary>Manipulates mesh objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Mesh.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Box(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains an axis-aligned box.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="width">Width of the box along the x-axis.</param>
      <param name="height">Height of the box along the y-axis.</param>
      <param name="depth">Depth of the box along the z-axis.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that contains the box.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Box(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single,Microsoft.DirectX.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains an axis-aligned box.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="width">Width of the box along the x-axis.</param>
      <param name="height">Height of the box along the y-axis.</param>
      <param name="depth">Depth of the box along the z-axis.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object. When the method returns, this parameter is filled with three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that contains the box.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.CleanType,Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32[]@)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="cleanType">A flag from the <see cref="T:Microsoft.DirectX.Direct3D.CleanType" /> enumeration that specifies the type of mesh cleaning to perform.</param>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to clean.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be cleaned.</param>
      <param name="adjacencyOut">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the output mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned cleaned mesh. If no cleaning is necessary, the returned mesh is the same as the one that was passed in.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.CleanType,Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32[]@,System.String@)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="cleanType">A flag from the <see cref="T:Microsoft.DirectX.Direct3D.CleanType" /> enumeration that specifies the type of mesh cleaning to perform.</param>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to clean.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be cleaned.</param>
      <param name="adjacencyOut">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the output mesh.</param>
      <param name="errorsAndWarnings">A <see cref="T:System.String" /> that contains a list of errors and warnings that explain the problems found in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned cleaned mesh. If no cleaning is necessary, the returned mesh is the same as the one that was passed in.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.CleanType,Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="cleanType">A flag from the <see cref="T:Microsoft.DirectX.Direct3D.CleanType" /> enumeration that specifies the type of mesh cleaning to perform.</param>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to clean.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object filled with three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be cleaned.</param>
      <param name="adjacencyOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object. When the method returns, this parameter is filled with three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the output mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned cleaned mesh. If no cleaning is necessary, the returned mesh is the same as the one that was passed in.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Clean(Microsoft.DirectX.Direct3D.CleanType,Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,System.String@)">
      <summary>Cleans a mesh, preparing it for simplification.</summary>
      <param name="cleanType">A flag from the <see cref="T:Microsoft.DirectX.Direct3D.CleanType" /> enumeration that specifies the type of mesh cleaning to perform.</param>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to clean.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object filled with three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be cleaned.</param>
      <param name="adjacencyOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object. When the method returns, this parameter is filled with three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the output mesh.</param>
      <param name="errorsAndWarnings">A <see cref="T:System.String" /> that contains a list of errors and warnings that explain the problems found in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned cleaned mesh. If no cleaning is necessary, the returned mesh is the same as the one that was passed in.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangent(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Computes the tangent vectors for the texture coordinates given in a texture stage.</summary>
      <param name="texStage">Index that represents the <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManager" /> in <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManagerCollection" />.</param>
      <param name="tangentIndex">Index that provides the usage index for the tangent data. The vertex declaration implies the usage; this index modifies it.</param>
      <param name="binormIndex">Index that provides the usage index for the binormal data. The vertex declaration implies the usage; this index modifies it.</param>
      <param name="wrap">Value that is set to 0 to specify no wrapping, or to 1 to specify wrapping in the u and v directions.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangent(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.GraphicsStream)">
      <summary>Computes the tangent vectors for the texture coordinates given in a texture stage.</summary>
      <param name="texStage">Index that represents the <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManager" /> in <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManagerCollection" />.</param>
      <param name="tangentIndex">Index that provides the usage index for the tangent data. The vertex declaration implies the usage; this index modifies it.</param>
      <param name="binormIndex">Index that provides the usage index for the binormal data. The vertex declaration implies the usage; this index modifies it.</param>
      <param name="wrap">Value that is set to 0 to specify no wrapping, or to 1 to specify wrapping in the u and v directions.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object filled with an array of three <see cref="T:System.Int32" /> values per face to be filled with adjacent face indices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
      <summary>Computes the tangent vectors for the texture coordinates given in a texture stage.</summary>
      <param name="texStage">Index that represents the <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManager" /> in <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManagerCollection" />.</param>
      <param name="tangentIndex">Index that provides the usage index for the tangent data. The vertex declaration implies the usage; this index modifies it.</param>
      <param name="binormIndex">Index that provides the usage index for the binormal data. The vertex declaration implies the usage; this index modifies it.</param>
      <param name="wrap">Value that is set to 0 to specify no wrapping, or to 1 to specify wrapping in the u and v directions.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh. The size of this array must be at least 3 * <see cref="P:Microsoft.DirectX.Direct3D.BaseMesh.NumberFaces" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ComputeTangentFrame(Microsoft.DirectX.Direct3D.TangentOptions)">
      <summary>Performs tangent frame computations on a mesh. Tangent, binormal, and optionally normal vectors are generated. Singularities are handled as required by grouping edges and splitting vertices.</summary>
      <param name="options">Combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.TangentOptions" /> values that specify tangent frame computation options. If zero, the following options will be specified: &amp; ( GenerateInPlace | ( !( WeightByArea | WeightEqual | OrthogonalizeFromU | OrthogonalizeFromV | WrapUV | DontNormalizePartials | WindClockwise | CalculateNormals ) ).</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ConvertMeshSubsetToSingleStrip(Microsoft.DirectX.Direct3D.Mesh,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32@)">
      <summary>Converts the specified mesh subset into a single triangle strip..
	</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object that represents the mesh to convert.</param>
      <param name="attributeIdentifier">Attribute identifier of the mesh subset to convert.</param>
      <param name="indexBufferOptions">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify options for creating the single strip mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="numIndices">Number of indices in the buffer returned in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.ConvertMeshSubsetToSingleStrip(Microsoft.DirectX.Direct3D.Mesh,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32@)" />.</param>
      <returns>An object that contains the strip.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.ConvertMeshSubsetToStrips(Microsoft.DirectX.Direct3D.BaseMesh,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32@,Microsoft.DirectX.GraphicsStream@,System.Int32@)">
      <summary>Converts the specified mesh subset into a series of strips.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> class that represents the mesh to convert.</param>
      <param name="attributeIdentifier">Attribute identifier of the mesh subset to convert.</param>
      <param name="indexBufferOptions">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify options for creating the new strip mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="numIndices">Number of indices in the buffer returned in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.ConvertMeshSubsetToSingleStrip(Microsoft.DirectX.Direct3D.Mesh,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32@)" />.</param>
      <param name="stripLengths">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains one <see cref="T:System.Int32" /> value per strip, which specifies the number of triangles in that strip.</param>
      <param name="numStrips">Number of individual strips in the index buffer and the corresponding strip length array.</param>
      <returns>A class that represents the index buffer containing the strip.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh)">
      <summary>Creates a new <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> instance.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.IntPtr)">
      <summary>Creates a new <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> instance.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> instance.</summary>
      <param name="numFaces">Number of faces for the mesh. The valid range is greater than 0 and one less than the maximum <see cref="T:System.Int32" /> (typically 65534), because the last index is reserved.</param>
      <param name="numVertices">Number of vertices for the mesh. This parameter must be greater than 0.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="vertexFormat">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> enumeration that specify the format of the mesh vertices.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> instance.</summary>
      <param name="numFaces">Number of faces for the mesh. The valid range is greater than 0 and one less than the maximum <see cref="T:System.Int32" /> (typically 65534), because the last index is reserved.</param>
      <param name="numVertices">Number of vertices for the mesh. This parameter must be greater than 0.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="declaration">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing an array of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> enumeration values that specify the format of the mesh vertices.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.#ctor(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> instance.</summary>
      <param name="numFaces">Number of faces for the mesh. The valid range is greater than 0 and one less than the maximum <see cref="T:System.Int32" /> (typically 65534), because the last index is reserved.</param>
      <param name="numVertices">Number of vertices for the mesh. This parameter must be greater than 0.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="declaration">An array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> objects, that describes the vertex format for the returned mesh. This parameter must map directly to a flexible vertex format (FVF).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Cylinder(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a cylinder.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created cylinder mesh.</param>
      <param name="radius1">Radius at the negative Z end. Value should be greater than or equal to 0.0f.</param>
      <param name="radius2">Radius at the positive Z end. Value should be greater than or equal to 0.0f.</param>
      <param name="length">Length of the cylinder along the z-axis.</param>
      <param name="slices">Number of slices around the main axis.</param>
      <param name="stacks">Number of stacks along the main axis.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cylinder mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Cylinder(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Single,System.Int32,System.Int32,Microsoft.DirectX.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a cylinder.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created cylinder mesh.</param>
      <param name="radius1">Radius at the negative Z end. Value should be greater than or equal to 0.0f.</param>
      <param name="radius2">Radius at the positive Z end. Value should be greater than or equal to 0.0f.</param>
      <param name="length">Length of the cylinder along the z-axis.</param>
      <param name="slices">Number of slices around the main axis.</param>
      <param name="stacks">Number of stacks along the main axis.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cylinder mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="materials">Array that contains materials data. The array contains an array of <see cref="T:Microsoft.DirectX.Direct3D.Material" /> structures, which in turn contain information from the .x file.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="materials">Array that contains materials data. The array contains an array of <see cref="T:Microsoft.DirectX.Direct3D.Material" /> structures, which in turn contain information from the .x file.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array that contains materials data. The array contains an array of <see cref="T:Microsoft.DirectX.Direct3D.Material" /> structures, which in turn contain information from the .x file.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a .x file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array that contains materials data. The array contains an array of <see cref="T:Microsoft.DirectX.Direct3D.Material" /> structures, which in turn contain information from the .x file.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromStream(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh data.</param>
      <param name="readBytes">Size of the file in memory in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that contains the mesh data.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the loaded mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXMesh, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines whether a ray intersects with a mesh.</summary>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Determines whether a ray intersects with a mesh.</summary>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="allHits">Array of <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> structures that describe all intersections of the ray and the mesh.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Determines whether a ray intersects with a mesh.</summary>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="closestHit">An <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> object that describes the closest intersection between the array and the mesh.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Intersect(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Determines whether a ray intersects with a mesh.</summary>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="closestHit">An <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> object that describes the closest intersection between the array and the mesh.</param>
      <param name="allHits">Array of <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> structures that describe all intersections of the ray and the mesh.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Intersects the specified ray with a given mesh subset.</summary>
      <param name="attributeId">Attribute identifier of the subset to intersect with.</param>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Intersects the specified ray with a given mesh subset.</summary>
      <param name="attributeId">Attribute identifier of the subset to intersect with.</param>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="allHits">Array of <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> structures that describe all intersections of the ray and the mesh.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Intersects the specified ray with a given mesh subset.</summary>
      <param name="attributeId">Attribute identifier of the subset to intersect with.</param>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="closestHit">An <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> object that describes the closest intersection between the array and the mesh.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.IntersectSubset(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@,Microsoft.DirectX.Direct3D.IntersectInformation[]@)">
      <summary>Intersects the specified ray with a given mesh subset.</summary>
      <param name="attributeId">Attribute identifier of the subset to intersect with.</param>
      <param name="rayPos">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the origin coordinate of the ray.</param>
      <param name="rayDir">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="closestHit">An <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> object that describes the closest intersection between the array and the mesh.</param>
      <param name="allHits">Array of <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> structures that describe all intersections of the ray and the mesh.</param>
      <returns>Value that is true if the ray intersects a triangular face on the mesh; otherwise, the value is false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchy(System.IO.Stream,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.AllocateHierarchy,Microsoft.DirectX.Direct3D.LoadUserData)">
      <summary>Loads the first frame hierarchy from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh hierarchy to load.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="allocHierarchy">An <see cref="T:Microsoft.DirectX.Direct3D.AllocateHierarchy" /> object.</param>
      <param name="userDataLoader">Application-provided object that allows loading of user data. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.LoadUserData" />.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AnimationRootFrame" />. The <see cref="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.AnimationController" /> property contains an <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> that corresponds to an animation, created with default tracks and events, in the DirectX (.x) file.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchy(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.AllocateHierarchy,Microsoft.DirectX.Direct3D.LoadUserData)">
      <summary>Loads the first frame hierarchy from a <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the mesh hierarchy to load.</param>
      <param name="readBytes">Size of the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchy" /> in bytes.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" />to associate with the mesh.</param>
      <param name="allocHierarchy">An <see cref="T:Microsoft.DirectX.Direct3D.AllocateHierarchy" /> object.</param>
      <param name="userDataLoader">Application-provided object that allows loading of user data. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.LoadUserData" />.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AnimationRootFrame" />. The <see cref="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.AnimationController" /> property contains an <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> that corresponds to an animation, created with default tracks and events, in the DirectX (.x) file.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LoadHierarchyFromFile(System.String,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.AllocateHierarchy,Microsoft.DirectX.Direct3D.LoadUserData)">
      <summary>Loads the first frame hierarchy in a DirectX (.x) file.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="options">One or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the mesh.</param>
      <param name="allocHierarchy">An <see cref="T:Microsoft.DirectX.Direct3D.AllocateHierarchy" /> object. See Remarks.</param>
      <param name="userDataLoader">Application-provided object that allows loading of user data. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.LoadUserData" />.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AnimationRootFrame" />. The <see cref="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.AnimationController" /> property contains an <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> that corresponds to an animation, created with default tracks and events, in the .x file.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LockAttributeBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks an attribute buffer and obtains its memory.</summary>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.LockAttributeBufferArray(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks an attribute buffer and obtains its memory.</summary>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />.</param>
      <returns>Returns an array that contains three <see cref="T:System.Int32" /> values for each face in the mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance and generate an output mesh.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />).</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance and generate an output mesh.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />).</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <param name="adjacencyOut">[in, out] Array for the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh.</param>
      <param name="faceRemap">[in, out] Destination buffer that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[])">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance and generate an output mesh.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />).</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance and generate an output mesh.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />).</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <param name="adjacencyOut">[in, out] Array for the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh.</param>
      <param name="faceRemap">[in, out] Destination buffer that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more of the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />Optimize* flags.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[])">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more of the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />Optimize* flags.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more of the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />Optimize* flags.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <param name="adjacencyOut">[in, out] Array for the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh.</param>
      <param name="faceRemap">[in, out] Destination buffer that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the new index for each vertex.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.OptimizeInPlace(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Controls the reordering of mesh faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform; can be set to one or more of the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />Optimize* flags.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0.</param>
      <param name="adjacencyOut">[in, out] Array for the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh.</param>
      <param name="faceRemap">[in, out] Destination buffer that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the new index for each vertex.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.op_Equality(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.op_Inequality(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Polygon(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains an n-sided polygon.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created polygon mesh.</param>
      <param name="length">Length of each side.</param>
      <param name="sides">Number of sides for the polygon; must be greater than or equal to 3.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the polygon mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Polygon(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,Microsoft.DirectX.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains an n-sided polygon.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created polygon mesh.</param>
      <param name="length">Length of each side.</param>
      <param name="sides">Number of sides for the polygon; must be greater than or equal to 3.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the polygon mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Mesh.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.String,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.String,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.EffectInstance[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="effects">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, one per attribute group in the mesh. An effect instance is a particular instance of state information used to initialize an effect.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.String,System.Int32[],Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.String,System.Int32[],Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.EffectInstance[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="effects">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, one per attribute group in the mesh. An effect instance is a particular instance of state information used to initialize an effect.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.IO.Stream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> in which to save the .x file.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.IO.Stream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.EffectInstance[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> in which to save the .x file.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="effects">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, one per attribute group in the mesh. An effect instance is a particular instance of state information used to initialize an effect.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.IO.Stream,System.Int32[],Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> in which to save the .x file.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Save(System.IO.Stream,System.Int32[],Microsoft.DirectX.Direct3D.ExtendedMaterial[],Microsoft.DirectX.Direct3D.EffectInstance[],Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Saves the mesh to the specified stream object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> in which to save the .x file.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information to save in the DirectX (.x) file.</param>
      <param name="effects">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, one per attribute group in the mesh. An effect instance is a particular instance of state information used to initialize an effect.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.SaveHierarchyToFile(System.String,Microsoft.DirectX.Direct3D.XFileFormat,Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.AnimationController,Microsoft.DirectX.Direct3D.SaveUserData)">
      <summary>Creates a DirectX (.x) file and saves the mesh hierarchy and corresponding animations in it.</summary>
      <param name="filename">String that specifies the file name.</param>
      <param name="format">An <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> that indicates the format to use when saving the .x file. See Remarks.</param>
      <param name="frameRoot">Root node of the hierarchy to save. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Frame" />.</param>
      <param name="animationMixer">An <see cref="T:Microsoft.DirectX.Direct3D.AnimationController" /> whose animation sets will be stored.</param>
      <param name="saveUserData">Application-provided object that allows saving of user data. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.SaveUserData" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.SetAttributeTable(Microsoft.DirectX.Direct3D.AttributeRange[])">
      <summary>Sets a mesh's attribute table and specifies the number of entries stored in it.</summary>
      <param name="table">Array of <see cref="T:Microsoft.DirectX.Direct3D.AttributeRange" /> structures that represent the entries in the mesh attribute table.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" />.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="minValue">Number of vertices or faces, depending on the flag set in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter, by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh; can be one of the Simplify* flags in <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned simplification mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" />.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is set to 0, all vertex weights are set to 1.0.</param>
      <param name="minValue">Number of vertices or faces, depending on the flag set in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter, by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh; can be one of the Simplify* flags in <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned simplification mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" />.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="minValue">Number of vertices or faces, depending on the flag set in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter, by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh; can be one of the Simplify* flags in <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned simplification mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" />.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is set to 0, all vertex weights are set to 1.0.</param>
      <param name="minValue">Number of vertices or faces, depending on the flag set in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter, by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh; can be one of the Simplify* flags in <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned simplification mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" />.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of vertex weights. If this parameter is set to 0, all vertex weights are set to 1.0.</param>
      <param name="minValue">Number of vertices or faces, depending on the flag set in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter, by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh; can be one of the Simplify* flags in <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned simplification mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Simplify(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates a simplified mesh using the provided weights that come as close as possible to the given <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" />.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of vertex weights. If this parameter is set to 0, all vertex weights are set to 1.0.</param>
      <param name="minValue">Number of vertices or faces, depending on the flag set in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter, by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh; can be one of the Simplify* flags in <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned simplification mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Sphere(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a sphere.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created sphere mesh.</param>
      <param name="radius">Radius of the sphere. This value should be greater than or equal to 0.0f.</param>
      <param name="slices">Number of slices around the main axis.</param>
      <param name="stacks">Number of stacks along the main axis.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the sphere mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Sphere(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,System.Int32,Microsoft.DirectX.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a sphere.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created sphere mesh.</param>
      <param name="radius">Radius of the sphere. This value should be greater than or equal to 0.0f.</param>
      <param name="slices">Number of slices around the main axis.</param>
      <param name="stacks">Number of stacks along the main axis.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the sphere mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Split(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Splits a mesh into multiple meshes that are smaller than the specified size.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="maxSize">Maximum number of vertices in the resulting mesh.</param>
      <param name="options">One or more of the Option*<see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> for the new meshes.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> objects for the new meshes. For a source mesh split into n meshes, the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Split" /> value is an array of n<see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> objects.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Split(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Splits a mesh into multiple meshes that are smaller than the specified size.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be simplified.</param>
      <param name="maxSize">Maximum number of vertices in the resulting mesh.</param>
      <param name="options">One or more of the Option*<see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> for the new meshes.</param>
      <param name="adjacencyArrayOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains adjacency arrays (<see cref="T:System.Int32" /> values) for the new meshes.</param>
      <param name="faceRemapArrayOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains an array of face remap arrays (<see cref="T:System.Int32" /> values) for the new meshes.</param>
      <param name="vertRemapArrayOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains an array of vertex remap arrays for the new meshes.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> objects for the new meshes. For a source mesh split into n meshes, the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Split" /> value is an array of n<see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> objects.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Teapot(Microsoft.DirectX.Direct3D.Device)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a teapot.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created teapot mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the teapot mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Teapot(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a teapot.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the created teapot mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing an array filled with three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the teapot mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,System.Single,System.Boolean)">
      <summary>Tessellates the given mesh using the N-patchtessellation scheme.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to tessellate.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="numSegs">Number of segments per edge to tessellate.</param>
      <param name="quadraticInterpNormals">Set to true if quadratic interpolation for normals is used. Set to false if linear interpolation is used.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned tessellated mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,System.Single,System.Boolean,Microsoft.DirectX.GraphicsStream@)">
      <summary>Tessellates the given mesh using the N-patchtessellation scheme.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to tessellate.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="numSegs">Number of segments per edge to tessellate.</param>
      <param name="quadraticInterpNormals">Set to true if quadratic interpolation for normals is used. Set to false if linear interpolation is used.</param>
      <param name="adjacencyOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the output mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned tessellated mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single,System.Boolean)">
      <summary>Tessellates the given mesh using the N-patchtessellation scheme.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to tessellate.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="numSegs">Number of segments per edge to tessellate.</param>
      <param name="quadraticInterpNormals">Set to true if quadratic interpolation for normals is used. Set to false if linear interpolation is used.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned tessellated mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TessellateNPatches(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single,System.Boolean,Microsoft.DirectX.GraphicsStream@)">
      <summary>Tessellates the given mesh using the N-patchtessellation scheme.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to tessellate.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="numSegs">Number of segments per edge to tessellate.</param>
      <param name="quadraticInterpNormals">Set to true if quadratic interpolation for normals is used. Set to false if linear interpolation is used.</param>
      <param name="adjacencyOut">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the output mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the returned tessellated mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single)">
      <summary>Creates a mesh that contains the specified text, using a .NET font object.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the text mesh.</param>
      <param name="font">A <see cref="T:System.Drawing.Font" /> object that creates the mesh.</param>
      <param name="text">String that specifies the text to generate.</param>
      <param name="deviation">Maximum chordal deviation from  font outlines.</param>
      <param name="extrusion">Amount to extrude text in the negative z-direction.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cylinder mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single,Microsoft.DirectX.Direct3D.GlyphMetricsFloat[]@)">
      <summary>Creates a mesh that contains the specified text, using a .NET font object.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the text mesh.</param>
      <param name="font">A <see cref="T:System.Drawing.Font" /> object that creates the mesh.</param>
      <param name="text">String that specifies the text to generate.</param>
      <param name="deviation">Maximum chordal deviation from  font outlines.</param>
      <param name="extrusion">Amount to extrude text in the negative z-direction.</param>
      <param name="glyphMetrics">Array of <see cref="T:Microsoft.DirectX.Direct3D.GlyphMetricsFloat" /> structures that contain the glyph metric data. See Remarks. If glyph sizes are not a concern, this parameter can be omitted.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cylinder mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single,Microsoft.DirectX.GraphicsStream@)">
      <summary>Creates a mesh that contains the specified text, using a .NET font object.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the text mesh.</param>
      <param name="font">A <see cref="T:System.Drawing.Font" /> object that creates the mesh.</param>
      <param name="text">String that specifies the text to generate.</param>
      <param name="deviation">Maximum chordal deviation from  font outlines.</param>
      <param name="extrusion">Amount to extrude text in the negative z-direction.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cylinder mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.TextFromFont(Microsoft.DirectX.Direct3D.Device,System.Drawing.Font,System.String,System.Single,System.Single,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.GlyphMetricsFloat[]@)">
      <summary>Creates a mesh that contains the specified text, using a .NET font object.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the text mesh.</param>
      <param name="font">A <see cref="T:System.Drawing.Font" /> object that creates the mesh.</param>
      <param name="text">String that specifies the text to generate.</param>
      <param name="deviation">Maximum chordal deviation from  font outlines.</param>
      <param name="extrusion">Amount to extrude text in the negative z-direction.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="glyphMetrics">Array of <see cref="T:Microsoft.DirectX.Direct3D.GlyphMetricsFloat" /> structures that contain the glyph metric data. See Remarks. If glyph sizes are not a concern, this parameter can be omitted.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cylinder mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Torus(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Int32,System.Int32)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a torus.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the text mesh.</param>
      <param name="innerRadius">Inner radius of the torus; should be greater than or equal to 0.0f.</param>
      <param name="outerRadius">Outer radius of the torus; should be greater than or equal to 0.0f.</param>
      <param name="sides">Number of sides in a cross section; must be greater than or equal to 3.</param>
      <param name="rings">Number of rings in the torus; must be greater than or equal to 3.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the torus mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Torus(Microsoft.DirectX.Direct3D.Device,System.Single,System.Single,System.Int32,System.Int32,Microsoft.DirectX.GraphicsStream@)">
      <summary>Uses a left-handed coordinate system to create a mesh that contains a torus.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device associated with the text mesh.</param>
      <param name="innerRadius">Inner radius of the torus; should be greater than or equal to 0.0f.</param>
      <param name="outerRadius">Outer radius of the torus; should be greater than or equal to 0.0f.</param>
      <param name="sides">Number of sides in a cross section; must be greater than or equal to 3.</param>
      <param name="rings">Number of rings in the torus; must be greater than or equal to 3.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the torus mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.UnlockAttributeBuffer">
      <summary>Unlocks an attribute buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.UnlockAttributeBuffer(System.Int32[])">
      <summary>Unlocks an attribute buffer.</summary>
      <param name="dataAttribute">Array of pointers that represents the attribute buffer to unlock.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(System.Int32[])">
      <summary>Validates a mesh.</summary>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be tested.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(System.Int32[],System.String@)">
      <summary>Validates a mesh.</summary>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be tested.</param>
      <param name="errorsAndWarnings">Returns a buffer that contains a string of errors and warnings, which explain the problems found in the mesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(Microsoft.DirectX.GraphicsStream)">
      <summary>Validates a mesh.</summary>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be tested.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.Validate(Microsoft.DirectX.GraphicsStream,System.String@)">
      <summary>Validates a mesh.</summary>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh to be tested.</param>
      <param name="errorsAndWarnings">Returns a buffer that contains a string of errors and warnings, which explain the problems found in the mesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(Microsoft.DirectX.Direct3D.WeldEpsilonsFlags,Microsoft.DirectX.Direct3D.WeldEpsilons,System.Int32[],Microsoft.DirectX.GraphicsStream@)">
      <summary>Welds together replicated vertices that have equal attributes.</summary>
      <param name="flags">One or more flags from <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags" />.</param>
      <param name="epsilons">A <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilons" /> structure that specifies the epsilon values to use for this method.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0. If this parameter is omitted, <see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])" /> is called to create logical adjacency information.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the new index for each vertex.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(Microsoft.DirectX.Direct3D.WeldEpsilonsFlags,Microsoft.DirectX.Direct3D.WeldEpsilons,System.Int32[])">
      <summary>Welds together replicated vertices that have equal attributes.</summary>
      <param name="flags">One or more flags from <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags" />.</param>
      <param name="epsilons">A <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilons" /> structure that specifies the epsilon values to use for this method.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0. If this parameter is omitted, <see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])" /> is called to create logical adjacency information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(Microsoft.DirectX.Direct3D.WeldEpsilonsFlags,Microsoft.DirectX.Direct3D.WeldEpsilons,System.Int32[],System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Welds together replicated vertices that have equal attributes.</summary>
      <param name="flags">One or more flags from <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags" />.</param>
      <param name="epsilons">A <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilons" /> structure that specifies the epsilon values to use for this method.</param>
      <param name="adjacencyIn">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0. If this parameter is omitted, <see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])" /> is called to create logical adjacency information.</param>
      <param name="adjacencyOut">[in, out] Face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh.</param>
      <param name="faceRemap">Array that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the new index for each vertex.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(Microsoft.DirectX.Direct3D.WeldEpsilonsFlags,Microsoft.DirectX.Direct3D.WeldEpsilons,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Welds together replicated vertices that have equal attributes.</summary>
      <param name="flags">One or more flags from <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags" />.</param>
      <param name="epsilons">A <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilons" /> structure that specifies the epsilon values to use for this method.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0. If this parameter is omitted, <see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])" /> is called to create logical adjacency information.</param>
      <param name="adjacencyOut">[in, out] A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outer array is one set of face adjacencies per triangle in the mesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Mesh.WeldVertices(Microsoft.DirectX.Direct3D.WeldEpsilonsFlags,Microsoft.DirectX.Direct3D.WeldEpsilons,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Welds together replicated vertices that have equal attributes.</summary>
      <param name="flags">One or more flags from <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags" />.</param>
      <param name="epsilons">A <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilons" /> structure that specifies the epsilon values to use for this method.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0. If this parameter is omitted, <see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.GenerateAdjacency(System.Single,System.Int32[])" /> is called to create logical adjacency information.</param>
      <param name="adjacencyOut">[in, out] A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outer array is one set of face adjacencies per triangle in the mesh.</param>
      <param name="faceRemap">Array that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the new index for each vertex.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Mesh.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Mesh.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshContainer">
      <summary>Encapsulates a mesh object in a transformation frame hierarchy.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetAdjacency">
      <summary>Retrieves an array that contains the mesh adjacency information.</summary>
      <returns>Array of integers that represent the adjacency information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetAdjacencyStream">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the mesh adjacency information.</summary>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the adjacency information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetEffectInstances">
      <summary>Retrieves an array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> objects that contain the effects for the mesh.</summary>
      <returns>Returns an array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> objects.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.GetMaterials">
      <summary>Retrieves an array of mesh materials.</summary>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> objects that contain the mesh materials.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.SetAdjacency(Microsoft.DirectX.GraphicsStream)">
      <summary>Sets the mesh adjacency information.</summary>
      <param name="adj">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the adjacency information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.SetAdjacency(System.Int32[])">
      <summary>Sets the mesh adjacency information.</summary>
      <param name="adj">Array of integers that represent the adjacency information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.SetEffectInstances(Microsoft.DirectX.Direct3D.EffectInstance[])">
      <summary>Sets an array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> objects that contain the effects for the mesh.</summary>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> objects.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshContainer.SetMaterials(Microsoft.DirectX.Direct3D.ExtendedMaterial[])">
      <summary>Sets an array of mesh materials.</summary>
      <param name="mtrl">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> objects that contain the mesh materials to set.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.MeshData">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.MeshData" /> object that contains the type of data in the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.Name">
      <summary>Retrieves or sets the mesh name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.NextContainer">
      <summary>Retrieves the next mesh container.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshContainer.SkinInformation">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object that contains information about animating bones in a skin mesh.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchMesh">
      <summary>Provides patch mesh functionality.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PatchMesh.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new patch mesh with the specified vertex declaration.</summary>
      <param name="options">Mesh creation options, indicated through one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="decl">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that specify the vertex format for the vertices in the output mesh.</param>
      <returns>Cloned patch mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Creates a new patch mesh with the specified vertex declaration.</summary>
      <param name="options">Mesh creation options, indicated through one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> and <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="decl">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that specify the vertex format for the vertices in the output mesh.</param>
      <returns>Cloned patch mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.CreateNPatchMesh(Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Creates an N-patch mesh from a triangle mesh.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> triangle mesh object to convert to a patch mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh)">
      <summary>Creates a mesh from a control patch mesh.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.#ctor(System.IntPtr)">
      <summary>Creates a mesh from a control patch mesh.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.PatchInformation,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Creates a mesh from a control patch mesh.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the patch mesh.</param>
      <param name="information">Patch information structure. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.PatchInformation" />.</param>
      <param name="numberPatches">Number of patches.</param>
      <param name="numberVertices">Number of control vertices in the patch.</param>
      <param name="declaration">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that describe the vertex format for the returned mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a patch mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the file data object to load.</param>
      <param name="options">One or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> or <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object that represents the loaded patch mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads a patch mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the file data object to load.</param>
      <param name="options">One or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> or <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the mesh.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object that represents the loaded patch mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads a patch mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the file data object to load.</param>
      <param name="options">One or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> or <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object that represents the loaded patch mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads a patch mesh from an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the file data object to load.</param>
      <param name="options">One or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> that specify creation options for the mesh (excepting the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> or <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> structures that contain material information saved in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object that represents the loaded patch mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GenerateAdjacency(System.Single)">
      <summary>Generates adjacency information based on mesh indices.</summary>
      <param name="tolerance">Specifies that vertices that differ in position by less than the tolerance be treated as coincident.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXPatchMesh, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.GetTessellateSize(System.Single,System.Int32,System.Int32@,System.Int32@)">
      <summary>Retrieves the size of the tessellated mesh, given a tessellation level.</summary>
      <param name="tessLevel">Tessellation level.</param>
      <param name="adaptive">Value that specifies adaptive tessellation. For adaptive tessellation, set this parameter to -1 and set <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.GetTessellateSize(System.Single,System.Int32,System.Int32@,System.Int32@)" /> to the maximum tessellation value. This results in the maximum mesh size necessary for adaptive tessellation. To specify no tessellation, set this parameter to 0.</param>
      <param name="numTriangles">Number of triangles generated by the tessellated mesh.</param>
      <param name="numVertices">Number of vertices generated by the tessellated mesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockAttributeBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks the attribute buffer and obtains its memory.</summary>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. Valid flags for this method are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />.</param>
      <returns>Returns the locked buffer as a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockAttributeBufferArray(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks the attribute buffer and obtains its memory.</summary>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. Valid flags for this method are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />.</param>
      <returns>Returns the locked buffer in an array.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockIndexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks the index buffer.</summary>
      <param name="typeIndex">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockIndexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks the index buffer.</summary>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockVertexBuffer(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks the vertex buffer.</summary>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.LockVertexBuffer(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks the vertex buffer.</summary>
      <param name="typeVertex">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Optimize">
      <summary>Optimizes the patch mesh for efficient tessellation.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.op_Equality(Microsoft.DirectX.Direct3D.PatchMesh,Microsoft.DirectX.Direct3D.PatchMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.op_Inequality(Microsoft.DirectX.Direct3D.PatchMesh,Microsoft.DirectX.Direct3D.PatchMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.PatchMesh.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.SetIndexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Sets index buffer data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to copy into the index buffer. This can be any value type or array of value types. The <see cref="T:System.Int32" /> and <see cref="T:System.Int16" /> values are commonly used.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform when setting the data. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.SetVertexBufferData(System.Object,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Sets vertex buffer data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to copy into the vertex buffer. This can be any value type or array of value types. The <see cref="T:System.Int32" /> and <see cref="T:System.Int16" /> values are commonly used.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform when setting the data. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Tessellate(System.Single,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Performs uniform tessellation based on the tessellation level.</summary>
      <param name="tessLevel">Tessellation level. This is the number of vertices introduced between existing vertices. The range of this floating-point parameter is between 0 and 32.</param>
      <param name="mesh">Resulting tessellated mesh. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.TessellateAdaptive(Microsoft.DirectX.Vector4,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Performs adaptive tessellation based on the z-based adaptive tessellation criterion.</summary>
      <param name="trans">Specifies a 4-D vector (<see cref="T:Microsoft.DirectX.Vector4" />) that is dotted with the vertices to get the per-vertex adaptive tessellation amount. Each edge is tessellated to the average value of the tessellation levels for the two vertices it connects.</param>
      <param name="maxTessellate">Maximum limit for adaptive tessellation. This is the number of vertices introduced between existing vertices. The range of this integer value is between <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.TessellateAdaptive(Microsoft.DirectX.Vector4,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Mesh)" /> and 32.</param>
      <param name="minTessellate">Minimum limit for adaptive tessellation. This is the number of vertices introduced between existing vertices. The range of this integer value is between 1 and <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.TessellateAdaptive(Microsoft.DirectX.Vector4,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Mesh)" />.</param>
      <param name="mesh">Resulting tessellated mesh. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockAttributeBuffer">
      <summary>Unlocks the attribute buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockAttributeBuffer(System.Int32[])">
      <summary>Unlocks the attribute buffer.</summary>
      <param name="dataAttribute">Array of values that contains the attribute buffer to unlock.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockIndexBuffer">
      <summary>Unlocks the index buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UnlockVertexBuffer">
      <summary>Unlocks the vertex buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Validate">
      <summary>Validates a patch mesh.</summary>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.DegenerateItems" /> structure that contains the indexes of patches and vertices that caused validation to fail.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchMesh.Validate(System.String@)">
      <summary>Validates a patch mesh.</summary>
      <param name="errorsAndWarnings">Returns a buffer that contains a string of errors and warnings, which explain the problems found in the mesh.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.DegenerateItems" /> structure that contains the indexes of patches and vertices that caused validation to fail.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.ControlVerticesPerPatch">
      <summary>Retrieves the number of control vertices per patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Declaration">
      <summary>Retrieves the vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that created the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.DisplacementParameter">
      <summary>Retrieves or sets mesh geometry displacement parameters.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.IndexBuffer">
      <summary>Retrieves the mesh index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.NumberPatches">
      <summary>Retrieves the number of patches in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.NumberVertices">
      <summary>Retrieves the number of vertices for a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.Options">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.Direct3D.MeshOptions" /> structure that contains information about the patch mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.PatchInformation">
      <summary>Retrieves the attributes of the patch mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchMesh.VertexBuffer">
      <summary>Retrieves the mesh vertex buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ProgressiveMesh">
      <summary>Manipulates progressive mesh objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.ProgressiveMesh.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created progressive mesh.</param>
      <param name="minValue">Number of vertices or faces (depending on which flag is set in the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor" /> parameter) by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh. Either <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" /> or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" /> can be set.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created progressive mesh.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight for a given vertex, the less likely it is to be simplified out of existence.</param>
      <param name="minValue">Number of vertices or faces (depending on which flag is set in the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor" /> parameter) by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh. Either <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" /> or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" /> can be set.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created progressive mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="minValue">Number of vertices or faces (depending on which flag is set in the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor" /> parameter) by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh. Either <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" /> or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" /> can be set.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Single[],System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created progressive mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight for a given vertex, the less likely it is to be simplified out of existence.</param>
      <param name="minValue">Number of vertices or faces (depending on which flag is set in the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor" /> parameter) by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh. Either <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" /> or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" /> can be set.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created progressive mesh.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight for a given vertex, the less likely it is to be simplified out of existence.</param>
      <param name="minValue">Number of vertices or faces (depending on which flag is set in the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor" /> parameter) by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh. Either <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" /> or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" /> can be set.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the source mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created progressive mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight for a given vertex, the less likely it is to be simplified out of existence.</param>
      <param name="minValue">Number of vertices or faces (depending on which flag is set in the <see cref="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.#ctor" /> parameter) by which to simplify the source mesh.</param>
      <param name="options">Simplification options for the mesh. Either <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" /> or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" /> can be set.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXPMesh, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Generates an output mesh with reordered faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform. This parameter can be set to one or more flags from <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" />, or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" />).</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[]@,System.Int32[]@)">
      <summary>Generates an output mesh with reordered faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform. This parameter can be set to one or more flags from <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" />, or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" />).</param>
      <param name="adjacencyOut">Array for the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh. The size of this array is the maximum number of faces multiplied by 3.</param>
      <param name="faceRemap">Array that contains the new index for each face.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.Optimize(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Generates an output mesh with reordered faces and vertices to optimize performance.</summary>
      <param name="flags">Type of optimization to perform. This parameter can be set to one or more flags from <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> (except <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.Use32Bit" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.WriteOnly" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />, <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyFace" />, or <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.SimplifyVertex" />).</param>
      <param name="adjacencyOut">Array for the face adjacency array of the optimized mesh. The face adjacency is stored as an array of arrays. The innermost array is three indices of adjacent triangles, and the outermost array is one set of face adjacencies per triangle in the mesh. The size of this array is the maximum number of faces multiplied by 3.</param>
      <param name="faceRemap">Array that contains the new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the optimized mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.OptimizeBaseLevelOfDetail(Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Optimizes the base level of detail (LOD) part of a <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <param name="flags">One or more Optimize* flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify the type of optimization to perform.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.OptimizeBaseLevelOfDetail(Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[]@)">
      <summary>Optimizes the base level of detail (LOD) part of a <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <param name="flags">One or more Optimize* flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specify the type of optimization to perform.</param>
      <param name="faceRemap">Array of <see cref="T:System.Int32" /> values that indicate how the triangles were rearranged.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.op_Equality(Microsoft.DirectX.Direct3D.ProgressiveMesh,Microsoft.DirectX.Direct3D.ProgressiveMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.op_Inequality(Microsoft.DirectX.Direct3D.ProgressiveMesh,Microsoft.DirectX.Direct3D.ProgressiveMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.ProgressiveMesh.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByFaces(System.Int32,System.Int32)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <param name="newFacesMin">New minimum number of faces. This value must fall between the current minimum and maximum number of faces.</param>
      <param name="newFacesMax">New maximum number of faces. This value must fall between the current minimum and maximum number of faces.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByFaces(System.Int32,System.Int32,System.Int32[]@,System.Int32[]@)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <param name="newFacesMin">New minimum number of faces. This value must fall between the current minimum and maximum number of faces.</param>
      <param name="newFacesMax">New maximum number of faces. This value must fall between the current minimum and maximum number of faces.</param>
      <param name="faceRemap">Array of one <see cref="T:System.Int32" /> value per face that contains face remap information.</param>
      <param name="vertRemap">Array of one <see cref="T:System.Int32" /> value per vertex that contains vertex remap information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByVertices(System.Int32,System.Int32)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <param name="newVerticesMin">New minimum number of vertices. This value must fall between the current minimum and maximum number of vertices.</param>
      <param name="newVerticesMax">New maximum number of vertices. This value must fall between the current minimum and maximum number of vertices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.TrimByVertices(System.Int32,System.Int32,System.Int32[]@,System.Int32[]@)">
      <summary>Modifies the minimum and maximum level of detail (LOD) of a <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</summary>
      <param name="newVerticesMin">New minimum number of vertices. This value must fall between the current minimum and maximum number of vertices.</param>
      <param name="newVerticesMax">New maximum number of vertices. This value must fall between the current minimum and maximum number of vertices.</param>
      <param name="faceRemap">Array of one <see cref="T:System.Int32" /> value per face that contains face remap information.</param>
      <param name="vertRemap">Array of one <see cref="T:System.Int32" /> value per vertex that contains vertex remap information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ProgressiveMesh.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.Adjacency">
      <summary>Retrieves the face adjacency array of the mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MaxFaces">
      <summary>Retrieves the maximum number of faces that a progressive mesh can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MaxVertices">
      <summary>Retrieves the maximum number of vertices that a progressive mesh can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MinFaces">
      <summary>Retrieves the minimum number of faces that a progressive mesh can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.MinVertices">
      <summary>Retrieves the minimum number of vertices that a progressive mesh can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.NumberFaces(System.Int32)">
      <summary>Retrieves the currently set number of faces, or sets the current level of detail (LOD) to as close to the specified number of faces as possible.</summary>
      <param name="faces">Target number of faces. This value specifies the desired change in the LOD.</param>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.NumberVertices(System.Int32)">
      <summary>Sets the current level of detail (LOD) to as close to the specified number of vertices as possible.</summary>
      <param name="vertices">Target number of vertices. This value specifies the desired change in the LOD.</param>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ProgressiveMesh.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrtBuffer">
      <summary>Used as a data buffer to store vertex and pixel data for use with precomputed radiance transfer (PRT) methods and functions.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PrtBuffer.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.AddBuffer(Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Adds another buffer to the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> and stores the results in <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" />.</summary>
      <param name="buffer">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> that contains members to be added to the respective members of the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.AttachGutterHelper(Microsoft.DirectX.Direct3D.TextureGutterHelper)">
      <summary>Associates a <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object with the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object.</summary>
      <param name="helper">A <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object that contains texture gutter data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> class.</summary>
      <param name="filename">Name of the file from which to load the buffer data.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> class.</summary>
      <param name="width">Width of the texture, in pixels</param>
      <param name="height">Height of the texture, in pixels.</param>
      <param name="numberCoefficients">Number of coefficients per sample location. When using spherical harmonic (SH)precomputed radiance transfer (PRT), the number of coefficients should be Order2, where Order is the order of the spherical harmonic (SH) evaluation. Order must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The degree of the evaluation is Order - 1.</param>
      <param name="numberChannels">Number of color channels to set in the mesh. Set to 1 to specify gray materials (R = G = B), or 3 to enable color bleeding effects.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> class.</summary>
      <param name="numberSamples">Number of vertices (or texels) sampled.</param>
      <param name="numberCoefficients">Number of coefficients per sample location. When using spherical harmonic (SH)precomputed radiance transfer (PRT), the number of coefficients should be Order2, where Order is the order of the spherical harmonic (SH) evaluation. Order must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The degree of the evaluation is Order - 1.</param>
      <param name="numberChannels">Number of color channels to set in the mesh. Set to 1 to specify gray materials (R = G = B), or 3 to enable color bleeding effects.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.EvaluateGutterHelper">
      <summary>Applies stored texture gutter data to a <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> texture buffer.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.ExtractTexture(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Extracts coefficient data from a color channel of the buffer for a specified range of coefficients, and adds the data to a <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</summary>
      <param name="channel">Buffer color channel from which to extract texture data.</param>
      <param name="startCoefficient">Starting value of the buffer coefficient from which to extract texture data.</param>
      <param name="numberCoefficients">Number of scalars, beginning at <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.ExtractTexture(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Texture)" />, from which to extract texture data.</param>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that will store coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.ExtractToMesh(System.Int32,Microsoft.DirectX.Direct3D.DeclarationUsage,System.Int32,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Extracts coefficient data from a single-channel buffer and adds the data to a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</summary>
      <param name="numberCoefficients">Number of coefficients per sample location. When using spherical harmonic (SH)precomputed radiance transfer (PRT), the number of coefficients should be Order2, where Order is the order of the spherical harmonic (SH) evaluation. Order must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive.</param>
      <param name="usage">A <see cref="T:Microsoft.DirectX.Direct3D.DeclarationUsage" /> object that describes vertex usage of the mesh.</param>
      <param name="usageIndexStart">Starting index for coefficients to be stored in the mesh.</param>
      <param name="scene">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that will store coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.FromFile(System.String)">
      <summary>Loads into memory a precomputed radiance transfer (PRT) buffer that was saved to disk.</summary>
      <param name="filename">Name of the file from which to load the buffer data.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that contains the precomputed radiance transfer (PRT) buffer data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXPRTBuffer, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.LockBuffer(System.Int32,System.Int32)">
      <summary>Locks a range of vertex or texel sample data and returns a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing the locked buffer memory.</summary>
      <param name="start">Starting index of the sample of vertex or texel data.</param>
      <param name="numberSamples">Number of vertices (or texels) sampled.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing the locked buffer memory.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.LockBufferSingleArray(System.Int32,System.Int32)">
      <summary>Locks a range of vertex or texel sample data and returns an array containing the locked buffer memory.</summary>
      <param name="start">Starting index of the sample of vertex or texel data.</param>
      <param name="numberSamples">Number of vertices (or texels) sampled.</param>
      <returns>Returns a floating-point array containing the locked buffer memory.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.op_Equality(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.op_Inequality(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.PrtBuffer.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.ReleaseGutterHelper">
      <summary>Disassociates an attached <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object with the <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.Resize(System.Int32)">
      <summary>Changes the number of samples contained in the buffer.</summary>
      <param name="newSize">Number of samples to be contained in the buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.Save(System.String)">
      <summary>Saves a precomputed radiance transfer (PRT) buffer to disk.</summary>
      <param name="filename">Name of the file to which the buffer is to be saved.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.Save(Microsoft.DirectX.Direct3D.PrtBuffer,System.String)">
      <summary>Saves a precomputed radiance transfer (PRT) buffer to disk.</summary>
      <param name="buffer">
        <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to be saved.</param>
      <param name="filename">Name of the file to which the buffer is to be saved.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.ScaleBuffer(System.Single)">
      <summary>Multiplies every value in the buffer by a constant value.</summary>
      <param name="scaleFactor">Constant value used to scale the buffer. Every value in the buffer is replaced by the product of this value and the original buffer value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.UnlockBuffer">
      <summary>Unlocks the buffer locked by <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.LockBuffer(System.Int32,System.Int32)" /> or <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.LockBufferSingleArray(System.Int32,System.Int32)" />.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtBuffer.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.Height">
      <summary>Retrieves the height of the texture, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.IsTexture">
      <summary>Indicates whether the buffer contains a texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.NumberChannels">
      <summary>Retrieves the number of color channels used in memory to store samples.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.NumberCoefficients">
      <summary>Retrieves the number of scalars per color channel used in memory to store samples.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.NumberSamples">
      <summary>Retrieves the number of vertices (or texels) sampled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtBuffer.Width">
      <summary>Retrieves the width of the texture, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer">
      <summary>Stores a compressed version of a <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object for use with principal component analysis (PCA).</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> class.</summary>
      <param name="filename">Name of the file from which to load the buffer data.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.#ctor(Microsoft.DirectX.Direct3D.CompressionQuality,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.PercentageCompleteCallback,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> class.</summary>
      <param name="quality">Quality of spherical harmonic (SH) compression.</param>
      <param name="numberClusters">Number of clusters to use for compression.</param>
      <param name="numberPca">Number of principal component analysis (PCA) basis vectors to use in each cluster.</param>
      <param name="callback">
        <see cref="T:Microsoft.DirectX.Direct3D.PercentageCompleteCallback" /> delegate that represents the optional callback method used to compute the percentage of precomputed radiance transfer (PRT) compression computations completed.</param>
      <param name="buffer">Uncompressed <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to compress.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractBasis(System.Int32,System.Single[])">
      <summary>Extracts the mean and principal component analysis (PCA) basis vectors for a given cluster from a <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object.</summary>
      <param name="cluster">Cluster for which the basis will be extracted.</param>
      <param name="clusterBasis">An array of basis vector data for <see cref="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractBasis(System.Int32,System.Single[])" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractClusterIDs(System.Int32[])">
      <summary>Extracts the per-sample cluster identifiers (IDs) from a <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object.</summary>
      <param name="clusterIds">An integer array that will contain the cluster identifiers (IDs). The required size of the array is the value returned by <see cref="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NumberSamples" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractPca(System.Int32,System.Int32,System.Single[])">
      <summary>Extracts the per-sample principal component analysis (PCA) projection coefficients from a <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object.</summary>
      <param name="startPca">Starting index for principal component analysis (PCA) projection coefficients to extract from the buffer.</param>
      <param name="numberExtract">Number of principal component analysis (PCA) projection coefficients to extract from the buffer.</param>
      <param name="pcaCoefficients">Pointer to the location where clustered principal component analysis (CPCA) coefficients are written. The size of the data written is (Number of Samples) * (Number of PCA Coefficients).</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractTexture(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Extracts the per-sample principal component analysis (PCA) projection coefficients from a <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object and adds the data to a <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</summary>
      <param name="startPca">Starting value of the buffer coefficient from which to extract texture data.</param>
      <param name="numberPca">Number of principal component analysis (PCA) coefficients to extract from the buffer.</param>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that will store principal component analysis (PCA) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractToMesh(System.Int32,Microsoft.DirectX.Direct3D.DeclarationUsage,System.Int32,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Extracts the per-sample principal component analysis (PCA) projection coefficients from a <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object and adds the data to a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</summary>
      <param name="numberPca">Number of principal component analysis (PCA) coefficients to extract from the buffer.</param>
      <param name="usage">Vertex usage descriptions of the mesh.</param>
      <param name="usageIndexStart">Starting index for principal component analysis (PCA) coefficients to be stored in the mesh.</param>
      <param name="scene">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that will store principal component analysis (PCA) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.FromFile(System.String)">
      <summary>Loads into memory a compressed precomputed radiance transfer (PRT) buffer that was saved to disk.</summary>
      <param name="filename">Name of the file from which to load the compressed buffer data.</param>
      <returns>Returns a <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object that contains the compressed precomputed radiance transfer (PRT) buffer data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXPRTCompBuffer, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NormalizeData">
      <summary>Normalizes all principal component analysis (PCA) weights so that they are between -1 and 1. Basis vectors are modified to reflect this normalization.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.op_Equality(Microsoft.DirectX.Direct3D.PrtCompressedBuffer,Microsoft.DirectX.Direct3D.PrtCompressedBuffer)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.op_Inequality(Microsoft.DirectX.Direct3D.PrtCompressedBuffer,Microsoft.DirectX.Direct3D.PrtCompressedBuffer)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Save(System.String)">
      <summary>Saves a compressed precomputed radiance transfer (PRT) buffer to disk.</summary>
      <param name="filename">Name of the file to which the buffer is to be saved.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Save(Microsoft.DirectX.Direct3D.PrtCompressedBuffer,System.String)">
      <summary>Saves a compressed precomputed radiance transfer (PRT) buffer to disk.</summary>
      <param name="buffer">
        <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object to be saved.</param>
      <param name="filename">Name of the file to which the buffer is to be saved.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PrtCompressedBuffer" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Height">
      <summary>Retrieves the height of the texture, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.IsTexture">
      <summary>Indicates whether the compressed buffer contains a texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NumberChannels">
      <summary>Retrieves the number of color channels used in memory to store samples.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NumberClusters">
      <summary>Retrieves the number of clusters to use for compression.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NumberCoefficients">
      <summary>Retrieves the number of scalars per color channel used in memory to store samples.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NumberPcaVectors">
      <summary>Retrieves the number of principal component analysis (PCA) basis vectors to use in each cluster.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.NumberSamples">
      <summary>Retrieves the number of vertices (or texels) sampled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.Width">
      <summary>Retrieves the width of the texture, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrtEngine">
      <summary>The <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> class is used to compute a precomputed radiance transfer (PRT) simulation. Its methods are typically used offline to compute per-vertex or per-texel transfer vectors in advance of real-time 3-D modeling.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PrtEngine.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ClosestRayIntersects(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.IntersectInformation@)">
      <summary>Uses efficient ray-tracing in precomputed radiance transfer (PRT) simulations to determine whether a ray intersects a mesh. If an intersection is found, the method returns the index of the closest mesh face hit by the ray and the barycentric coordinates of the intersection point.</summary>
      <param name="rayPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the point where the ray begins.</param>
      <param name="rayDirection">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <param name="intersection">An <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> structure that represents the intersection point and the current mesh face that is first hit by the given ray, based upon stacking all blocker mesh faces in front of the current mesh.</param>
      <returns>true if the ray intersects the current mesh; false if it does not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeBounce(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes the source radiance resulting from a single bounce of interreflected light. This method can be used for any lit scene, including a spherical harmonic (SH)-based precomputed radiance transfer (PRT) model.</summary>
      <param name="bufferIn">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the 3-D object from the previous light bounce. This input buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="bufferOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models a single bounce of the interreflected light. This output buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="dataComputed">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that is the running sum of all previous <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeBounce(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)" /> outputs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeBounceAdaptive(Microsoft.DirectX.Direct3D.PrtBuffer,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes the source radiance resulting from a single bounce of interreflected light, using adaptive sampling. This method generates new vertices and faces on the mesh to more accurately approximate the precomputed radiance transfer (PRT) signal. This method can be used for any lit scene, including a spherical harmonic (SH)-based precomputed radiance transfer (PRT) model.</summary>
      <param name="bufferIn">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the 3-D object from the previous light bounce. This input buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="adaptiveThreshold">Threshold on the precomputed radiance transfer (PRT) vector to use for subdividing mesh vertices and faces. If less than 1e-6f, a default value of 1e-6f is specified.</param>
      <param name="minEdgeLength">Minimum face edge length that will be generated in adaptive sampling. If the method determines that the value is too small, a model-dependent value is specified. If zero, a default value of 4 is specified.</param>
      <param name="maxSubDiv">Maximum level of subdivision of a face that will be used in adaptive sampling.</param>
      <param name="bufferOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models a single bounce of the interreflected light. This output buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="dataComputed">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that is the running sum of all previous <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeBounceAdaptive(Microsoft.DirectX.Direct3D.PrtBuffer,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)" /> outputs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonics(System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes the direct-lighting contribution to 3-D objects where the source radiance is represented by a spherical harmonic (SH) approximation.</summary>
      <param name="shOrder">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonics(System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer)" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonics(System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models the direct lighting contribution with the spherical harmonic (SH) approximation. This buffer must have the proper number of color channels allocated for the simulation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonicsAdaptive(System.Int32,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes the direct-lighting contribution to 3-D objects where the source radiance is represented by a spherical harmonic (SH) approximation, using adaptive sampling. This method generates new vertices and faces on the mesh to more accurately approximate the precomputed radiance transfer (PRT) signal.</summary>
      <param name="shOrder">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonicsAdaptive(System.Int32,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer)" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonicsAdaptive(System.Int32,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="adaptiveThreshold">Threshold on the precomputed radiance transfer (PRT) vector to use for subdividing mesh vertices and faces. If less than 1e-6f, a default value of 1e-6f is specified.</param>
      <param name="minEdgeLength">Minimum face edge length that will be generated in adaptive sampling. If the method determines that the value is too small, a model-dependent value is specified. If zero, a default value of 4 is specified.</param>
      <param name="maxSubDiv">Maximum level of subdivision of a face that will be used in adaptive sampling.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that contains the output data. This buffer must have the proper number of color channels allocated for the simulation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonicsGpu(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GpuSimulatorOption,System.Int32,System.Single,System.Single,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Uses the graphics processing unit (GPU) to compute the direct-lighting contribution to 3-D objects where the source radiance is represented by a spherical harmonic (SH) approximation. Computing the lighting on the graphics processing unit (GPU) will generally be much faster than on the CPU.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to run the simulation on the graphics processing unit (GPU). The device must support pixel shader version 2.0 or higher.</param>
      <param name="flags">The graphics processing unit (GPU) simulation parameter that defines the resolution of the shadow z-buffer. Should be set to one of the <see cref="T:Microsoft.DirectX.Direct3D.GpuSimulatorOption" /> enumeration values. To specifiy higher precision simulation, the <see cref="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.GpuSimulatorOption.HighQuality" /> value may be combined with one of the <see cref="T:Microsoft.DirectX.Direct3D.GpuSimulatorOption" /> values.</param>
      <param name="shOrder">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonicsGpu(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GpuSimulatorOption,System.Int32,System.Single,System.Single,Microsoft.DirectX.Direct3D.PrtBuffer)" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeDirectLightingSphericalHarmonicsGpu(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GpuSimulatorOption,System.Int32,System.Single,System.Single,Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="zbias">Bias in the normal direction.</param>
      <param name="zangleBias">Bias in the normal direction, scaled by one minus the cosine of the angle with the light ray.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that contains the output data. This buffer must have the proper number of color channels allocated for the simulation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeLDPrtCoefficients(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes locally-deformable precomputed radiance transfer (LDPRT) coefficients relative to per-sample normal vectors to minimize the least-squares error with respect to input <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> data. These coefficients can be used with skinned or transformed normal vectors to model global effects on dynamic objects.</summary>
      <param name="bufferIn">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the spherical harmonic (SH)precomputed radiance transfer (PRT) data.</param>
      <param name="shOrder">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeLDPrtCoefficients(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeLDPrtCoefficients(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="normalData">A <see cref="T:Microsoft.DirectX.Vector3" /> array to be filled with shader-optimal normal vectors for which locally-deformable precomputed radiance transfer (LDPRT) coefficients are optimized. This array must be the same size as the number of samples in <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeLDPrtCoefficients(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" />.</param>
      <param name="bufferOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that contains <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeLDPrtCoefficients(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" /> zonal harmonic coefficients per color channel per sample.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSubsurfaceScattering(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes the source radiance resulting from subsurface scattering, using material properties set by <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMeshMaterials(Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial[],System.Int32,System.Boolean,System.Single)" />. This method can be used only for materials defined per-vertex in a mesh object.</summary>
      <param name="bufferIn">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the 3-D object from the previous light bounce. This input buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="bufferOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models a single bounce of the subsurface-scattered light. This output buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="dataComputed">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that is the running sum of all previous <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSubsurfaceScattering(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)" /> outputs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSubsurfaceScatteringAdaptive(Microsoft.DirectX.Direct3D.PrtBuffer,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes a transfer vector that maps source radiance to exit radiance resulting from subsurface scattering, using adaptive sampling and material properties set by <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMeshMaterials(Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial[],System.Int32,System.Boolean,System.Single)" />. The method generates new vertices and faces on the mesh to more accurately approximate the precomputed radiance transfer (PRT) signal. This method can be used only for materials defined per-vertex in a mesh object.</summary>
      <param name="bufferIn">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the 3-D object from the previous light bounce. This input buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="adaptiveThresh">Threshold on the precomputed radiance transfer (PRT) vector to use for subdividing mesh vertices and faces. If less than 1e-6f, a default value of 1e-6f is specified.</param>
      <param name="minEdgeLength">Minimum face edge length that will be generated in adaptive sampling. If the method determines that the value is too small, a model-dependent value is specified.</param>
      <param name="maxSubdiv">Maximum level of subdivision of a face that will be used in adaptive sampling. If zero, a default value of 4 is specified.</param>
      <param name="bufferOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models a single bounce of the subsurface-scattered light. This output buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="dataComputed">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that is the running sum of all previous <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSubsurfaceScatteringAdaptive(Microsoft.DirectX.Direct3D.PrtBuffer,System.Single,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)" /> outputs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSuperClusters(System.Int32[],Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32[])">
      <summary>Used with compressed results of the vertex version of the precomputed radiance transfer (PRT) simulator. Generates "superclusters," which are groups of clusters that can be drawn in the same draw call. A greedy algorithm that minimizes overdraw is used to group the clusters.</summary>
      <param name="clusterIds">An array of cluster identifiers (IDs) extracted from a compressed buffer by calling <see cref="M:Microsoft.DirectX.Direct3D.PrtCompressedBuffer.ExtractClusterIDs(System.Int32[])" />.</param>
      <param name="scene">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> that represents the composite scene passed to the simulator.</param>
      <param name="maxNumberClusters">Maximum number of clusters allocated per super cluster.</param>
      <param name="superClusterIds">An integer array that contains the index of the super cluster to which the corresponding cluster was assigned.</param>
      <returns>Number of super clusters allocated.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSurfSamplesBounce(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes precomputed radiance transfer (PRT) samples for an arbitrary point (and normal vector).</summary>
      <param name="bufferIn">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the 3-D object from the previous light bounce. This input buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="sampleLocations">Number of sample locations.</param>
      <param name="sampleNormals">Position for each sample.</param>
      <param name="bufferOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models the direct lighting contribution to the point, using the spherical harmonic (SH) approximation. This output buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="dataComputed">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that is the running sum of all previous <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSurfSamplesBounce(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)" /> outputs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSurfSamplesDirectSphericalHarmonics(System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes, at an arbitrary point not on a mesh, a transfer vector that maps source radiance (represented by a spherical harmonic (SH) approximation) to exit radiance.</summary>
      <param name="shOrder">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSurfSamplesDirectSphericalHarmonics(System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeSurfSamplesDirectSphericalHarmonics(System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="sampleLocations">Position for each sample.</param>
      <param name="sampleNormals">Normal vector for each sample location.</param>
      <param name="data">Output <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that models the direct lighting contribution to the point, using the spherical harmonic (SH) approximation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamples(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes a projection of the direct lighting from the previous light bounce into spherical harmonic (SH) basis vectors that represent incident radiance at specified locations.</summary>
      <param name="previousData">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that represents the 3-D object from the previous light bounce. This buffer must have the proper number of color channels allocated for the simulation.</param>
      <param name="shOrder">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamples(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamples(Microsoft.DirectX.Direct3D.PrtBuffer,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="sampleLocations">An integer array that contains the position for each sample.</param>
      <param name="dataOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that projects the direct lighting from the previous light bounce into spherical harmonic (SH) basis vectors. This buffer must have the proper number of color channels allocated for the simulation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamplesDirectSphericalHarmonics(System.Int32,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Computes a projection of distant lighting into spherical harmonic (SH) basis vectors that represent incident radiance at specified locations.</summary>
      <param name="shOrderIn">Order of the spherical harmonic (SH) representation of distant lighting. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamplesDirectSphericalHarmonics(System.Int32,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="shOrder">Order of the spherical harmonic (SH) representation of local lighting. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamplesDirectSphericalHarmonics(System.Int32,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" /> - 1.</param>
      <param name="sampleLocations">An integer array that contains the position for each sample.</param>
      <param name="dataOut">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that projects the distant lighting into spherical harmonic (SH) basis vectors. This buffer must have the proper number of color channels allocated for the simulation. This method generates <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamplesDirectSphericalHarmonics(System.Int32,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" />2 * <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.ComputeVolumeSamplesDirectSphericalHarmonics(System.Int32,System.Int32,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Direct3D.PrtBuffer)" />2 scalars per channel at each sample location.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ConcatenateMeshes(Microsoft.DirectX.Direct3D.Mesh[],Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Matrix[],Microsoft.DirectX.Matrix[],Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Concatenates a group of meshes into one common mesh. This method can optionally apply a matrix transformation to each input mesh and its texture coordinates.</summary>
      <param name="meshes">An array of <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> objects to concatenate. These meshes can store precomputed radiance transfer (PRT) vectors.</param>
      <param name="options">Combination of one or more flags from the <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration, specifying creation options for the output mesh. Equivalent to the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.#ctor" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.#ctor" /> constructor.</param>
      <param name="geometryTransforms">A geometry transformation <see cref="T:Microsoft.DirectX.Matrix" /> array to apply to each submesh.</param>
      <param name="textureTransforms">A texture transformation <see cref="T:Microsoft.DirectX.Matrix" /> array to apply to the (u, v) coordinates of each submesh.</param>
      <param name="declaration">An array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> objects representing the vertex declaration to use for merging mesh data.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> that is used to create the new mesh.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the concatenated meshes.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,System.Boolean,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> class.</summary>
      <param name="mesh">An input <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that models the 3-D scene. This mesh must have an attribute table in which vertices are in a unique attribute.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="extractUvs">Set to true if textures will be used to store albedos or precomputed radiance transfer (PRT) vectors; otherwise, false.</param>
      <param name="blockerMesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that blocks the 3-D scene.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ExtractPerVertexAlbedo(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.DeclarationUsage,System.Int32)">
      <summary>Copies per-vertex albedo values from a mesh.</summary>
      <param name="mesh">The <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object used to create the <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.#ctor" />.</param>
      <param name="usage">Vertex <see cref="T:Microsoft.DirectX.Direct3D.DeclarationUsage" /> descriptions to copy from the mesh.</param>
      <param name="numberChannels">Number of color channels to copy from the mesh. Set to 1 to specify gray materials (R = G = B), or 3 to enable color bleeding effects.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.FreeBounceData">
      <summary>Frees memory used for temporary bounced-light simulation data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.FreeSubsurfaceScatteringData">
      <summary>Frees memory used for temporary subsurface light scattering simulation data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetAdaptedMesh(Microsoft.DirectX.Direct3D.Device)">
      <summary>Returns a mesh with modifications resulting from adaptive spatial sampling. The returned mesh contains only positions, normals, and texture coordinates (if defined).</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to create the output mesh.</param>
      <returns>The output <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetAdaptedMesh(Microsoft.DirectX.Direct3D.Device,System.Int32[],System.Single[])">
      <summary>Returns a mesh with modifications resulting from adaptive spatial sampling. The returned mesh contains only positions, normals, and texture coordinates (if defined).</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to create the output mesh.</param>
      <param name="vertRemap">A destination array containing the three original mesh vertices that are the parents of the current vertex.</param>
      <param name="vertWeights">A destination array containing blending factors for the <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.GetAdaptedMesh" /> vertices.</param>
      <returns>The output <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetAdaptedMesh(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Returns a mesh with modifications resulting from adaptive spatial sampling. The returned mesh contains only positions, normals, and texture coordinates (if defined).</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to create the output mesh.</param>
      <param name="faceRemap">The original mesh face that was split to generate the current face.</param>
      <returns>The output <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetAdaptedMesh(Microsoft.DirectX.Direct3D.Device,System.Int32[],System.Int32[],System.Single[])">
      <summary>Returns a mesh with modifications resulting from adaptive spatial sampling. The returned mesh contains only positions, normals, and texture coordinates (if defined).</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to create the output mesh.</param>
      <param name="faceRemap">The original mesh face that was split to generate the current face.</param>
      <param name="vertRemap">A destination array containing the three original mesh vertices that are the parents of the current vertex.</param>
      <param name="vertWeights">A destination array containing blending factors for the <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.GetAdaptedMesh" /> vertices.</param>
      <returns>The output <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXPRTEngine, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.GetVertexAlbedo(System.Int32)">
      <summary>Retrieves albedo values of the mesh vertices.</summary>
      <param name="numberVerts">Number of vertices in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> array that contains albedo values of the mesh vertices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.MultiplyAlbedo(Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Multiplies each precomputed radiance transfer (PRT) vector by the per-vertex albedo.</summary>
      <param name="data">An output <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object that will contain precomputed radiance transfer (PRT) vectors multiplied by the per-vertex albedo.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.op_Equality(Microsoft.DirectX.Direct3D.PrtEngine,Microsoft.DirectX.Direct3D.PrtEngine)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.op_Inequality(Microsoft.DirectX.Direct3D.PrtEngine,Microsoft.DirectX.Direct3D.PrtEngine)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.PrtEngine.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ResampleBuffer(Microsoft.DirectX.Direct3D.PrtBuffer,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Resamples an input <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object and saves it to an output <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object. This method can be used to convert a vertex buffer to a texture buffer and vice-versa. It can also be used to convert single-channel buffers to 3-channel buffers and vice-versa.</summary>
      <param name="bufferIn">The input <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object.</param>
      <param name="bufferOut">The output <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.RobustMeshRefine(System.Single,System.Int32)">
      <summary>Subdivides faces on a mesh, allowing for conservative adaptive sampling that will not eliminate features on the mesh.</summary>
      <param name="minEdgeLength">Minimum face edge length that will be generated in adaptive sampling. If zero, a reasonable default value will be substituted.</param>
      <param name="maxSubDiv">Maximum level of subdivision of a face that will be used in adaptive sampling. If zero, a default value of 5 will be substituted.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ScaleMeshChunk(System.Int32,System.Single,Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Scales all the samples associated with a given submesh. The method is useful for computing subsurface scattering.</summary>
      <param name="meshChunk">Location in the mesh at which to start scaling samples.</param>
      <param name="scale">Value by which to multiply each vector in the submesh.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to receive rescaled samples in the submesh.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetCallback(Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single)">
      <summary>Sets a delegate to an optional callback method that computes the percentage of spherical harmonic (SH) computations completed and gives the caller the option of aborting the simulator.</summary>
      <param name="callback">A <see cref="T:Microsoft.DirectX.Direct3D.PercentageCompleteCallback" /> delegate to assign as the callback method.</param>
      <param name="frequency">Frequency of callback calls. The inverse of <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetCallback(Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single)" /> is approximately the number of times the callback method will be called.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMeshMaterials(Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial[],System.Int32,System.Boolean,System.Single)">
      <summary>Sets mesh material properties in the 3-D scene. Use this method to specify subsurface scattering parameters.</summary>
      <param name="materials">An array of <see cref="T:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial" /> structures that contain the mesh material properties to set.</param>
      <param name="numberChannels">Number of color channels to set in the mesh. Set to 1 to specify gray materials (R = G = B), or 3 to enable color bleeding effects. If you intend to change this parameter, first set the albedo using another method such as <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetPerTexelAlbedo(Microsoft.DirectX.Direct3D.Texture,System.Int32,Microsoft.DirectX.Direct3D.TextureGutterHelper)" /> or <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetPerVertexAlbedo(System.Array,System.Int32)" />.</param>
      <param name="setAlbedo">Set to true to set the albedo of the mesh to <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMeshMaterials(Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial[],System.Int32,System.Boolean,System.Single)" />, overwriting all existing texel and vertex albedo values. Set to false to preserve all existing texel and vertex albedo values set by other methods; <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMeshMaterials(Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial[],System.Int32,System.Boolean,System.Single)" /> must match the <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor" /> constructor used to create the buffer.</param>
      <param name="lengthScale">Scale of the 3-D scene relative to a 1 mm cube. Used for subsurface scattering computations.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMinMaxIntersection(System.Single,System.Single)">
      <summary>Sets the minimum and maximum distances of intersection between 3-D objects. These distance values can be used to control the minimum or maximum distance that objects can shadow or reflect light. For example, the method can be used to limit the shadowing of nearby features of a 3-D model.</summary>
      <param name="min">Minimum intersection distance. Must be positive and less than <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMinMaxIntersection(System.Single,System.Single)" />.</param>
      <param name="max">Maximum intersection distance. If 0.0f, the previous value will be used; otherwise, must be greater than <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetMinMaxIntersection(System.Single,System.Single)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetPerTexelAlbedo(Microsoft.DirectX.Direct3D.Texture,System.Int32,Microsoft.DirectX.Direct3D.TextureGutterHelper)">
      <summary>Sets an albedo value for each texel, overwriting previous albedo values.</summary>
      <param name="albedoTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object in which to store albedo values.</param>
      <param name="numberChannels">Number of color channels to set. Set to 1 to specify gray materials (R = G = B), or 3 to enable color bleeding effects.</param>
      <param name="gutterHelper">A <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object used to set gutter regions for the texture.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetPerTexelNormal(Microsoft.DirectX.Direct3D.Texture)">
      <summary>Sets a normal vector for each texel in a texture object. This method is used to store vertex normal vectors from a mesh (or interpolated vertex normals if pixel-based precomputed radiance transfer (PRT) is being computed).</summary>
      <param name="normalTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that serves as an object space normal map in which to store normal vectors. The texture must have the same dimensions as <see cref="M:Microsoft.DirectX.Direct3D.PrtBuffer.#ctor" /> and must be able to store signed texture formats.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetPerVertexAlbedo(System.Array,System.Int32)">
      <summary>Sets an albedo value for each meshvertex, overwriting previous albedo values.</summary>
      <param name="dataIn">An array of albedo data of the first sample.</param>
      <param name="numberChannel">Number of color channels to set. Set to 1 to specify gray materials (R = G = B), or 3 to enable color bleeding effects.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.SetSamplingInfo(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Single)">
      <summary>Sets sampling properties used by the precomputed radiance transfer (PRT) simulator.</summary>
      <param name="numberRays">Number of light rays to direct at each sample. Must be greater than zero.</param>
      <param name="isUsingSphere">Set to true if samples will be computed over a full sphere. Set to false if samples will be computed over a hemisphere.</param>
      <param name="isUsingCosine">Set to true to use a cosine weighting of samples. If both <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetSamplingInfo(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Single)" /> and <see cref="M:Microsoft.DirectX.Direct3D.PrtEngine.SetSamplingInfo(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Single)" /> are true, the method will fail.</param>
      <param name="isAdaptive">Must be false. Adaptive sampling is currently not implemented.</param>
      <param name="adaptiveThreshold">Ignored.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.ShadowRayIntersects(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Uses efficient ray-tracing in precomputed radiance transfer (PRT) simulations to determine whether a ray intersects a mesh. Typically used to determine whether a given point is in shadow.</summary>
      <param name="rayPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the point where the ray begins.</param>
      <param name="rayDirection">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that specifies the direction of the ray.</param>
      <returns>true if the ray intersects the current mesh, or false if it does not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtEngine.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PrtEngine" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtEngine.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtEngine.NumberFaces">
      <summary>Retrieves the number of faces in the mesh, including any new faces added as a result of adaptive spatial sampling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtEngine.NumberVertices">
      <summary>Retrieves the number of vertices in the mesh, including any new vertices added as a result of adaptive spatial sampling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtEngine.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap">
      <summary>Generalizes the process of rendering to environment maps. An environment map is used to texture-map scene geometry to provide a more sophisticated scene without using complex geometry. This class supports the creation of surfaces for the following kinds of geometry: cube, half sphere or hemispheric, parabolic, and sphere.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Lost">
      <summary>Occurs when an object is lost, normally immediately prior to a device reset.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Reset">
      <summary>Occurs after the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" />.<see cref="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.OnResetDevice" /> method is called or after the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> is reset.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginCube(Microsoft.DirectX.Direct3D.CubeTexture)">
      <summary>Initiates the rendering of a cubic environment map.</summary>
      <param name="cubeTexture">A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the cube texture to render.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginHemisphere(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Initiates the rendering of a hemisphere environment map.</summary>
      <param name="textureZPos">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the positive texture render surface.</param>
      <param name="textureZNeg">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the negative texture render surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginParabolic(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Initiates the rendering of a parabolic environment map.</summary>
      <param name="textureZPos">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the positive render texture.</param>
      <param name="textureZNeg">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the negative render texture.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.BeginSphere(Microsoft.DirectX.Direct3D.Texture)">
      <summary>Initiates the rendering of a spherical environment map.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the texture to render.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the render surface.</param>
      <param name="size">Value that represents the size of the render surface.</param>
      <param name="mipLevels">Value that represents the number of mipmap levels.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that describes the pixel format of the environment map.</param>
      <param name="depthStencil">Set to true if the render surface supports a depth-stencil surface; otherwise, false.</param>
      <param name="depthStencilFormat">If <see cref="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.#ctor" /> is true, this parameter is a member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that describes the environment map's depth-stencil format.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.End(System.Int32)">
      <summary>Ends a scene for an environmental map.</summary>
      <param name="faceMapFilter">Valid combination of <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration values.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Face(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Initiates the drawing of each face of an environment map.</summary>
      <param name="face">A <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> object that represents the first face of the environmental cube map.</param>
      <param name="faceMapFilter">Valid combination of <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration values.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXRenderToEnvMap, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.OnResetDevice">
      <summary>Should be called after a device is reset and before any other methods are called, if <see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> is set to false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.op_Equality(Microsoft.DirectX.Direct3D.RenderToEnvironmentMap,Microsoft.DirectX.Direct3D.RenderToEnvironmentMap)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.op_Inequality(Microsoft.DirectX.Direct3D.RenderToEnvironmentMap,Microsoft.DirectX.Direct3D.RenderToEnvironmentMap)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" />.<see cref="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Lost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" />.<see cref="E:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Reset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Description">
      <summary>Retrieves the description of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the environment map.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentMap.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToSurface">
      <summary>Generalizes the process of rendering to surfaces. Surfaces can be used in a variety of ways; for example, as render targets, or for off-screen rendering and rendering to textures.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToSurface.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.RenderToSurface.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToSurface.Lost">
      <summary>Occurs when an object is lost, normally immediately prior to a device reset.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.RenderToSurface.Reset">
      <summary>Occurs after the <see cref="M:Microsoft.DirectX.Direct3D.RenderToSurface.OnResetDevice" /> method is called or after the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> is reset.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.BeginScene(Microsoft.DirectX.Direct3D.Surface)">
      <summary>Begins a scene.</summary>
      <param name="surface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the render surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.BeginScene(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Viewport)">
      <summary>Begins a scene.</summary>
      <param name="surface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the render surface.</param>
      <param name="viewport">A <see cref="T:Microsoft.DirectX.Direct3D.Viewport" /> object that describes the viewport for the scene.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> to associate with the render surface.</param>
      <param name="width">Value that represents the width of the render surface, in pixels.</param>
      <param name="height">Value that represents the height of the render surface, in pixels.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that describes the pixel format of the render surface.</param>
      <param name="depthStencil">Set to true if the render surface supports a depth-stencil surface; otherwise, false.</param>
      <param name="depthStencilFormat">If <see cref="M:Microsoft.DirectX.Direct3D.RenderToSurface.#ctor" /> is set to true, this parameter is a member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that describes the depth-stencil format of the render surface.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.EndScene(Microsoft.DirectX.Direct3D.Filter)">
      <summary>Ends a scene.</summary>
      <param name="mipFilter">Valid combination of <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration values.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXRenderToSurface, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.OnResetDevice">
      <summary>Should be called after a device is reset and before any other methods are called, if <see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> is set to false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.op_Equality(Microsoft.DirectX.Direct3D.RenderToSurface,Microsoft.DirectX.Direct3D.RenderToSurface)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.op_Inequality(Microsoft.DirectX.Direct3D.RenderToSurface,Microsoft.DirectX.Direct3D.RenderToSurface)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.RenderToSurface.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" />.<see cref="E:Microsoft.DirectX.Direct3D.RenderToSurface.Lost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" />.<see cref="E:Microsoft.DirectX.Direct3D.RenderToSurface.Reset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurface.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurface" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.Description">
      <summary>Retrieves the description of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurface.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SaveUserData">
      <summary>Implemented by the application to save frame and mesh container objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddFrameChildData(Microsoft.DirectX.Direct3D.Frame,Microsoft.DirectX.Direct3D.XFileSaveObject,Microsoft.DirectX.Direct3D.XFileSaveData)">
      <summary>Adds child data to a frame.</summary>
      <param name="frame">A <see cref="T:Microsoft.DirectX.Direct3D.Frame" /> object that represents the frame hierarchy to which to add child data.</param>
      <param name="xofSave">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object.</param>
      <param name="xofFrameData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddMeshChildData(Microsoft.DirectX.Direct3D.MeshContainer,Microsoft.DirectX.Direct3D.XFileSaveObject,Microsoft.DirectX.Direct3D.XFileSaveData)">
      <summary>Adds child data to a mesh.</summary>
      <param name="meshContainer">A <see cref="T:Microsoft.DirectX.Direct3D.MeshContainer" /> object that represents the mesh container to which to add child data.</param>
      <param name="xofSave">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object.</param>
      <param name="xofFrameData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddTopLevelDataObjectsPost(Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Adds a top-level object after the frame hierarchy.</summary>
      <param name="xofSave">An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> that contains the .x file save data to add to the frame hierarchy.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.AddTopLevelDataObjectsPre(Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Adds a top-level object before the frame hierarchy.</summary>
      <param name="xofSave">An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> that contains the .x file save data to add to the frame hierarchy.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SaveUserData" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.SaveUserData" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.RegisterTemplates(Microsoft.DirectX.Direct3D.XFileManager)">
      <summary>Registers a .x file template.</summary>
      <param name="xfileApi">An <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object that contains data about the .x file template to register.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SaveUserData.SaveTemplates(Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Saves a .x file template.</summary>
      <param name="xofSave">An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object that contains data about the .x file template to save.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderLoader">
      <summary>Encapsulates the functionality for loading shader objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader(System.String,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary />
      <param name="data">String that contains the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary />
      <param name="data">String that contains the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary />
      <param name="data">String that contains the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <param name="errorMessages">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <param name="table">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object that can be used to access shader constants.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile(System.String,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary />
      <param name="file">String that specifies the file name containing the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary />
      <param name="file">String that specifies the file name containing the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile(System.String,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary />
      <param name="file">String that specifies the file name containing the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <param name="errorMessages">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <param name="table">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object that can be used to access shader constants.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary />
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary />
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,System.String,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@,Microsoft.DirectX.Direct3D.ConstantTable@)">
      <summary />
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the shader code to compile.</param>
      <param name="functionName">String that contains the name of the shader entry-point function where execution begins.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="profile">String containing the shader profile that determines the shader instruction set to use.</param>
      <param name="flags" />
      <param name="errorMessages">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <param name="table">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.ConstantTable" /> object that can be used to access shader constants.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.DisassembleShader(System.Int32[],System.Boolean,System.String)">
      <summary>Disassembles a shader.</summary>
      <param name="function">An integer array that contains the compiled shader code.</param>
      <param name="enableColorCode">Set to true to enable color code to make it easier to read the disassembly; otherwise, false.</param>
      <param name="comments">String that contains comments about the disassembly.</param>
      <returns>Returns a string containing the disassembled shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.DisassembleShader(Microsoft.DirectX.GraphicsStream,System.Boolean,System.String)">
      <summary>Disassembles a shader.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the compiled shader code.</param>
      <param name="enableColorCode">Set to true to enable color code to make it easier to read the disassembly; otherwise, false.</param>
      <param name="comments">String that contains comments about the disassembly.</param>
      <returns>Returns a string containing the disassembled shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.DisassembleShader(System.Int32,System.Boolean,System.String)">
      <summary>Disassembles a shader.</summary>
      <param name="pFunction">An integer pointer that represents the compiled shader code.</param>
      <param name="enableColorCode">Set to true to enable color code to make it easier to read the disassembly; otherwise, false.</param>
      <param name="comments">String that contains comments about the disassembly.</param>
      <returns>Returns a string containing the disassembled shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles a shader from a file.</summary>
      <param name="sourceFile">String that specifies the file name containing the shader code to assemble.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromFile(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles a shader from a file.</summary>
      <param name="sourceFile">String that specifies the file name containing the shader code to assemble.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <param name="compilationErrors">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromFile(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles a shader from a file.</summary>
      <param name="sourceFile">String that specifies the file name containing the shader code to assemble.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <param name="compilationErrors">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles a shader from a stream.</summary>
      <param name="sourceData">A <see cref="T:System.IO.Stream" /> object that contains the shader code to assemble.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles a shader from a stream.</summary>
      <param name="sourceData">A <see cref="T:System.IO.Stream" /> object that contains the shader code to assemble.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <param name="compilationErrors">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromStream(System.IO.Stream,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles a shader from a stream.</summary>
      <param name="sourceData">A <see cref="T:System.IO.Stream" /> object that contains the shader code to assemble.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <param name="compilationErrors">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags)">
      <summary>Assembles a shader from a string.</summary>
      <param name="sourceData">String that contains the shader code to assemble.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromString(System.String,Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles a shader from a string.</summary>
      <param name="sourceData">String that contains the shader code to assemble.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <param name="compilationErrors">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.FromString(System.String,Microsoft.DirectX.Direct3D.Macro[],Microsoft.DirectX.Direct3D.Include,Microsoft.DirectX.Direct3D.ShaderFlags,System.String@)">
      <summary>Assembles a shader from a string.</summary>
      <param name="sourceData">String that contains the shader code to assemble.</param>
      <param name="preprocessorDefines">Reference to a <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> object that describes the preprocessor definitions to use.</param>
      <param name="includeFile">Reference to an <see cref="T:Microsoft.DirectX.Direct3D.Include" /> object that provides access to include-file directives.</param>
      <param name="flags">Value of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that represents the shader compiler options to use.</param>
      <param name="compilationErrors">String containing a listing of errors and warnings that were encountered during compilation. These are the same messages the debugger displays in debug mode.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the assembled shader code, as well as any embedded debug and symbol table information.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetPixelShaderProfile(Microsoft.DirectX.Direct3D.Device)">
      <summary>Returns the name of the high-level shader language (HLSL) profile that is best suited to a given device.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.</param>
      <returns>String that contains the HLSL profile name.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetSamplers(System.Int32[])">
      <summary>Gets the sampler names referenced in a shader.</summary>
      <param name="function">An integer array that contains the shader function stream.</param>
      <returns>Returns a string array that contains the sampler names in the shader function stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetSamplers(Microsoft.DirectX.GraphicsStream)">
      <summary>Gets the sampler names referenced in a shader.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader function stream.</param>
      <returns>Returns a string array that contains the sampler names in the shader function stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetSamplers(System.Int32)">
      <summary>Gets the sampler names referenced in a shader.</summary>
      <param name="function">An integer pointer that represents the shader function stream.</param>
      <returns>Returns a string array that contains the sampler names in the shader function stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderInputSemantics(System.Int32[])">
      <summary>Retrieves the semantics for all shader input elements.</summary>
      <param name="function">Integer that represents a pointer to the shader function stream.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.Semantic" /> objects that represent the semantics for each input element referenced by the shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderInputSemantics(Microsoft.DirectX.GraphicsStream)">
      <summary>Retrieves the semantics for all shader input elements.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents a pointer to the shader function stream.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.Semantic" /> objects that represent the semantics for each input element referenced by the shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderOutputSemantics(System.Int32[])">
      <summary>Retrieves the semantics for all shader output elements.</summary>
      <param name="function">Integer that represents a pointer to the shader function stream.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.Semantic" /> objects that represent the semantics for each output element referenced by the shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderOutputSemantics(Microsoft.DirectX.GraphicsStream)">
      <summary>Retrieves the semantics for all shader output elements.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents a pointer to the shader function stream.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.Semantic" /> objects that represent the semantics for each output element referenced by the shader.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderSize(System.Int32[])">
      <summary>Returns the size of the shader byte code, in bytes.</summary>
      <param name="function">An integer array that contains the shader function stream.</param>
      <returns>An integer that represents the size of the shader byte code, in bytes.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderSize(Microsoft.DirectX.GraphicsStream)">
      <summary>Returns the size of the shader byte code, in bytes.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader function stream.</param>
      <returns>An integer that represents the size of the shader byte code, in bytes.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderVersion(System.Int32[])">
      <summary>Returns the version of the compiled shader.</summary>
      <param name="function">Integer that represents a pointer to the shader function stream.</param>
      <returns>A <see cref="T:System.Version" /> object that represents the shader version.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetShaderVersion(Microsoft.DirectX.GraphicsStream)">
      <summary>Returns the version of the compiled shader.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents a pointer to the shader function stream.</param>
      <returns>A <see cref="T:System.Version" /> object that represents the shader version.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderLoader.GetVertexShaderProfile(Microsoft.DirectX.Direct3D.Device)">
      <summary>Returns the name of the high-level shader language (HLSL) profile that is best suited to a given device.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.</param>
      <returns>String that contains the HLSL profile name.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SimplificationMesh">
      <summary>Manipulates simplification mesh objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SimplificationMesh.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones, or copies, a <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
      <param name="options">Mesh creation options, indicated through one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="declaration">Vertex data, defined with an array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Int32[]@)">
      <summary>Clones, or copies, a <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
      <param name="options">Mesh creation options, indicated through one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="declaration">Vertex data, defined with an array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="adjacencyOut">Array of three <see cref="T:System.Int32" /> values per face that specifies the three neighbors for each face in the source mesh.</param>
      <param name="vertexRemap">Array that contains the index for each vertex.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones, or copies, a <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
      <param name="options">Mesh creation options, indicated through one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="vertexFormat">Vertex format of the mesh, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> members.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Clone(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Int32[]@)">
      <summary>Clones, or copies, a <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
      <param name="options">Mesh creation options, indicated through one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="vertexFormat">Vertex format of the mesh, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> members.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="adjacencyOut">Array of three <see cref="T:System.Int32" /> values per face that specifies the three neighbors for each face in the source mesh.</param>
      <param name="vertexRemap">Array that contains the index for each vertex.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the cloned mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones a progressive mesh object.</summary>
      <param name="options">Mesh creation options, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="declaration">Vertex data, defined with an array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures. This parameter must map directly to a flexible vertex format (FVF).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object that represents the cloned progressive mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexElement[],Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Single[]@)">
      <summary>Clones a progressive mesh object.</summary>
      <param name="options">Mesh creation options, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="declaration">Vertex data, defined with an array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures. This parameter must map directly to a flexible vertex format (FVF).</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="vertexRemapOut">Array that contains the index for each vertex.</param>
      <param name="errorsByFace">Array that contains error values.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object that represents the cloned progressive mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device)">
      <summary>Clones a progressive mesh object.</summary>
      <param name="options">Mesh creation options, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="vertexFormat">Vertex format of the mesh, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> members.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object that represents the cloned progressive mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.CloneProgressiveMesh(Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Device,System.Int32[]@,System.Single[]@)">
      <summary>Clones a progressive mesh object.</summary>
      <param name="options">Mesh creation options, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> flags (excepting the Simplify* and Optimize* flags).</param>
      <param name="vertexFormat">Vertex format of the mesh, indicated by one or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> members.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="vertexRemapOut">Array that contains the index for each vertex.</param>
      <param name="errorsByFace">Array that contains error values.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> object that represents the cloned progressive mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],System.Single[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created simplification mesh.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created simplification mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> object that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,System.Single[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created simplification mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> object that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created simplification mesh.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains an array of <see cref="T:System.Single" /> values that represent vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[],Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created simplification mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> object that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains an array of <see cref="T:System.Single" /> values that represent vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,System.Single[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="vertexWeights">Array of vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains an array of <see cref="T:System.Single" /> values that represent vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> object that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.Direct3D.AttributeWeights,Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> containing three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the source mesh.</param>
      <param name="vertexAttributeWeights">An <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> object that contains the weight for each vertex component. If this parameter is omitted, a default structure is used. See Remarks.</param>
      <param name="vertexWeights">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains an array of <see cref="T:System.Single" /> values that represent vertex weights. If this parameter is omitted, all vertex weights are set to 1.0. Note that the higher the vertex weight is for a given vertex, the less likely it is to be simplified away.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.#ctor(Microsoft.DirectX.Direct3D.Mesh,System.Int32[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class.</summary>
      <param name="mesh">A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the mesh to simplify.</param>
      <param name="adjacency">Array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the created simplification mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXSPMesh, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.op_Equality(Microsoft.DirectX.Direct3D.SimplificationMesh,Microsoft.DirectX.Direct3D.SimplificationMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.op_Inequality(Microsoft.DirectX.Direct3D.SimplificationMesh,Microsoft.DirectX.Direct3D.SimplificationMesh)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.SimplificationMesh.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.ReduceFaces(System.Int32)">
      <summary>Reduces the number of faces in a simplification mesh.</summary>
      <param name="faces">Target number of faces by which to reduce the primitive count.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.ReduceVertices(System.Int32)">
      <summary>Reduces the number of vertices in a simplification mesh.</summary>
      <param name="vertices">Number of vertices by which to reduce the primitive count.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SimplificationMesh.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Declaration">
      <summary>Retrieves a declaration that describes the vertices in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Device">
      <summary>Retrieves the device object associated with a simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.MaxFaces">
      <summary>Retrieves the maximum number of faces that a simplification mesh can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.MaxVertices">
      <summary>Retrieves the maximum number of vertices that a simplification mesh can support.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.NumberFaces">
      <summary>Retrieves the number of faces in the simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.NumberVertices">
      <summary>Retrieves the number of vertices in the simplification mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.Options">
      <summary>Retrieves the mesh options enabled for the current simplification mesh at creation time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.VertexAttributeWeights">
      <summary>Retrieves the per-vertex attribute weights used to create a <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.VertexFormat">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> of the vertices in the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SimplificationMesh.VertexWeights">
      <summary>Retrieves the per-vertex weights used to create the <see cref="T:Microsoft.DirectX.Direct3D.SimplificationMesh" /> object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SkinInformation">
      <summary>Manipulates bone matrices, which are used to skin vertex data for animation.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SkinInformation.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.SkinInformation.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Clone">
      <summary>Clones a <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object.</summary>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object that contains the cloned object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">Array that contains the input mesh adjacency information.</param>
      <param name="maxFaceInfluence">Integer that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">Array that contains the input mesh adjacency information.</param>
      <param name="maxFaceInfluence">Integer that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <param name="adjacencyOut">Array that contains the output mesh adjacency information.</param>
      <param name="faceRemap">Array that contains a new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains a new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the input mesh adjacency information.</param>
      <param name="maxFaceInfluence">Integer that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the input mesh adjacency information.</param>
      <param name="maxFaceInfluence">Integer that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <param name="adjacencyOut">Array that contains the output mesh adjacency information.</param>
      <param name="faceRemap">Array that contains a new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains a new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToIndexedBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">Array that contains the input mesh adjacency information.</param>
      <param name="paletteSize">Value that contains the number of bone matrices available for matrix palette skinning.</param>
      <param name="maxFaceInfluence">Value that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToIndexedBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,System.Int32[],System.Int32,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">Array that contains the input mesh adjacency information.</param>
      <param name="paletteSize">Value that contains the number of bone matrices available for matrix palette skinning.</param>
      <param name="maxFaceInfluence">Value that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <param name="adjacencyOut">Array that contains the output mesh adjacency information.</param>
      <param name="faceRemap">Array that contains a new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains a new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToIndexedBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,System.Int32,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the input mesh adjacency information.</param>
      <param name="paletteSize">Value that contains the number of bone matrices available for matrix palette skinning.</param>
      <param name="maxFaceInfluence">Value that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.ConvertToIndexedBlendedMesh(Microsoft.DirectX.Direct3D.Mesh,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.GraphicsStream,System.Int32,System.Int32@,Microsoft.DirectX.Direct3D.BoneCombination[]@,System.Int32[]@,System.Int32[]@,Microsoft.DirectX.GraphicsStream@)">
      <summary>Takes an existing mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.</summary>
      <param name="mesh">Source <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies creation options for the new mesh.</param>
      <param name="adjacencyIn">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the input mesh adjacency information.</param>
      <param name="paletteSize">Value that contains the number of bone matrices available for matrix palette skinning.</param>
      <param name="maxFaceInfluence">Value that contains the maximum number of bone influences required per vertex for the current skinning method.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
      <param name="adjacencyOut">Array that contains the output mesh adjacency information.</param>
      <param name="faceRemap">Array that contains a new index for each face.</param>
      <param name="vertexRemap">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains a new index for each vertex.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object that represents the new mesh.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(Microsoft.DirectX.Direct3D.BaseMesh,System.Int32,Microsoft.DirectX.GraphicsStream)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="baseMesh">A <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object from which to create the skin mesh.</param>
      <param name="boneCombinationTableLength">Value that represents the bone combination table length.</param>
      <param name="boneCombinationTable">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the bone combinations.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(Microsoft.DirectX.Direct3D.BaseMesh,Microsoft.DirectX.Direct3D.BoneCombination[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="baseMesh">A <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" /> object from which to create the skin mesh.</param>
      <param name="boneCombinationTable">Array of <see cref="T:Microsoft.DirectX.Direct3D.BoneCombination" /> objects.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.Int32,Microsoft.DirectX.Direct3D.VertexFormats,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="numVertices">Value that represents the number of vertices in the skin mesh.</param>
      <param name="vertexFormat">A <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> object that describes the vertex format for the skin mesh.</param>
      <param name="numBones">Value that represents the number of bones for the skin mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.Int32,Microsoft.DirectX.Direct3D.VertexElement[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="numVertices">Value that represents the number of vertices in the skin mesh.</param>
      <param name="decl">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> objects that describe the vertex format for the skin mesh.</param>
      <param name="numBones">Value that represents the number of bones for the skin mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.#ctor(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class.</summary>
      <param name="numVertices">Value that represents the number of vertices in the skin mesh.</param>
      <param name="declaration">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains vertex format data for the skin mesh.</param>
      <param name="numBones">Value that represents the number of bones for the skin mesh.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetBoneInfluence(System.Int32)">
      <summary>Retrieves the vertices and weights that a bone influences.</summary>
      <param name="bone">Integer that represents the bone number.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.BoneInfluences" /> object that contains the bone influences.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetBoneName(System.Int32)">
      <summary>Retrieves the bone name from the bone index.</summary>
      <param name="bone">Value that represents the bone number of the bone name to retrieve.</param>
      <returns>String that contains the bone name.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetBoneOffsetMatrix(System.Int32)">
      <summary>Retrieves the bone offset matrix.</summary>
      <param name="bone">Value that represents the bone number of the bone offset matrix to retrieve.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> object that represents the bone offset matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetMaxFaceInfluences(Microsoft.DirectX.Direct3D.IndexBuffer,System.Int32)">
      <summary>Retrieves the maximum face influences in a triangle mesh with the specified index buffer.</summary>
      <param name="indexBuffer">An <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> object that contains the mesh index data.</param>
      <param name="numFaces">Value that represents the number of faces in the mesh.</param>
      <returns>Value that contains the maximum face influences.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetNumBoneInfluences(System.Int32)">
      <summary>Retrieves the number of influences for a bone.</summary>
      <param name="bone">Value that represents the bone number for which to retrieve the number of influences.</param>
      <returns>Value that contains the number of influences for the bone.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXSkinInfo, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.op_Equality(Microsoft.DirectX.Direct3D.SkinInformation,Microsoft.DirectX.Direct3D.SkinInformation)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.op_Inequality(Microsoft.DirectX.Direct3D.SkinInformation,Microsoft.DirectX.Direct3D.SkinInformation)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.SkinInformation.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.Remap(System.Int32[])">
      <summary>Updates bone influence information to match vertices after they are reordered.</summary>
      <param name="vertRemap">Array of integers that represent the vertices to remap.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.SetBoneInfluence(System.Int32,System.Int32,System.Int32[],System.Single[])">
      <summary>Sets the influence value for a bone.</summary>
      <param name="bone">Value that represents the bone number.</param>
      <param name="numInfluences">Value that represents the number of influences.</param>
      <param name="vertices">Array of integers that represent the vertices influenced by the bone.</param>
      <param name="weights">Array of floating-point values that represent the weights influenced by the bone.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.SetBoneName(System.Int32,System.String)">
      <summary>Sets the bone name associated with a bone number.</summary>
      <param name="bone">Value that represents the bone number.</param>
      <param name="name">String that contains the bone name.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.SetBoneOffsetMatrix(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets the bone offset matrix.</summary>
      <param name="bone">Value that represents the bone number of the bone offset matrix.</param>
      <param name="boneTransform">A <see cref="T:Microsoft.DirectX.Matrix" /> object that represents the bone offset matrix.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.UpdateSkinnedMesh(Microsoft.DirectX.Matrix[],Microsoft.DirectX.Matrix[],Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Applies software skinning to target vertices that are based on the current matrices.</summary>
      <param name="boneTransforms">Array of <see cref="T:Microsoft.DirectX.Matrix" /> objects that represent bone transforms.</param>
      <param name="boneInvTransforms">Array of <see cref="T:Microsoft.DirectX.Matrix" /> objects that represent the inverse transpose of the bone transform matrix.</param>
      <param name="sourceVertices">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the source vertices.</param>
      <param name="destinationVertices">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains destination vertices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.UpdateSkinnedMesh(Microsoft.DirectX.Matrix[],Microsoft.DirectX.Matrix[],System.Array)">
      <summary>Applies software skinning to target vertices that are based on the current matrices.</summary>
      <param name="boneTransforms">Array of <see cref="T:Microsoft.DirectX.Matrix" /> objects that represent bone transforms.</param>
      <param name="boneInvTransforms">Array of <see cref="T:Microsoft.DirectX.Matrix" /> objects that represent the inverse transpose of the bone transform matrix.</param>
      <param name="verticesSource">An <see cref="T:System.Array" /> of source vertices.</param>
      <returns>An <see cref="T:System.Array" /> of destination vertices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinInformation.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.Declaration">
      <summary>Retrieves or sets the vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.MaxVertexInfluences">
      <summary>Retrieves the maximum number of influences for any vertex in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.MinBoneInfluence">
      <summary>Retrieves or sets the minimum bone influence.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.NumberBones">
      <summary>Retrieves the number of bones in a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinInformation.VertexFormat">
      <summary>Retrieves or sets the fixed function vertex value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SkinningNotSupportedException">
      <summary>Skinning is not supported.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinningNotSupportedException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinningNotSupportedException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinningNotSupportedException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinningNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinningNotSupportedException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SphericalHarmonics">
      <summary>Encapsulates spherical harmonic (SH) mathematical functions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder">
      <summary>Retrieves the maximum order for spherical harmonic (SH) evaluation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder">
      <summary>Retrieves the minimum order for spherical harmonic (SH) evaluation.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add(System.Single[],System.Int32,System.Single[],System.Single[])">
      <summary>Adds two spherical harmonic (SH) vectors together; in other words, Out[i] = A[i] + B[i].</summary>
      <param name="output">An array of floating point values that represent the output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" /> - 1.</param>
      <param name="vectorA">An array of floating point values that represent the first spherical harmonic (SH) vector to add to the second vector.</param>
      <param name="vectorB">An array of floating point values that represent the second spherical harmonic (SH) vector to add to the first vector.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add(System.Single[],System.Int32,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Adds two spherical harmonic (SH) vectors together; in other words, Out[i] = A[i] + B[i].</summary>
      <param name="output">An array of floating point values that represent the output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" /> - 1.</param>
      <param name="vectorA">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the first spherical harmonic (SH) vector to add to the second vector.</param>
      <param name="vectorB">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the second spherical harmonic (SH) vector to add to the first vector.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add(Microsoft.DirectX.GraphicsStream,System.Int32,System.Single[],System.Single[])">
      <summary>Adds two spherical harmonic (SH) vectors together; in other words, Out[i] = A[i] + B[i].</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" /> - 1.</param>
      <param name="vectorA">An array of floating point values that represent the first spherical harmonic (SH) vector to add to the second vector.</param>
      <param name="vectorB">An array of floating point values that represent the second spherical harmonic (SH) vector to add to the first vector.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Adds two spherical harmonic (SH) vectors together; in other words, Out[i] = A[i] + B[i].</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Add" /> - 1.</param>
      <param name="vectorA">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the first spherical harmonic (SH) vector to add to the second vector.</param>
      <param name="vectorB">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the second spherical harmonic (SH) vector to add to the first vector.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Dot(System.Int32,System.Single[],System.Single[])">
      <summary>Computes the dot product of two spherical harmonic (SH) vectors.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Dot" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Dot" /> - 1.</param>
      <param name="vectorA">An array of floating point values that represent the first spherical harmonic (SH) vector.</param>
      <param name="vectorB">An array of floating point values that represent the second spherical harmonic (SH) vector.</param>
      <returns>A floating point value that represents the dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Dot(System.Int32,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Computes the dot product of two spherical harmonic (SH) vectors.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Dot" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Dot" /> - 1.</param>
      <param name="vectorA">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the first spherical harmonic (SH) vector.</param>
      <param name="vectorB">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the second spherical harmonic (SH) vector.</param>
      <returns>A floating point value that represents the dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateConeLight(System.Int32,Microsoft.DirectX.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single[],System.Single[],System.Single[])">
      <summary>Evaluates a light that is a cone of constant intensity and returns spectral spherical harmonic (SH) data.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateConeLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateConeLight" /> - 1.</param>
      <param name="direction">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="radius">Radius of the light cone in radians.</param>
      <param name="redIntensity">The red intensity of the light.</param>
      <param name="greenIntensity">The green intensity of the light.</param>
      <param name="blueIntensity">The blue intensity of the light.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateConeLight(System.Int32,Microsoft.DirectX.Vector3,System.Single,System.Single,System.Single,System.Single,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Evaluates a light that is a cone of constant intensity and returns spectral spherical harmonic (SH) data.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateConeLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateConeLight" /> - 1.</param>
      <param name="direction">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="radius">Radius of the light cone in radians.</param>
      <param name="redIntensity">The red intensity of the light.</param>
      <param name="greenIntensity">The green intensity of the light.</param>
      <param name="blueIntensity">The blue intensity of the light.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirection(System.Single[],System.Int32,Microsoft.DirectX.Vector3)">
      <summary>Evaluates the spherical harmonic (SH) basis functions from an input direction vector.</summary>
      <param name="output">spherical harmonic (SH) output coefficients. The basis function Ylm is stored at location l2 + m + l.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirection" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirection" /> - 1.</param>
      <param name="direction">(x, y, z) direction vector in which to evaluate the spherical harmonic (SH) basis functions. Must be normalized. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirection(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Vector3)">
      <summary>Evaluates the spherical harmonic (SH) basis functions from an input direction vector.</summary>
      <param name="output">spherical harmonic (SH) output coefficients. The basis function Ylm is stored at location l2 + m + l.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirection" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirection" /> - 1.</param>
      <param name="direction">(x, y, z) direction vector in which to evaluate the spherical harmonic (SH) basis functions. Must be normalized. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirectionalLight(System.Int32,Microsoft.DirectX.Vector3,System.Single,System.Single,System.Single,System.Single[],System.Single[],System.Single[])">
      <summary>Evaluates a directional light and returns spectral spherical harmonic (SH) data.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirectionalLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirectionalLight" /> - 1.</param>
      <param name="direction">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="redIntensity">The red intensity of the light.</param>
      <param name="greenIntensity">The green intensity of the light.</param>
      <param name="blueIntensity">The blue intensity of the light.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirectionalLight(System.Int32,Microsoft.DirectX.Vector3,System.Single,System.Single,System.Single,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Evaluates a directional light and returns spectral spherical harmonic (SH) data.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirectionalLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateDirectionalLight" /> - 1.</param>
      <param name="direction">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="redIntensity">The red intensity of the light.</param>
      <param name="greenIntensity">The green intensity of the light.</param>
      <param name="blueIntensity">The blue intensity of the light.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateHemisphereLight(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.Direct3D.ColorValue,System.Single[],System.Single[],System.Single[])">
      <summary>Evaluates a light that is a linear interpolation between two colors over the sphere.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateHemisphereLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateHemisphereLight" /> - 1.</param>
      <param name="direction">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="top">The sky color.</param>
      <param name="bottom">The ground color.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateHemisphereLight(System.Int32,Microsoft.DirectX.Vector3,Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.Direct3D.ColorValue,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Evaluates a light that is a linear interpolation between two colors over the sphere.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateHemisphereLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateHemisphereLight" /> - 1.</param>
      <param name="direction">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="top">The sky color.</param>
      <param name="bottom">The ground color.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateSphericalLight(System.Int32,Microsoft.DirectX.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single[],System.Single[],System.Single[])">
      <summary>Evaluates a spherical light and returns spectral spherical harmonic (SH) data.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateSphericalLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateSphericalLight" /> - 1.</param>
      <param name="position">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="radius">Radius of the spherical light source.</param>
      <param name="redIntensity">The red intensity of the light.</param>
      <param name="greenIntensity">The green intensity of the light.</param>
      <param name="blueIntensity">The blue intensity of the light.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateSphericalLight(System.Int32,Microsoft.DirectX.Vector3,System.Single,System.Single,System.Single,System.Single,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Evaluates a spherical light and returns spectral spherical harmonic (SH) data.</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateSphericalLight" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.EvaluateSphericalLight" /> - 1.</param>
      <param name="position">The (x, y, z) hemisphere axis direction vector in which to evaluate the spherical harmonic (SH) basis functions. See Remarks.</param>
      <param name="radius">Radius of the spherical light source.</param>
      <param name="redIntensity">The red intensity of the light.</param>
      <param name="greenIntensity">The green intensity of the light.</param>
      <param name="blueIntensity">The blue intensity of the light.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.ProjectCubeMap(System.Int32,Microsoft.DirectX.Direct3D.CubeTexture,System.Single[],System.Single[],System.Single[])">
      <summary>Projects a function represented on a cube map into spherical harmonics (SH).</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.ProjectCubeMap" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.ProjectCubeMap" /> - 1.</param>
      <param name="cubeMap">A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object used as the source cube map.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the red component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.ProjectCubeMap(System.Int32,Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream,Microsoft.DirectX.GraphicsStream)">
      <summary>Projects a function represented on a cube map into spherical harmonics (SH).</summary>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.ProjectCubeMap" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.ProjectCubeMap" /> - 1.</param>
      <param name="cubeMap">A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object used as the source cube map.</param>
      <param name="redOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <param name="greenOutput">Output spherical harmonic (SH) vector for the green component.</param>
      <param name="blueOutput">Output spherical harmonic (SH) vector for the blue component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate(System.Single[],System.Int32,Microsoft.DirectX.Matrix,System.Single[])">
      <summary>Rotates the spherical harmonic (SH) vector by the given matrix.</summary>
      <param name="output">An array of floating point values that represent spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" /> - 1.</param>
      <param name="rotation">The rotation <see cref="T:Microsoft.DirectX.Matrix" />. The rotation sub-matrix must be orthogonal, with a unit determinant.</param>
      <param name="input">An array of floating point values that represent rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate(System.Single[],System.Int32,Microsoft.DirectX.Matrix,Microsoft.DirectX.GraphicsStream)">
      <summary>Rotates the spherical harmonic (SH) vector by the given matrix.</summary>
      <param name="output">An array of floating point values that represent spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" /> - 1.</param>
      <param name="rotation">The rotation <see cref="T:Microsoft.DirectX.Matrix" />. The rotation sub-matrix must be orthogonal, with a unit determinant.</param>
      <param name="input">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Matrix,System.Single[])">
      <summary>Rotates the spherical harmonic (SH) vector by the given matrix.</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" /> - 1.</param>
      <param name="rotation">The rotation <see cref="T:Microsoft.DirectX.Matrix" />. The rotation sub-matrix must be orthogonal, with a unit determinant.</param>
      <param name="input">An array of floating point values that represent rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.Matrix,Microsoft.DirectX.GraphicsStream)">
      <summary>Rotates the spherical harmonic (SH) vector by the given matrix.</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Rotate" /> - 1.</param>
      <param name="rotation">The rotation <see cref="T:Microsoft.DirectX.Matrix" />. The rotation sub-matrix must be orthogonal, with a unit determinant.</param>
      <param name="input">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ(System.Single[],System.Int32,System.Single,System.Single[])">
      <summary>Rotates the spherical harmonic (SH) vector in the z-axis by the given angle.</summary>
      <param name="output">An array of floating point values that represent spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" /> - 1.</param>
      <param name="angle">Rotation angle in radians. The rotation is performed around the z-axis.</param>
      <param name="input">An array of floating point values that represent rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ(System.Single[],System.Int32,System.Single,Microsoft.DirectX.GraphicsStream)">
      <summary>Rotates the spherical harmonic (SH) vector in the z-axis by the given angle.</summary>
      <param name="output">An array of floating point values that represent spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" /> - 1.</param>
      <param name="angle">Rotation angle in radians. The rotation is performed around the z-axis.</param>
      <param name="input">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ(Microsoft.DirectX.GraphicsStream,System.Int32,System.Single,System.Single[])">
      <summary>Rotates the spherical harmonic (SH) vector in the z-axis by the given angle.</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" /> - 1.</param>
      <param name="angle">Rotation angle in radians. The rotation is performed around the z-axis.</param>
      <param name="input">An array of floating point values that represent rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ(Microsoft.DirectX.GraphicsStream,System.Int32,System.Single,Microsoft.DirectX.GraphicsStream)">
      <summary>Rotates the spherical harmonic (SH) vector in the z-axis by the given angle.</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.RotateZ" /> - 1.</param>
      <param name="angle">Rotation angle in radians. The rotation is performed around the z-axis.</param>
      <param name="input">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents rotated spherical harmonic (SH) coefficients.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale(System.Single[],System.Int32,System.Single[],System.Single)">
      <summary>Scales a spherical harmonic (SH) vector, in other words, Out[i] = A[i] * Scale.</summary>
      <param name="output">An array of floating point values that represent spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" /> - 1.</param>
      <param name="input">An array of floating point values that represents the spherical harmonic (SH) vector to scale.</param>
      <param name="scaleFactor">The scale value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale(System.Single[],System.Int32,Microsoft.DirectX.GraphicsStream,System.Single)">
      <summary>Scales a spherical harmonic (SH) vector, in other words, Out[i] = A[i] * Scale.</summary>
      <param name="output">An array of floating point values that represent spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" /> - 1.</param>
      <param name="input">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the spherical harmonic (SH) vector to scale.</param>
      <param name="scaleFactor">The scale value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale(Microsoft.DirectX.GraphicsStream,System.Int32,System.Single[],System.Single)">
      <summary>Scales a spherical harmonic (SH) vector, in other words, Out[i] = A[i] * Scale.</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" /> - 1.</param>
      <param name="input">An array of floating point values that represents the spherical harmonic (SH) vector to scale.</param>
      <param name="scaleFactor">The scale value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale(Microsoft.DirectX.GraphicsStream,System.Int32,Microsoft.DirectX.GraphicsStream,System.Single)">
      <summary>Scales a spherical harmonic (SH) vector, in other words, Out[i] = A[i] * Scale.</summary>
      <param name="output">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents spherical harmonic (SH) output coefficients.</param>
      <param name="order">Order of the spherical harmonic (SH) evaluation. Must be in the range of <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MinimumOrder" /> to <see cref="F:Microsoft.DirectX.Direct3D.SphericalHarmonics.MaximumOrder" />, inclusive. The evaluation generates <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" />2 coefficients. The degree of the evaluation is <see cref="M:Microsoft.DirectX.Direct3D.SphericalHarmonics.Scale" /> - 1.</param>
      <param name="input">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the spherical harmonic (SH) vector to scale.</param>
      <param name="scaleFactor">The scale value.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Sprite">
      <summary>Provides methods and properties that simplify the process of drawing sprites using Microsoft Direct3D.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Sprite.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Sprite.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Sprite.Lost">
      <summary>Occurs when an object is lost, normally immediately prior to a device reset.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Sprite.Reset">
      <summary>Occurs after the <see cref="M:Microsoft.DirectX.Direct3D.Sprite.OnResetDevice" /> method is called or after the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> is reset.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Begin(Microsoft.DirectX.Direct3D.SpriteFlags)">
      <summary>Prepares a device for drawing sprites.</summary>
      <param name="flags">Combination of zero or more values from the <see cref="T:Microsoft.DirectX.Direct3D.SpriteFlags" /> enumeration that describe sprite rendering options.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.#ctor(Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> class.</summary>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Drawing.Color)">
      <summary>Adds a sprite to the list of batched sprites.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the center of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="position">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the position of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> structure. The color and alpha channels are modulated by this value. The <see cref="T:System.Drawing.Color" /> value maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the center of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="position">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the position of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="color">Color value represented as an integer. The color and alpha channels are modulated by this value. A value of 16777215 maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the center of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="position">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the position of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="color">Color value represented as an integer. The color and alpha channels are modulated by this value. A value of 16777215 maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Point,System.Single,System.Drawing.Point,System.Drawing.Color)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="rotationCenter">A <see cref="T:System.Drawing.Point" /> object that represents the sprite's rotational center.</param>
      <param name="rotationAngle">A floating point value that specifies the rotation angle around the rotational center of the sprite.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> structure. The color and alpha channels are modulated by this value. The <see cref="T:System.Drawing.Color" /> value maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Point,System.Single,System.Drawing.Point,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="rotationCenter">A <see cref="T:System.Drawing.Point" /> object that represents the sprite's rotational center.</param>
      <param name="rotationAngle">A floating point value that specifies the rotation angle around the rotational center of the sprite.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">Color value represented as an integer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point,System.Single,System.Drawing.Point,System.Drawing.Color)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="destinationRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the size of the destination rectangle.</param>
      <param name="rotationCenter">A <see cref="T:System.Drawing.Point" /> object that represents the sprite's rotational center.</param>
      <param name="rotationAngle">A floating point value that specifies the rotation angle around the rotational center of the sprite.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> structure. The color and alpha channels are modulated by this value. The <see cref="T:System.Drawing.Color" /> value maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point,System.Single,System.Drawing.Point,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="destinationRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the size of the destination rectangle.</param>
      <param name="rotationCenter">A <see cref="T:System.Drawing.Point" /> object that represents the sprite's rotational center.</param>
      <param name="rotationAngle">A floating point value that specifies the rotation angle around the rotational center of the sprite.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">Color value represented as an integer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Color)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="destinationRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the size of the destination rectangle.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> structure. The color and alpha channels are modulated by this value. The <see cref="T:System.Drawing.Color" /> value maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="destinationRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the size of the destination rectangle.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">Color value represented as an integer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw2D(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point,System.Single,System.Drawing.Point,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites. Used for presentation in 2-D space.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="destinationRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the size of the destination rectangle.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the center of the sprite. A value of (0,0) indicates the upper-left corner.</param>
      <param name="rotationAngle">A floating point value that specifies the rotation angle around the rotational center of the sprite.</param>
      <param name="position">A <see cref="T:System.Drawing.Point" /> object that represents the position of the sprite in 2-D-space.</param>
      <param name="color">Color value represented as an integer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Draw(Microsoft.DirectX.Direct3D.Texture,System.Drawing.Rectangle,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Adds a sprite to the list of batched sprites.</summary>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the sprite texture.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that indicates the portion of the source texture to use for the sprite. Specify <see cref="F:System.Drawing.Rectangle.Empty" /> to use the entire source image for the sprite.</param>
      <param name="center">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the center of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="position">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the position of the sprite. A value of (0,0,0) indicates the upper-left corner.</param>
      <param name="color">Color value represented as an integer. The color and alpha channels are modulated by this value. A value of 16777215 maintains the original source color and alpha data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.End">
      <summary>Restores the device to the state it was in before <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.Begin(Microsoft.DirectX.Direct3D.SpriteFlags)" /> was called.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.Flush">
      <summary>Forces all batched sprites to be submitted to the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXSprite, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.OnLostDevice">
      <summary>Releases all references to video memory resources and deletes all state blocks.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.OnResetDevice">
      <summary>Should be called after the device is reset and before any other methods are called, if <see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> is set to false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.op_Equality(Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Direct3D.Sprite)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.op_Inequality(Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Direct3D.Sprite)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Sprite.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="E:Microsoft.DirectX.Direct3D.Sprite.Lost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="E:Microsoft.DirectX.Direct3D.Sprite.Reset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.SetWorldViewLH(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Sets the left-handed world-view transform for a sprite.  A call to this method is required before billboarding or sorting sprites.</summary>
      <param name="world">A <see cref="T:Microsoft.DirectX.Matrix" /> object that contains a world transform.</param>
      <param name="view">A <see cref="T:Microsoft.DirectX.Matrix" /> object that contains a view transform.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.SetWorldViewRH(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Sets the right-handed world-view transform for a sprite.  A call to this method is required before billboarding or sorting sprites.</summary>
      <param name="world">A <see cref="T:Microsoft.DirectX.Matrix" /> object that contains a world transform.</param>
      <param name="view">A <see cref="T:Microsoft.DirectX.Matrix" /> object that contains a view transform.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sprite.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Sprite" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sprite.Device">
      <summary>Retrieves the Microsoft Direct3D device associated with a sprite object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sprite.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sprite.Transform">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Matrix" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sprite.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SurfaceLoader">
      <summary>Loads and saves surfaces.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a file.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcFile">String that contains the source file name.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromFile" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="readBytes">Size, in bytes, of the stream data in memory.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a surface from a stream.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object that contains the source surface data.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromStream" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[ref] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that represents the source image information.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a surface from another surface with color conversion.</summary>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the destination palette entries.</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <param name="filter">One or more members of the <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> enumeration that control how the image is filtered.</param>
      <param name="colorKey">Integer value that represents the color to replace with transparent black, or 0 to disable the <see cref="M:Microsoft.DirectX.Direct3D.SurfaceLoader.FromSurface" />. This value is always a 32-bit ARGB color, regardless of the source image format. alpha is significant and should usually be set to 0xFF for opaque color keys. Thus, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile">String that contains the destination file name.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a file. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile">String that contains the destination file name.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a file. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile">String that contains the destination file name.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a file. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle)">
      <summary>Saves a surface to a file.</summary>
      <param name="destFile">String that contains the destination file name.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a file. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.SaveToStream(Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Saves a surface to a stream.</summary>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a stream. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the saved surface data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.SaveToStream(Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a surface to a stream.</summary>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a stream. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the saved surface data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.SaveToStream(Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle)">
      <summary>Saves a surface to a stream.</summary>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a stream. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the saved surface data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceLoader.SaveToStream(Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Drawing.Rectangle)">
      <summary>Saves a surface to a stream.</summary>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> object that specifies the file format to use when saving the surface to a stream. This method supports saving to all <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> types except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</param>
      <param name="srcSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface to save to a file.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> array that contains the source palette entries.</param>
      <param name="srcRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the saved surface data.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureGutterHelper">
      <summary>Used to build and manage gutter regions in a texture. Gutter regions separate textures and allow for bilinear interpolation to avoid rendering artifacts at texture boundaries.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.TextureGutterHelper.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.ApplyGutters(Microsoft.DirectX.Direct3D.PrtBuffer)">
      <summary>Applies gutters to a texture object.</summary>
      <param name="buffer">A <see cref="T:Microsoft.DirectX.Direct3D.PrtBuffer" /> object to add gutters to.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.ApplyGutters(Microsoft.DirectX.Direct3D.Texture)">
      <summary>Applies gutters to a texture object.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object to added gutters to.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.ApplyGutters(System.Single[],System.Int32,System.Int32,System.Int32)">
      <summary>Applies gutters to a texture object.</summary>
      <param name="data">A floating-point array of texture data to add gutters to.</param>
      <param name="numCoefficients">Number of scalars per color channel used in memory to store samples.</param>
      <param name="width">Width of the texture, in pixels, obtained from the <see cref="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Width" /> property.</param>
      <param name="height">Height of the texture, in pixels, obtained from the <see cref="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Height" /> property.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.ApplyGutters(Microsoft.DirectX.GraphicsStream,System.Int32,System.Int32,System.Int32)">
      <summary>Applies gutters to a texture object.</summary>
      <param name="data">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object of texture data to add gutters to.</param>
      <param name="numCoefficients">Number of scalars per color channel used in memory to store samples.</param>
      <param name="width">Width of the texture, in pixels, obtained from the <see cref="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Width" /> property.</param>
      <param name="height">Height of the texture, in pixels, obtained from the <see cref="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Height" /> property.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.#ctor(System.Int32,System.Int32,System.Single,Microsoft.DirectX.Direct3D.Mesh)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> class.</summary>
      <param name="width">Width of the texture, in pixels</param>
      <param name="height">Height of the texture, in pixels.</param>
      <param name="gutterSize">Number of texels by which to over-sample the texture and create the gutter region. Must be at least 1.</param>
      <param name="mesh">An input <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.GetBaryMap(Microsoft.DirectX.Vector2[])">
      <summary>Retrieves texel barycentric coordinates.</summary>
      <param name="baryData">An array of <see cref="T:Microsoft.DirectX.Vector2" /> objects that contain the first two barycentric coordinates of each texel.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.GetFaceMap(System.Int32[])">
      <summary>Retrieves the index of the mesh face to which each texel belongs.</summary>
      <param name="faceData">An integer array containing index values of the mesh face to which each texel belongs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.GetGutterMap(System.Byte[])">
      <summary>Receives a texel class value that indicates texel class according to each texel's location.</summary>
      <param name="gutterData">A <see cref="T:System.Byte" /> array that receives the texel class.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXTextureGutterHelper, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.GetTexelMap(Microsoft.DirectX.Vector2[])">
      <summary>Retrieves the (u, v) texture coordinates of each texel.</summary>
      <param name="texelData">An array of <see cref="T:Microsoft.DirectX.Vector2" /> objects that contain the location in pixel (u, v) texture coordinates where each texel is located.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.op_Equality(Microsoft.DirectX.Direct3D.TextureGutterHelper,Microsoft.DirectX.Direct3D.TextureGutterHelper)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.op_Inequality(Microsoft.DirectX.Direct3D.TextureGutterHelper,Microsoft.DirectX.Direct3D.TextureGutterHelper)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.TextureGutterHelper.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.SetBaryMap(Microsoft.DirectX.Vector2[])">
      <summary>Sets texel barycentric coordinates.</summary>
      <param name="baryData">An array of <see cref="T:Microsoft.DirectX.Vector2" /> objects that contain the first two barycentric coordinates of each texel.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.SetFaceMap(System.Int32[])">
      <summary>Sets the index of the mesh face to which each texel belongs.</summary>
      <param name="faceData">An integer array containing index values of the mesh face to which each texel belongs.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.SetGutterMap(System.Byte[])">
      <summary>Sets a texel class value that indicates texel class according to each texel's location.</summary>
      <param name="gutterData">A <see cref="T:System.Byte" /> array that contains texel class data, to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.SetTexelMap(Microsoft.DirectX.Vector2[])">
      <summary>Sets the (u, v) texture coordinates of each texel.</summary>
      <param name="texelData">An array of <see cref="T:Microsoft.DirectX.Vector2" /> objects that contain the location in pixel (u, v) texture coordinates where each texel is located.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureGutterHelper.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.TextureGutterHelper" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Height">
      <summary>Retrieves the height of the texture, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureGutterHelper.Width">
      <summary>Retrieves the width of the texture, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureLoader">
      <summary>Contains functions to load and save textures.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.CheckCubeTextureRequirements(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.CubeTextureRequirements@)">
      <summary>Checks creation parameters for a cube texture.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> class that represents the device to associate with the cube texture.</param>
      <param name="usage">Value that is either 0 or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
      <param name="requirements">A <see cref="T:Microsoft.DirectX.Direct3D.CubeTextureRequirements" /> structure that contains the cube texture creation parameters.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.CheckTextureRequirements(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.TextureRequirements@)">
      <summary>Checks creation parameters for a texture.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="usage">Value that is either 0 or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
      <param name="requirements">A <see cref="T:Microsoft.DirectX.Direct3D.TextureRequirements" /> structure that contains the texture creation parameters.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.CheckVolumeTextureRequirements(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.VolumeTextureRequirements@)">
      <summary>Checks creation parameters for a volume texture.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
      <param name="requirements">A <see cref="T:Microsoft.DirectX.Direct3D.VolumeTextureRequirements" /> structure that contains the volume texture creation parameters.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ComputeNormalMap(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.NormalMap,Microsoft.DirectX.Direct3D.Channel,System.Single)">
      <summary>Converts a height map into a normal map.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the destination texture.</param>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the source height-map texture.</param>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.NormalMap" /> flags that indicate creation options.</param>
      <param name="channel">A <see cref="T:Microsoft.DirectX.Direct3D.Channel" /> flag that specifies the source of the height information.</param>
      <param name="amplitude">Constant value by which the height information is multiplied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ComputeNormalMap(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.NormalMap,Microsoft.DirectX.Direct3D.Channel,System.Single)">
      <summary>Converts a height map into a normal map.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the destination texture.</param>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the source height-map texture.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the mapped normals.</param>
      <param name="flags">One or more <see cref="T:Microsoft.DirectX.Direct3D.NormalMap" /> flags that indicate creation options.</param>
      <param name="channel">A <see cref="T:Microsoft.DirectX.Direct3D.Channel" /> flag that specifies the source of the height information.</param>
      <param name="amplitude">Constant value by which the height information is multiplied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.TextureShader)">
      <summary>Uses a user-provided function or a compiled high-level shader language (HLSL) function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the filled texture.</param>
      <param name="textureShader">A <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object that contains the compiled HLSL function. This can be created using <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader" />, <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream" />, or <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.TextureShader)">
      <summary>Uses a user-provided function or a compiled high-level shader language (HLSL) function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the filled texture.</param>
      <param name="textureShader">A <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object that contains the compiled HLSL function. This can be created using <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader" />, <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream" />, or <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.TextureShader)">
      <summary>Uses a user-provided function or a compiled high-level shader language (HLSL) function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the filled texture.</param>
      <param name="textureShader">A <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object that contains the compiled HLSL function. This can be created using <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader" />, <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromStream" />, or <see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShaderFromFile" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.Fill3DTextureCallback)">
      <summary>Uses a user-provided function or a compiled high-level shader language (HLSL) function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the filled texture.</param>
      <param name="callbackFunction">User-provided <see cref="T:Microsoft.DirectX.Direct3D.Fill3DTextureCallback" /> delegate that is used to compute the value of each texel.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.Fill3DTextureCallback)">
      <summary>Uses a user-provided function or a compiled high-level shader language (HLSL) function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the filled texture.</param>
      <param name="callbackFunction">User-provided <see cref="T:Microsoft.DirectX.Direct3D.Fill3DTextureCallback" /> delegate that is used to compute the value of each texel.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Fill2DTextureCallback)">
      <summary>Uses a user-provided function or a compiled high-level shader language (HLSL) function to fill each texel of each mip level of a given texture.</summary>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the filled texture.</param>
      <param name="callbackFunction">User-provided <see cref="T:Microsoft.DirectX.Direct3D.Fill2DTextureCallback" /> delegate that is used to compute the value of each texel.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FilterTexture(Microsoft.DirectX.Direct3D.BaseTexture,System.Int32,Microsoft.DirectX.Direct3D.Filter)">
      <summary>Filters mipmap levels of a texture.</summary>
      <param name="baseTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the texture object to filter.</param>
      <param name="srcLevel">Level whose image is used to generate subsequent levels. A common value for this parameter is 0.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> values that control how the mipmap is filtered.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FilterTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.Int32,Microsoft.DirectX.Direct3D.Filter)">
      <summary>Filters mipmap levels of a texture.</summary>
      <param name="baseTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the texture object to filter.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in. For formats that are not palletized, use 0. If a palette is not specified, the default Microsoft Direct3D palette (an all-opaque white palette) is provided. See Remarks.</param>
      <param name="srcLevel">Level whose image is used to generate subsequent levels. A common value for this parameter is 0.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> values that control how the mipmap is filtered.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="size">Width and height of the cube texture, in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This value is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="size">Width and height of the cube texture, in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This value is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="size">Width and height of the cube texture, in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This value is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="size">Width and height of the cube texture, in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This value is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile(Microsoft.DirectX.Direct3D.Device,System.String)">
      <summary>Creates a cube texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="size">Width and height of the cube texture in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value is 8. If the value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface should be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. The color key is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value equals 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32)">
      <summary>Creates a cube texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the cube texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the cube texture. See Remarks.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the created cube texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="height">Height of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="height">Height of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="height">Height of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="height">Height of the texture in pixels. If this value is zero, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromFile(Microsoft.DirectX.Direct3D.Device,System.String)">
      <summary>Creates a texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32)">
      <summary>Creates a texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture. See Remarks.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeFile(Microsoft.DirectX.Direct3D.Device,System.String)">
      <summary>Creates a volume texture from a file.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool,Microsoft.DirectX.Direct3D.Filter,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <param name="width">Width in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="height">Height in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="depth">Depth in pixels. If this value is 0, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent" /> property.</param>
      <param name="mipLevels">Number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">Zero or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" />, or <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" />. Setting this flag to <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> indicates that the surface will be used as a render target. The resource can then be passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> method. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> is specified, the application should determine whether the device supports this operation by calling <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />. The <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> value indicates that the surface should be handled dynamically.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" />. Applications should check the format of the returned cube texture. If <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FromCubeFile" /> is <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" />, the format is taken from the file.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the cube texture should be placed.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="mipFilter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the mipmaps are filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">[in, out] An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains a description of the data in the source image file, or 0.</param>
      <param name="palette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.FromVolumeStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,System.Int32)">
      <summary>Creates a volume texture from a file in memory.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the volume texture.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> from which to create the texture.</param>
      <param name="readBytes">Size, in bytes, of the file in memory.</param>
      <returns>Address of a pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the created texture object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromFile(System.String)">
      <summary>Retrieves information about a given image file.</summary>
      <param name="srcFile">File name of the image whose information is being retrieved.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains the description of the data in the source file.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromStream(System.IO.Stream)">
      <summary>Retrieves information about an image file in memory.</summary>
      <param name="sourceStream">A <see cref="T:System.IO.Stream" /> object containing the image whose information is being retrieved.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains the description of the data in <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromStream" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromStream(System.IO.Stream,System.Int32)">
      <summary>Retrieves information about an image file in memory.</summary>
      <param name="sourceStream">A <see cref="T:System.IO.Stream" /> object containing the image whose information is being retrieved.</param>
      <param name="readLength">The size of the <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromStream" /> data to read.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure that contains the description of the data in <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.ImageInformationFromStream" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Saves a texture to a file.</summary>
      <param name="destFile">String that specifies the file name of the source image.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> flag that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that contains the texture to save.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a texture to a file.</summary>
      <param name="destFile">String that specifies the file name of the source image.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> flag that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that contains the texture to save.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structure that contains a 256-color palette. This parameter can be 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.SaveToStream(Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Saves a volume to a graphics stream.</summary>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> flag that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that contains the texture to save.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the source image.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureLoader.SaveToStream(Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a volume to a graphics stream.</summary>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> flag that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that contains the texture to save.</param>
      <param name="sourcePalette">A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structure that contains a 256-color palette. This parameter can be 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the source image.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureShader">
      <summary>Encapsulates the functionality of a texture shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.TextureShader.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.TextureShader.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> class.</summary>
      <param name="function">An integer array that contains the texture shader function stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.#ctor(Microsoft.DirectX.GraphicsStream)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> class.</summary>
      <param name="function">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the texture shader function stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.GetConstant(Microsoft.DirectX.Direct3D.EffectHandle,System.String)">
      <summary>Retrieves an effect constant.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the parent data structure. If the constant is a top-level parameter (there is no parent data structure), use null.</param>
      <param name="name">A string that contains the name of the constant to retrieve.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents the effect constant.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.GetConstant(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an effect constant.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the parent data structure. If the constant is a top-level parameter (there is no parent data structure), use null.</param>
      <param name="index">Zero-based index of the constant.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents the effect constant.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.GetConstantDescription(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an array of effect constants in the effect's constant table.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the effect constant.</param>
      <param name="numberConstants">Number of constants to retrieve.</param>
      <returns>Returns an array of <see cref="T:Microsoft.DirectX.Direct3D.ConstantDescription" /> objects that represent the effect constant descriptions.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.GetConstantElement(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Retrieves an effect constant element.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the array of constants.</param>
      <param name="index">Zero-based index of the element in the constant table.</param>
      <returns>Returns an <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> that represents the effect constant element.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXTextureShader, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.op_Equality(Microsoft.DirectX.Direct3D.TextureShader,Microsoft.DirectX.Direct3D.TextureShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.op_Inequality(Microsoft.DirectX.Direct3D.TextureShader,Microsoft.DirectX.Direct3D.TextureShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.TextureShader.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetDefaults">
      <summary>Sets the effect constants to the default values declared in the texture shader.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Sets an array of <see cref="T:Microsoft.DirectX.Matrix" /> objects.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="matrix">An array of <see cref="T:Microsoft.DirectX.Matrix" /> objects to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Matrix" /> object.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="matrix">A <see cref="T:Microsoft.DirectX.Matrix" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean[])">
      <summary>Sets an array of <see cref="T:System.Boolean" /> values.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="b">An array of <see cref="T:System.Boolean" /> values to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Boolean)">
      <summary>Sets a <see cref="T:System.Boolean" /> value.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="b">A <see cref="T:System.Boolean" /> value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.GraphicsStream)">
      <summary>Sets the constant table with the data in the buffer.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="data">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object the contains the texture shader constant data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Void,System.Int32)">
      <summary>Sets the constant table with the data in the buffer.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="data">A buffer containing the data to set.</param>
      <param name="dataSize">Number of bytes in the <see cref="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue" /> buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.ColorValue[])">
      <summary>Sets an array of <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> objects.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="color">An array of <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> objects to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Direct3D.ColorValue)">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="color">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4[])">
      <summary>Sets an array of <see cref="T:Microsoft.DirectX.Vector4" /> objects.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="vector">An array of <see cref="T:Microsoft.DirectX.Vector4" /> objects to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Vector4)">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Vector4" /> object.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="vector">A <see cref="T:Microsoft.DirectX.Vector4" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Single[])">
      <summary>Sets an array of <see cref="T:System.Single" /> values.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="f">An array of <see cref="T:System.Single" /> values to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Single)">
      <summary>Sets a <see cref="T:System.Single" /> value.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="f">A <see cref="T:System.Single" /> value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32[])">
      <summary>Sets an array of <see cref="T:System.Int32" /> values.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="n">An array of <see cref="T:System.Int32" /> values to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValue(Microsoft.DirectX.Direct3D.EffectHandle,System.Int32)">
      <summary>Sets a <see cref="T:System.Int32" /> value.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="n">An <see cref="T:System.Int32" /> value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValueTranspose(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix[])">
      <summary>Sets a transposed matrix.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="matrix">An array of transposed <see cref="T:Microsoft.DirectX.Matrix" /> objects to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.SetValueTranspose(Microsoft.DirectX.Direct3D.EffectHandle,Microsoft.DirectX.Matrix)">
      <summary>Sets a transposed matrix.</summary>
      <param name="constant">An <see cref="T:Microsoft.DirectX.Direct3D.EffectHandle" /> object that represents the unique identifier to a constant.</param>
      <param name="matrix">A transposed <see cref="T:Microsoft.DirectX.Matrix" /> object to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureShader.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.TextureShader" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureShader.ConstantBuffer">
      <summary>Retrieves the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureShader.Description">
      <summary>Retrieves a description of the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureShader.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureShader.Function">
      <summary>Retrieves the shader function stream.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureShader.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TooManyInfluencesException">
      <summary>Too many influences specified.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyInfluencesException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyInfluencesException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyInfluencesException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyInfluencesException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyInfluencesException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UVAtlas">
      <summary>Contains methods for creating UV texture atlases.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UVAtlas.Create(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Int32[],System.Single[],Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single)">
      <summary>Creates one or more UV texture atlases.</summary>
      <param name="mesh">Input mesh used to calculate the atlas. The atlas must have a position channel and at least a 2-D texture channel.</param>
      <param name="maxChartNumber">The maximum number of charts required for the atlas. If this is 0, the atlas will be parameterized based solely on stretch.</param>
      <param name="maxStretch">The maximum stretch resulting from the atlasing algorithm. 0 means do not stretch; 1 means any amount of stretching is allowed.</param>
      <param name="width">The width of the texture the atlas will be used on.</param>
      <param name="height">The height of the texture the atlas will be used on.</param>
      <param name="gutter">The minimum distance, in texels between two charts on the atlas. The gutter is scaled by the width. For example, if a gutter of 2.5 is used on a 512x512 texture, then the minimum distance between two charts (in texels) will be 2.5 / 512.0 in uv space.</param>
      <param name="textureIndex">Specifies which texture coordinate to write to in the output mesh (which is cloned from the input mesh). Useful if your vertex has multiple texture coordinates.</param>
      <param name="adjacency">An array with 3 Int32s per face, indicating which triangles are adjacent to each other.</param>
      <param name="imtArray">An array with 3 floating-point values per face, describing the integrated metric tensor for that face. See remarks.</param>
      <param name="callback">A callback function that can be used to monitor progress.</param>
      <param name="callbackFrequency">How often the callback specified by <see cref="" /> will be used. Use 0.0001f as a default value.</param>
      <returns>Contains data about the created texture atlases.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UVAtlas.Create(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Int32,Microsoft.DirectX.GraphicsStream,System.Single[],Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single)">
      <summary>Creates one or more UV texture atlases.</summary>
      <param name="mesh">Input mesh used to calculate the atlas. The atlas must have a position channel and at least a 2-D texture channel.</param>
      <param name="maxChartNumber">The maximum number of charts required for the atlas. If this is 0, the atlas will be parameterized based solely on stretch.</param>
      <param name="maxStretch">The maximum stretch resulting from the atlasing algorithm. 0 means do not stretch; 1 means any amount of stretching is allowed.</param>
      <param name="width">The width of the texture the atlas will be used on.</param>
      <param name="height">The height of the texture the atlas will be used on.</param>
      <param name="gutter">The minimum distance, in texels between two charts on the atlas. The gutter is scaled by the width. For example, if a gutter of 2.5 is used on a 512x512 texture, then the minimum distance between two charts (in texels) will be 2.5 / 512.0 in uv space.</param>
      <param name="textureIndex">Specifies which texture coordinate to write to in the output mesh (which is cloned from the input mesh). Useful if your vertex has multiple texture coordinates.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that indicates which triangles are adjacent to each other.</param>
      <param name="imtArray">An array with 3 floating-point values per face, describing the integrated metric tensor for that face. See remarks.</param>
      <param name="callback">A callback function that can be used to monitor progress.</param>
      <param name="callbackFrequency">How often the callback specified by <see cref="" /> will be used. Use 0.0001f as a default value.</param>
      <returns>Contains data about the created texture atlases.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UVAtlas.Pack(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32,System.Single,System.Int32,Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single,Microsoft.DirectX.GraphicsStream)">
      <summary>Packs the face partitioning data into a texture atlas.</summary>
      <param name="mesh">Input mesh used to calculate the atlas. The atlas must have a position channel and at least a 2-D texture channel.</param>
      <param name="width">The width of the texture the atlas will be used on.</param>
      <param name="height">The height of the texture the atlas will be used on.</param>
      <param name="gutter">The minimum distance, in texels between two charts on the atlas. The gutter is scaled by the width. For example, if a gutter of 2.5 is used on a 512x512 texture, then the minimum distance between two charts (in texels) will be 2.5 / 512.0 in UV space.</param>
      <param name="textureIndex">Specifies which texture coordinate to write to in the output mesh (which is cloned from the input mesh). Useful if your vertex has multiple texture coordinates.</param>
      <param name="callback">A callback function that can be used to monitor progress.</param>
      <param name="callbackFrequency">How often the callback will be called. Use 0.0001f as a default value.</param>
      <param name="facePartitioning">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that contains the final face partitioning data.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UVAtlas.Partition(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single,System.Int32,System.Int32[],System.Single[],Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single)">
      <summary>Creates one or more UV texture atlases (like <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" />.<see cref="M:Microsoft.DirectX.Direct3D.UVAtlas.Create" />), without performing the final packing step.</summary>
      <param name="mesh">Input mesh used to calculate the atlas. The atlas must have a position channel and at least a 2-D texture channel.</param>
      <param name="maxChartNumber">The maximum number of charts required for the atlas. If this is 0, the atlas will be parameterized based solely on stretch.</param>
      <param name="maxStretch">The maximum stretch resulting from the atlasing algorithm. 0 means do not stretch; 1 means any amount of stretching is allowed.</param>
      <param name="textureIndex">Specifies which texture coordinate to write to in the output mesh (which is cloned from the input mesh). Useful if your vertex has multiple texture coordinates.</param>
      <param name="adjacency">An array with 3 Int32s per face, indicating which triangles are adjacent to each other.</param>
      <param name="imtArray">An array with 3 floating-point values per face, describing the integrated metric tensor for that face. See remarks.</param>
      <param name="callback">A callback function that can be used to monitor progress.</param>
      <param name="callbackFrequency">How often the callback specified by <see cref="" /> will be used. Use 0.0001f as a default value.</param>
      <returns>Contains data about the created texture atlases.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UVAtlas.Partition(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Single,System.Int32,Microsoft.DirectX.GraphicsStream,System.Single[],Microsoft.DirectX.Direct3D.PercentageCompleteCallback,System.Single)">
      <summary>Creates one or more UV texture atlases (like <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" />.<see cref="M:Microsoft.DirectX.Direct3D.UVAtlas.Create" />), without performing the final packing step.</summary>
      <param name="mesh">Input mesh used to calculate the atlas. The atlas must have a position channel and at least a 2-D texture channel.</param>
      <param name="maxChartNumber">The maximum number of charts required for the atlas. If this is 0, the atlas will be parameterized based solely on stretch.</param>
      <param name="maxStretch">The maximum stretch resulting from the atlasing algorithm. 0 means do not stretch; 1 means any amount of stretching is allowed.</param>
      <param name="textureIndex">Specifies which texture coordinate to write to in the output mesh (which is cloned from the input mesh). Useful if your vertex has multiple texture coordinates.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that indicates which triangles are adjacent to each other.</param>
      <param name="imtArray">An array with 3 floating-point values per face, describing the integrated metric tensor for that face. See remarks.</param>
      <param name="callback">A callback function that can be used to monitor progress.</param>
      <param name="callbackFrequency">How often the callback specified by <see cref="" /> will be used. Use 0.0001f as a default value.</param>
      <returns>Contains data about the created texture atlases.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexInformation">
      <summary>Retrieves vertex information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.DeclaratorFromFormat(Microsoft.DirectX.Direct3D.VertexFormats)">
      <summary>Returns a declaration from a vertex format.</summary>
      <param name="vertexFormat">One or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that describe the vertex format from which to generate the returned declaration array.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that describe the vertex format of the mesh vertices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.FormatFromDeclarator(Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Returns a <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> structure from a declaration.</summary>
      <param name="declarator">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that describe the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> code.</param>
      <returns>Combination of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that describe the vertex format returned from the declaration.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.GenerateDeclaration(Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Generates an output vertex declaration from the input declaration.</summary>
      <param name="declarator">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that represent the input vertex declaration.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that represent the output vertex declaration.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.GetDeclarationVertexSize(Microsoft.DirectX.Direct3D.VertexElement[],System.Int32)">
      <summary>Returns the size of the vertex declaration for a flexible vertex format (FVF).</summary>
      <param name="declarator">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structures that represent the vertex shader declaration. The declaration array must end with <see cref="F:Microsoft.DirectX.Direct3D.VertexElement.VertexDeclarationEnd" /> as the last element (the size of the vertex element array will be one more than the number of actual vertex elements).</param>
      <param name="stream">Specifies the vertex data stream, in the range from 0 to the maximum number of streams -1.</param>
      <returns>The vertex declaration size, in bytes.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexInformation.GetFormatSize(Microsoft.DirectX.Direct3D.VertexFormats)">
      <summary>Returns the size of the vertex format.</summary>
      <param name="vertexFormat">Vertex format for which to return size.</param>
      <returns>An <see cref="T:System.Int32" /> value that indicates the size of the vertex format.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeLoader">
      <summary>Contains functions for loading and saving volumes.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromFile(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.String,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Loads a volume from a file.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcFile">String that specifies the file name.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="readBytes">Size of the file in memory, in bytes.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromStream(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,System.IO.Stream,Microsoft.DirectX.Direct3D.Filter,System.Int32,Microsoft.DirectX.Direct3D.ImageInformation@)">
      <summary>Creates a volume from a file in memory.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that represent a 256-color palette to fill in, or 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the source volume texture in memory.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <param name="srcInformation">An <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> structure to fill with a description of the data in the source image file, or 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the destination box. Omit this parameter to specify the entire volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the source volume. This parameter can be 0.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.FromVolume(Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.Filter,System.Int32)">
      <summary>Loads a volume from another volume.</summary>
      <param name="destVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the destination volume.</param>
      <param name="destPalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures containing a 256-color palette that represents the palette for the destination volume. This parameter can be 0.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that specifies the source volume.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <param name="filter">One or more <see cref="T:Microsoft.DirectX.Direct3D.Filter" /> flags that control how the image is filtered.</param>
      <param name="colorKey">An <see cref="T:System.Int32" /> value to replace with transparent black, or 0 to disable the color key. This is always a 32-bit ARGB color that is independent of the source image format. Alpha is significant, and usually should be set to FF for opaque color keys. For example, for opaque black, the value is equal to 0xFF000000.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile">String that specifies the file name of the source image.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that contains the image to save.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile">String that specifies the file name of the source image.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that contains the image to save.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that contain a 256-color palette. This parameter can be 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.Box)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile">String that specifies the file name of the source image.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that contains the image to save.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeLoader.Save(System.String,Microsoft.DirectX.Direct3D.ImageFileFormat,Microsoft.DirectX.Direct3D.Volume,Microsoft.DirectX.Direct3D.PaletteEntry[]@,Microsoft.DirectX.Direct3D.Box)">
      <summary>Saves a volume to a file.</summary>
      <param name="destFile">String that specifies the file name of the source image.</param>
      <param name="destFormat">An <see cref="T:Microsoft.DirectX.Direct3D.ImageFileFormat" /> that specifies the file format to use when saving. See Remarks.</param>
      <param name="srcVolume">A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that contains the image to save.</param>
      <param name="sourcePalette">Array of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures that contain a 256-color palette. This parameter can be 0.</param>
      <param name="srcBox">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the source box. Omit this parameter to specify the entire volume.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFile">
      <summary>Retrieves information about <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> file objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.XFile.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.XFile.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetChild(System.Int32)">
      <summary>Retrieves an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> child object in this <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</summary>
      <param name="index">Identifier (ID) of the child object to retrieve.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> child object retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetDataObject(System.String)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object referenced by name or by a globally unique identifier (GUID).</summary>
      <param name="dataName">Specifies the name of the data object to retrieve.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetDataObject(System.Guid)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object referenced by name or by a globally unique identifier (GUID).</summary>
      <param name="dataId">Specifies the globally unique identifier (GUID) of the data object to retrieve.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetManager">
      <summary>Returns an <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> instance for this <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</summary>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> instance for this <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFile, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.op_Equality(Microsoft.DirectX.Direct3D.XFile,Microsoft.DirectX.Direct3D.XFile)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.op_Inequality(Microsoft.DirectX.Direct3D.XFile,Microsoft.DirectX.Direct3D.XFile)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.XFile.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFile.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFile.NumberChildren">
      <summary>Retrieves the number of child objects in this file data object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFile.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileData">
      <summary>Builds or accesses the immediate hierarchy of a data object.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.XFileData.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.XFileData.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetChild(System.Int32)">
      <summary>Retrieves an <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> child object in this <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <param name="index">Identifier (ID) of the child object to retrieve.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> child object retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFileData, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetXFile">
      <summary>Retrieves an <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> instance for this <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</summary>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> instance for this <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Lock">
      <summary>Accesses the .x file data.</summary>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the locked data buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.op_Equality(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.op_Inequality(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.XFileData.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.SetData(System.Object)">
      <summary>Sets a range of data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to set into this <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Unlock">
      <summary>Ends access to the <see cref="T:Microsoft.DirectX.GraphicsStream" /> object returned by <see cref="M:Microsoft.DirectX.Direct3D.XFileData.Lock" />.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.Id">
      <summary>Retrieves the globally unique identifier (GUID) of this file data object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.IsReference">
      <summary>Indicates whether this file data object is a reference object that points to another child data object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.Name">
      <summary>Retrieves the name of this file data object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.NumberChildren">
      <summary>Retrieves the number of children in this file data object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.Type">
      <summary>Retrieves the globally unique identifier (GUID) of an object's template.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileGuid">
      <summary>Provides various globally unique identifier (GUID) values for use with XFiles (.x files).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Animation">
      <summary>Retrieves the globally unique identifier (GUID) for animation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationKey">
      <summary>Retrieves the globally unique identifier (GUID) for animation keys.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationOptions">
      <summary>Retrieves the globally unique identifier (GUID) for animation options.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationSet">
      <summary>Retrieves the globally unique identifier (GUID) for an animation set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ApplicationData">
      <summary>Retrieves the globally unique identifier (GUID) for application data. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Boolean">
      <summary>Retrieves the globally unique identifier (GUID) for simple Boolean types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Boolean2d">
      <summary>Retrieves the globally unique identifier (GUID) for a set of two Boolean values that are used in the <see cref="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFaceWraps" /> template to define the texture topology of an individual face.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Camera">
      <summary>Retrieves the globally unique identifier (GUID) for a camera. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ColorRgb">
      <summary>Retrieves the globally unique identifier (GUID) for a basic RGB color object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ColorRgba">
      <summary>Retrieves the globally unique identifier (GUID) for an RGB color object that has an alpha component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Coordinates2D">
      <summary>Retrieves the globally unique identifier (GUID) for a two-dimensional vector that is used to define a mesh's (u, v) texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ExternalVisual">
      <summary>Retrieves the globally unique identifier (GUID) for an external visual. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FloatKeys">
      <summary>Retrieves the globally unique identifier (GUID) for an array of floating-point numbers (floats) and the number of floats in the array.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Frame">
      <summary>Retrieves the globally unique identifier (GUID) for a frame.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FramePosition">
      <summary>Retrieves the globally unique identifier (GUID) for a frame position. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameRotation">
      <summary>Retrieves the globally unique identifier (GUID) for a frame rotation. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameTransformMatrix">
      <summary>Retrieves the globally unique identifier (GUID) for a frame transform matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameVelocity">
      <summary>Retrieves the globally unique identifier (GUID) for a frame velocity. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.IndexedColor">
      <summary>Retrieves the globally unique identifier (GUID) for indexed color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Info">
      <summary>Retrieves the globally unique identifier (GUID) for information. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.InlineData">
      <summary>Retrieves the globally unique identifier (GUID) for inline data. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Light">
      <summary>Retrieves the globally unique identifier (GUID) for light templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightAttenuation">
      <summary>Retrieves the globally unique identifier (GUID) for light attenuation templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightPenumbra">
      <summary>Retrieves the globally unique identifier (GUID) for light penumbra templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightRange">
      <summary>Retrieves the globally unique identifier (GUID) for light range templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightUmbra">
      <summary>Retrieves the globally unique identifier (GUID) for light umbra templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Material">
      <summary>Retrieves the globally unique identifier (GUID) for material templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialAmbientColor">
      <summary>Retrieves the globally unique identifier (GUID) for material ambient color templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialArray">
      <summary>Retrieves the globally unique identifier (GUID) for material array templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialDiffuseColor">
      <summary>Retrieves the globally unique identifier (GUID) for material diffuse color templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialEmissiveColor">
      <summary>Retrieves the globally unique identifier (GUID) for material emissive color templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialPower">
      <summary>Retrieves the globally unique identifier (GUID) for material power templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialSpecularColor">
      <summary>Retrieves the globally unique identifier (GUID) for material specular color templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialWrap">
      <summary>Retrieves the globally unique identifier (GUID) for material wrap templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Matrix4x4">
      <summary>Retrieves the globally unique identifier (GUID) for matrix 4x4 templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Mesh">
      <summary>Retrieves the globally unique identifier (GUID) for mesh templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFace">
      <summary>Retrieves the globally unique identifier (GUID) for mesh face templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFaceWraps">
      <summary>Retrieves the globally unique identifier (GUID) for mesh face wrap templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshMaterialList">
      <summary>Retrieves the globally unique identifier (GUID) for mesh material list templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshNormals">
      <summary>Retrieves the globally unique identifier (GUID) for mesh normal templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshTextureCoords">
      <summary>Retrieves the globally unique identifier (GUID) for mesh texture coordinate templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshVertexColors">
      <summary>Retrieves the globally unique identifier (GUID) for mesh vertex color templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ProgressiveMesh">
      <summary>Retrieves the globally unique identifier (GUID) for progressive mesh templates. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.PropertyBag">
      <summary>Retrieves the globally unique identifier (GUID) for property bag templates. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.RightHanded">
      <summary>Retrieves the globally unique identifier (GUID) for right-handed templates. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.RmGuid">
      <summary>Retrieves the globally unique identifier (GUID) for RMGuid templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.StringProperty">
      <summary>Retrieves the globally unique identifier (GUID) for string property templates. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TextureFilename">
      <summary>Retrieves the globally unique identifier (GUID) for texture file-name templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TextureReference">
      <summary>Retrieves the globally unique identifier (GUID) for texture reference templates. Provided for legacy applications. Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TimedFloatKeys">
      <summary>Retrieves the globally unique identifier (GUID) for timed float-key templates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Url">
      <summary>Retrieves the globally unique identifier (GUID) for URL templates. Used internally by Microsoft DirectX. Do not use.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Vector">
      <summary>Retrieves the globally unique identifier (GUID) for vector templates.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileManager">
      <summary>Manages XFile (.x) objects.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.XFileManager.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.XFileManager.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.CreateSaveObject(System.String,Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Creates a save object.</summary>
      <param name="fileName">A <see cref="T:System.String" /> instance that contains the name of the file to use for saving data.</param>
      <param name="fileFormat">Format to use when saving the XFile (.x file). This value can be one of the <see cref="T:Microsoft.DirectX.Direct3D.XFileFormat" /> enumerated vales. See Remarks.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> instance that represents the created save object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.FromFile(System.String)">
      <summary>Creates an <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object used to read a .x file.</summary>
      <param name="filename">The filename of the .x file to read.</param>
      <returns>A newly created <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object to read the .x file.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.FromStream(System.IO.Stream)">
      <summary>Creates an <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object from a data stream.</summary>
      <param name="data">A <see cref="T:System.IO.Stream" /> that contains the .x file data.</param>
      <returns>A newly created <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.FromStream(System.IO.Stream,System.Int32)">
      <summary>Creates an <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object from a data stream.</summary>
      <param name="data">A <see cref="T:System.IO.Stream" /> that contains the .x file data.</param>
      <param name="length">The length of the <see cref="M:Microsoft.DirectX.Direct3D.XFileManager.FromStream" /> stream.</param>
      <returns>A newly created <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFile, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.op_Equality(Microsoft.DirectX.Direct3D.XFileManager,Microsoft.DirectX.Direct3D.XFileManager)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.op_Inequality(Microsoft.DirectX.Direct3D.XFileManager,Microsoft.DirectX.Direct3D.XFileManager)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.XFileManager.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterDefaultTemplates">
      <summary>Registers default templates.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterTemplates(System.Byte[])">
      <summary>Registers custom templates.</summary>
      <param name="data">Array of <see cref="T:System.Byte" /> values that contain the templates.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterXFileTemplates(Microsoft.DirectX.Direct3D.XFile)">
      <summary>Registers custom templates from an <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object.</summary>
      <param name="xfileObj">An <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> object that contains the templates to register.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileManager.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileManager.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileSaveData">
      <summary>Applications use the methods of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> class to add data objects as children of a .x file data node.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.XFileSaveData.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.XFileSaveData.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.AddDataObject(System.Guid,System.String,System.Guid,System.Byte[])">
      <summary>Adds a data object as a child of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> file data node.</summary>
      <param name="guidTemplate">The globally unique identifier (GUID) representing the data object's template.</param>
      <param name="name">The name of the data object to add.</param>
      <param name="guidData">A globally unique identifier (GUID) representing the data object. The data object must have been registered with <see cref="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterTemplates(System.Byte[])" /> or <see cref="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterXFileTemplates(Microsoft.DirectX.Direct3D.XFile)" />. Specify null if the object does not have a globally unique identifier (GUID).</param>
      <param name="data">A <see cref="T:System.Byte" /> array representing the buffer containing all required data in the data object.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object representing the file data node to which the data object will be added.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.AddDataReference(System.String,System.Guid)">
      <summary>Adds a data reference as a child of this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> file data node. The data reference points to a file data object.</summary>
      <param name="name">The name of the data object to add by reference. Specify null if the data object does not have a name.</param>
      <param name="guidData">The globally unique identifier (GUID) representing the data object to add by reference. If null, a reference will be added that points to the data object with the given <see cref="M:Microsoft.DirectX.Direct3D.XFileSaveData.AddDataReference(System.String,System.Guid)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFileSaveData, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.GetSaveObject">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> for this file data node.</summary>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> representing this file data node.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.op_Equality(Microsoft.DirectX.Direct3D.XFileSaveData,Microsoft.DirectX.Direct3D.XFileSaveData)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.op_Inequality(Microsoft.DirectX.Direct3D.XFileSaveData,Microsoft.DirectX.Direct3D.XFileSaveData)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.XFileSaveData.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveData.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveData.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveData.Id">
      <summary>Retrieves the globally unique identifier (GUID) of this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> file data node.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveData.Name">
      <summary>Retrieves the name of this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> file data node.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveData.Type">
      <summary>Retrieves the template globally unique identifier (GUID) of this file data node.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveData.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileSaveObject">
      <summary>Creates and saves data objects and templates.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.XFileSaveObject.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.AddDataObject(System.Guid,System.String,System.Guid,System.Byte[])">
      <summary>Adds a data object as a child of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object.</summary>
      <param name="guidTemplate">The globally unique identifier (GUID) representing the data object's template.</param>
      <param name="name">The name of the data object. Specify null if the data object does not have a name.</param>
      <param name="guidData">A globally unique identifier (GUID) representing the data object. Specify null if the object does not have a globally unique identifier (GUID).</param>
      <param name="data">A <see cref="T:System.Byte" /> array as a buffer containing all required data in the data object.</param>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveData" /> object representing the file data node to which the data object will be added.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.#ctor(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.GetManager">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object of the object that created this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object.</summary>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" /> object of the object that created this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, ID3DXFileSaveObject, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.op_Equality(Microsoft.DirectX.Direct3D.XFileSaveObject,Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.op_Inequality(Microsoft.DirectX.Direct3D.XFileSaveObject,Microsoft.DirectX.Direct3D.XFileSaveObject)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.XFileSaveObject.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Save">
      <summary>Saves a data object and its children to a .x file on disk.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveObject.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileSaveObject.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Fill2DTextureCallback">
      <summary>Represents the method that handles the <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Fill2DTextureCallback)" /> call.</summary>
      <param name="texCoord">A <see cref="T:Microsoft.DirectX.Vector2" /> object that contains the coordinates of the texel currently being evaluated. See Remarks.</param>
      <param name="texelSize">A <see cref="T:Microsoft.DirectX.Vector2" /> object that contains the dimensions of the current texel.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Fill3DTextureCallback">
      <summary>Represents the method that handles the <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.Fill3DTextureCallback)" /> or <see cref="M:Microsoft.DirectX.Direct3D.TextureLoader.FillTexture(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.Fill3DTextureCallback)" /> call.</summary>
      <param name="texCoord">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the coordinates of the texel currently being evaluated. See Remarks.</param>
      <param name="texelSize">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the dimensions of the current texel.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.HandleAnimationCallback">
      <summary>This delegate is used to handle callbacks triggered by <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> in an animation track.</summary>
      <param name="track">Identifier of the track on which the callback occurs.</param>
      <param name="callbackData">Callback data specified in the <see cref="F:Microsoft.DirectX.Direct3D.KeyCallback.CallBackData" /> field.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ImtSignalCallback">
      <summary>Callback method for <see cref="T:Microsoft.DirectX.Direct3D.IntegratedMetricTensor" />.<see cref="M:Microsoft.DirectX.Direct3D.IntegratedMetricTensor.ComputeFromSignal(Microsoft.DirectX.Direct3D.Mesh,System.Int32,System.Int32,System.Single,Microsoft.DirectX.Direct3D.ImtSignalCallback)" />.</summary>
      <param name="uv">The texture coordinate for the vertex.</param>
      <param name="signalDimension">The number of single-precision floating point to store in the return value.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PercentageCompleteCallback">
      <summary>Callback for methods associated with <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> and precomputed radiance transfer (PRT) operations.</summary>
      <param name="percentComplete">Single-precision floating-point number between 0 and 1.0 that represents the percentage of calculations completed (between 0 and 100 percent).</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationOutputFlags">
      <summary>Defines the flags used to create an <see cref="T:Microsoft.DirectX.Direct3D.AnimationOutput" /> object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.AnimationOutputFlags.">
      <summary>Enable retrieval of the animation's rotation data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.AnimationOutputFlags.">
      <summary>Enable retrieval of the animation's scaling data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.AnimationOutputFlags.">
      <summary>Enable retrieval of the animation's translation data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.AnimationOutputFlags.">
      <summary>Enable retrieval of the animation's matrix transformation data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.AnimationOutputFlags.">
      <summary>No output desired.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CallbackSearchFlags">
      <summary>Defines the flags used to obtain callback information.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CallbackSearchFlags.">
      <summary>Reverses the direction of the callback search.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CallbackSearchFlags.">
      <summary>Excludes callbacks at the initial position from the search.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Channel">
      <summary>Defines flags that specify which channels in a texture to operate on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.">
      <summary>Operation is performed on the alpha channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.">
      <summary>Operation is performed on the green channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.">
      <summary>Operation is performed on the blue channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.">
      <summary>Operation is performed on the red channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Channel.">
      <summary>Operation is performed on the luminance channel.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CharacterSet">
      <summary>Defines a character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Baltic character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Characters used by Macintosh.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Russian character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Eastern European character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Thai character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Vietnamese character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Turkish character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Greek character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Arabic character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Hebrew character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Korean character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Extended ASCII character set used with disk operating system (DOS) and some Microsoft Windows fonts.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Chinese character set used mostly in Hong Kong SAR and Taiwan.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Chinese character set used in mainland China.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Korean character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Another common spelling of the Korean character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Japanese character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>Symbol character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>System default character set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CharacterSet.">
      <summary>ASCII character set.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CleanType">
      <summary>Defines vertex operations to perform in preparation for mesh cleaning.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CleanType.">
      <summary>Use the <see cref="F:Microsoft.DirectX.Direct3D.CleanType.Skinning" /> or <see cref="F:Microsoft.DirectX.Direct3D.CleanType.BowTies" /> flags only as required to prevent infinite loops during mesh operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CleanType.">
      <summary>Use the <see cref="F:Microsoft.DirectX.Direct3D.CleanType.BackFacing" /> flag only as required to prevent infinite loops during mesh operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CleanType.">
      <summary>Use the <see cref="F:Microsoft.DirectX.Direct3D.CleanType.BackFacing" /> flag only as required to prevent infinite loops during mesh operations. Typically used to avoid breaking skinning operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CleanType.">
      <summary>If a vertex is the apex of two triangle fans (a bowtie) and mesh operations will affect one of the fans, then split the shared vertex into two new vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CleanType.">
      <summary>Merge triangles that share the same vertex indices but have face normals pointing in opposite directions (back-facing triangles). Unless vertex indices are corrected so that the triangles have the same vertex winding order, mesh adjacency data from the two triangles may conflict.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CompressionFlags">
      <summary>Defines the compression mode to use for storing compressed animation set data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CompressionFlags.">
      <summary>Implements fast compression.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CompressionQuality">
      <summary>Defines spherical harmonic (SH) compression settings.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CompressionQuality.">
      <summary>The data compression is high quality, but is slow to compress.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CompressionQuality.">
      <summary>The data compression is low quality, but is fast to compress.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DrawTextFormat">
      <summary>Specifies the method of formatting text.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> parameter. A carriage return/line feed sequence also breaks the line.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Centers text vertically (on a single line only).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Displays text on a single line only. Carriage returns and line feeds do not break the line.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Displays text in right-to-left reading order for bidirectional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Draws without clipping. <see cref="T:Microsoft.DirectX.Direct3D.Font" />.<see cref="M:Microsoft.DirectX.Direct3D.Font.DrawText" /> is somewhat faster when <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.NoClip" /> is used.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Expands tab characters. The default number of characters per tab is eight. The <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> and <see cref="T:Microsoft.DirectX.Direct3D.DrawTextFormat" /> values cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.ExpandTabs" /> value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Centers text horizontally in the rectangle.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Top-justifies text (on a single line only).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Aligns text to right.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Aligns text to left.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Justifies text to the bottom of the rectangle. This value must be combined with <see cref="F:Microsoft.DirectX.Direct3D.DrawTextFormat.SingleLine" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DrawTextFormat.">
      <summary>Specifies no formatting.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectDefaultType">
      <summary>Defines effect data types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectDefaultType.">
      <summary>Data type is an array of floating-point values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectDefaultType.">
      <summary>Forces this enumeration to compile to 32 bits in size. This value is not used.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EffectDefaultType.">
      <summary>Data type is a <see cref="T:System.String" /> object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EventType">
      <summary>Defines the types of events that can be keyed by the animation controller.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EventType.">
      <summary>Priority blend value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EventType.">
      <summary>Enable flag.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EventType.">
      <summary>Track position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EventType.">
      <summary>Track weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.EventType.">
      <summary>Track speed.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Filter">
      <summary>Defines texture filtering modes for a texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Each destination pixel is computed by sampling the nearest pixel from the source image.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Same as specifying <see cref="F:Microsoft.DirectX.Direct3D.Filter.SrgbIn" /> | <see cref="F:Microsoft.DirectX.Direct3D.Filter.SrgbOut" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Output data is in sRGB (gamma 2.2) color space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Input data is in sRGB (gamma 2.2) color space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Resulting image must be dithered using a 4x4 ordered dither algorithm.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Resulting image must be dithered using a 4x4 ordered dither algorithm.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Same as specifying the <see cref="F:Microsoft.DirectX.Direct3D.Filter.MirrorU" />, <see cref="F:Microsoft.DirectX.Direct3D.Filter.MirrorV" />, and <see cref="F:Microsoft.DirectX.Direct3D.Filter.MirrorW" /> flags. This flag is always used internally for this function.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Each pixel in the source image contributes equally to the destination image. This is the slowest of the filters.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Bilinear interpolation filtering is used as a texture magnification or minification filter. A weighted average of a 2x2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer interpolates pixel color in a linear manner, using the texels of the two nearest textures.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Filter.">
      <summary>Mipmapping disabled. The rasterizer uses the magnification filter instead.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FontQuality">
      <summary>Specifies the level of font quality.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Text is rendered using the Microsoft ClearType antialiasing (smoothing) method when possible. The font quality is given more importance than maintaining the text size; thus, the text width can change. When using this mode for measuring and rendering, ensure that the application does not cache any layout information. If it does, remote users who do not have Microsoft ClearType enabled will view different width and metrics.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Microsoft Windows XP: Text is rendered using the Microsoft ClearType antialiasing method when possible. The font quality is given less importance than maintaining the text size.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Microsoft Windows NT 4.0 and later: Font is antialiased, if it supports antialiasing and if its size falls within the accepted range.Windows 95 with Microsoft Plus!, Windows 98/Windows Millennium Edition (Windows Me): The display must be greater than 8-bit color, must be a single plane device, cannot be a palette display, and cannot be part of a multiple-display monitor setup. In addition, a TrueType® font must be selected into a screen device context before it is used in a DIBSection (a structure that contains information about a device-independent bitmap); otherwise, antialiasing does not occur.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Windows 95 with Microsoft Plus!, Windows 98/Windows Millennium Edition (Windows Me), Windows NT 4.0 and later: Font is never antialiased.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Font's character quality is given more importance than exact matching of the logical-font attributes. For Windows Graphics Device Interface (GDI) raster fonts, scaling is disabled and the font closest in size is chosen. Although this size might not correspond exactly when <see cref="F:Microsoft.DirectX.Direct3D.FontQuality.Proof" /> is used, the font's quality is high and its appearance is not distorted. Bold, italic, underline, and strikeout fonts are synthesized if necessary.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Font's appearance is given less importance than when the <see cref="F:Microsoft.DirectX.Direct3D.FontQuality.Proof" /> value is used. Scaling is enabled for Windows Graphics Device Interface (GDI) raster fonts, which means that more font sizes are available, but their quality might be lower. Bold, italic, underline, and strikeout fonts are synthesized if necessary.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontQuality.">
      <summary>Font's appearance does not matter.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FontWeight">
      <summary>Specifies font weights.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>900 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>800 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>600 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>400 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>200 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>900 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>800 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>700 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>600 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>500 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>200 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>100 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>0 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>400 font weight.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FontWeight.">
      <summary>300 font weight.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FX">
      <summary>Defines flags for saving shader state.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FX.">
      <summary>No state is saved or restored.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FX.">
      <summary>Sampler state is not saved when calling <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)" />, or restored when calling <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.End" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FX.">
      <summary>Shader state is not saved when calling <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)" />, or restored when calling <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.End" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FX.">
      <summary>Device state is not saved when calling <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.Begin(Microsoft.DirectX.Direct3D.FX)" />, or restored when calling <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.End" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GpuSimulatorOption">
      <summary>Describes the resolution of the shadow z-buffer that will be used in precomputed radiance transfer (PRT) direct lighting simulation on the graphics processing unit (GPU). A higher quality z-buffer can also be specified to reduce noise in the results of the direct lighting simulation, although the simulation will be slower.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.">
      <summary>Same as <see cref="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.ShadowRes512" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.">
      <summary>The simulation is of high precision, regardless of the selected resolution. Setting this value will reduce noise in the results of the direct lighting simulation, although the simulation will be slower. May be combined with one of the other values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.">
      <summary>Highest resolution simulation. A 2048 x 2048 pixel texture is used in the simulation to encode the shadow z-buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.">
      <summary>High resolution simulation. A 1024 x 1024 pixel texture is used in the simulation to encode the shadow z-buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.">
      <summary>Medium resolution simulation. A 512 x 512 pixel texture is used in the simulation to encode the shadow z-buffer. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.GpuSimulatorOption.">
      <summary>Low resolution simulation. A 256 x 256 pixel texture is used in the simulation to encode the shadow z-buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ImageFileFormat">
      <summary>Defines the supported image file formats.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Portable float map file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>High dynamic-range file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Microsoft Windows bitmap file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Portable pixmap file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>DirectDrawSurface file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Portable Network Graphics file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Truevision Targa image file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Joint Photographic Experts Group (JPEG) compressed file format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImageFileFormat.">
      <summary>Microsoft Windows bitmap file format.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ImtWrap">
      <summary>Flags used by <see cref="T:Microsoft.DirectX.Direct3D.IntegratedMetricTensor" /> methods.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImtWrap.">
      <summary>The texture wraps in the V direction.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImtWrap.">
      <summary>The texture wraps in the U direction.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ImtWrap.">
      <summary>The texture wraps in both the U and the V directions.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IncludeType">
      <summary>Defines an include file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IncludeType.">
      <summary>Indicates a system resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IncludeType.">
      <summary>Indicates a local resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshFlags">
      <summary>Defines flags used to specify creation options for a mesh.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Simplifies the mesh by the number of faces specified in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Simplifies the mesh by the number of vertices specified in the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Mesh.Simplify" /> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies a default vertex cache size that works well on older hardware.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies that vertices shared between attribute groups should not be split during attribute sorting.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Optimizes the faces only; does not optimize the vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Reorders faces to maximize the length of adjacent triangles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Reorders faces to increase the cache hit rate of vertex caches.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Reorders faces to optimize for fewer attribute bundle state changes and enhanced <see cref="T:Microsoft.DirectX.Direct3D.BaseMesh" />.<see cref="M:Microsoft.DirectX.Direct3D.BaseMesh.DrawSubset(System.Int32)" /> performance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Reorders faces to remove unused vertices and faces.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Equivalent to specifying both <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.VbSoftwareProcessing" /> and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbSoftwareProcessing" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Equivalent to specifying both <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.VbDynamic" /> and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbDynamic" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Equivalent to specifying both <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.VbWriteOnly" /> and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbWriteOnly" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Equivalent to specifying both <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.VbManaged" /> and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbManaged" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Equivalent to specifying both <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.VbSystemMem" /> and <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.IbSystemMem" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of hardware processing only. For mixed-mode devices, this flag causes the system to use hardware processing if it is supported, and software processing otherwise.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Forces the cloned meshes to share vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Usage.SoftwareProcessing" /> usage flag for index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> usage flag for index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Usage.WriteOnly" /> usage flag for index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> memory class for index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" /> memory class for index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Usage.SoftwareProcessing" /> usage flag for vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> usage flag for vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Usage.WriteOnly" /> usage flag for vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> memory class for vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies use of the <see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" /> memory class for vertex buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Causes the vertex and index buffer of the mesh to be created with the <see cref="F:Microsoft.DirectX.Direct3D.MeshFlags.NPatches" /> flag. This is required if the mesh object will be rendered using N-patch enhancement with Microsoft Direct3D.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Used for vertex and index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Used for vertex and index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Used for vertex and index buffers.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MeshFlags.">
      <summary>Specifies 32-bit indices instead of 16-bit indices for the mesh.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NormalMap">
      <summary>Defines the flags used to convert a height map into a normal map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.">
      <summary>Computes the per-pixel occlusion term and encodes it into the alpha. An alpha of 1 means that the pixel is not obscured in any way; an alpha of 0 means that the pixel is completely obscured.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.">
      <summary>Inverts the direction of each normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.">
      <summary>Same as specifying <see cref="F:Microsoft.DirectX.Direct3D.NormalMap.MirrorU" /> and <see cref="F:Microsoft.DirectX.Direct3D.NormalMap.MirrorV" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.">
      <summary>Indicates that pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.NormalMap.">
      <summary>Indicates that pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterClass">
      <summary>Defines the class of the object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.">
      <summary>Object is a structure.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.">
      <summary>Object is a texture, a shader, or a string.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.">
      <summary>Object is a column major matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.">
      <summary>Object is a row major matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.">
      <summary>Object is a vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterClass.">
      <summary>Object is a scalar.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterFlags">
      <summary>Defines shader and effect constants.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterFlags.">
      <summary>The parameter is marked as an annotation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterFlags.">
      <summary>The value of a parameter will be shared by all effects in the same namespace. Changing the value in one effect will change it in all shared effects.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterFlags.">
      <summary>The parameter is marked as a literal value. Literal parameters cannot change after compile, allowing the compiler to optimize their usage. Shared parameters cannot be marked as a literal.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterType">
      <summary>Defines the data contained by the enumeration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a sampler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a <see cref="T:System.Boolean" /> value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a <see cref="T:System.Void" /> object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a cube sampler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a 3-D sampler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a 2-D sampler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a 1-D sampler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a cube texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a 3-D texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a 2-D texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a 1-D texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a <see cref="T:System.String" /> object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is an <see cref="T:System.Int32" /> value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a vertex shader.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a pixel shader.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ParameterType.">
      <summary>Parameter is a texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchType">
      <summary>Defines mesh patch types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchType.">
      <summary>Rectangle patch mesh type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchType.">
      <summary>N-patch mesh type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchType.">
      <summary>Triangle patch mesh type.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PitchAndFamily">
      <summary>Defines font families.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a novelty font; for example, Old English.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a font that is designed to look like handwriting; for example, Script and Cursive.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a monospace font with or without serifs. Monospace fonts are usually modern; examples include Pica, Elite, and Courier New.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a proportional font without serifs; for example, Arial.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a proportional font with serifs; for example, Times New Roman.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a generic family name, which is used when information about a font does not exist or does not matter. The default font is used.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a monospace font.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a variable-pitch font.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies a fixed-pitch font.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PitchAndFamily.">
      <summary>Specifies default pitch.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PlaybackType">
      <summary>Defines the type of looping mode to use for playback of an animation set.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PlaybackType.">
      <summary>Animation alternates endlessly between playing forward and playing backward.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PlaybackType.">
      <summary>Animation plays once, then stops on the last frame.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PlaybackType.">
      <summary>Animation repeats endlessly.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Precision">
      <summary>Specifies the desired output precision.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>When more than one font has a given name, use the device font if available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Microsoft Windows 2000/Windows XP: When more than one font has a given name, choose a PostScript font if available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Specifies an outline-based screen font.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Microsoft Windows NT/Windows 2000/Windows XP: This value instructs the font mapper to choose from TrueType and other outline-based fonts.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Windows 2000/Windows XP: When more than one font has a given name, use the TrueType® font if available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>When more than one font has a given name, use the raster font if available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>When more than one font has a given name, use the TrueType® font if available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Specifies a font with attributes that exactly match the requested attributes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Specifies the font with a size (height and width) that most closely matches the requested size. The driver may disregard the requested orientation, but other attributes must match.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Specifies a font with a size (height and width) that most closely matches the requested size. The driver may disregard the requested orientation and escapement, but other attributes must match.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Precision.">
      <summary>Specifies any reasonable font.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PriorityType">
      <summary>Defines the priority type an animation track is assigned to.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PriorityType.">
      <summary>Blends the track with all high-priority tracks before the high-priority blend is mixed with the low-priority blend.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PriorityType.">
      <summary>Blends the track with all low-priority tracks before the low-priority blend is mixed with the high-priority blend.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RegisterSet">
      <summary>Defines the data type of the register.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.">
      <summary>4-D sampler data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.">
      <summary>Boolean value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.">
      <summary>4-D floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RegisterSet.">
      <summary>4-D integer number.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderFlags">
      <summary>Defines the compiler options to use during a shader compilation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Inserts debug file name and line number information during compilation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to use no options during compilation. Value resolves to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the effect runtime that the effect will never be cloned (i.e. by using the <see cref="T:Microsoft.DirectX.Direct3D.Effect" />.<see cref="M:Microsoft.DirectX.Direct3D.Effect.Clone(Microsoft.DirectX.Direct3D.Device)" /> method). This reduces the memory usage for the effect by eliminating the need to keep a copy of the effect's shaders in memory.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to prefer using flow-control instructions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to avoid using flow-control instructions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Disables preshaders; that is, the compiler will not pull out static expressions for evaluation on the host CPU.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to use software pixel shaders.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to use software vertex shaders.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Indicates to the device that the operation can be performed and the result stored at a lower precision (at least s10e5).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to pack matrices in column major order (that is, each vector in a single column).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to pack matrices in row major order (that is, each vector in a single row).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Instructs the compiler to skip optimization steps during code generation. This option is valid only when calling <see cref="T:Microsoft.DirectX.Direct3D.ShaderLoader" />.<see cref="M:Microsoft.DirectX.Direct3D.ShaderLoader.CompileShader" />; it is not recommended unless you are trying to isolate a code problem that you suspect originates in the compiler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShaderFlags.">
      <summary>Prevents the compiler from validating the generated code against known capabilities and constraints. This option is recommended only when compiling shaders that are known to work (that is, those that have compiled before without this option). Shaders are always validated before they are set to the device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SpriteFlags">
      <summary>Defines flags used to specify sprite rendering options.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Enables alpha blending with <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaTestEnable" /> set to true (for nonzero alpha). <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha" /> is the source blend state, and <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha" /> is the destination blend state in calls to <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" />. The<see cref="T:Microsoft.DirectX.Direct3D.Font" /> class requires this flag to be set when drawing text.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Sorts sprites by depth in back-to-front order prior to drawing. This option is recommended when drawing transparent sprites of varying depths.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Sorts sprites by depth in front-to-back order prior to drawing. This option is recommended when drawing opaque sprites of varying depths.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Sorts sprites by texture prior to drawing. This option is recommended when drawing non-overlapping sprites of uniform depth; for example, drawing screen-aligned text with <see cref="T:Microsoft.DirectX.Direct3D.Font" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Rotates each sprite around its center so that it is facing the viewer. <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.SetWorldViewLH(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)" /> or <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.SetWorldViewRH(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)" /> must be called first.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Specifies no modification of the world, view, and projection transforms. The transforms currently set to the device are used to transform sprites when the batched sprites are drawn (that is, when <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.Flush" /> or <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.End" /> is called). If this option is not specified, the world, view, and projection transforms are modified so that sprites are drawn in screen-space coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Specifies no changes to the device render state when <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.Begin(Microsoft.DirectX.Direct3D.SpriteFlags)" /> is called. The device is assumed to be in a valid state to draw vertices when the <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> property equals 0 and <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationUsage" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.DeclarationUsage.Position" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.DeclarationUsage.TextureCoordinate" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.DeclarationUsage.Color" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Prevents the device state from being saved or restored when <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.Begin(Microsoft.DirectX.Direct3D.SpriteFlags)" /> or <see cref="T:Microsoft.DirectX.Direct3D.Sprite" />.<see cref="M:Microsoft.DirectX.Direct3D.Sprite.End" /> is called.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SpriteFlags.">
      <summary>Resolves the value to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TangentOptions">
      <summary>Defines settings used for mesh tangent frame computations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>The results are stored in the original input mesh, and the output mesh is not used.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Compute the per-vertex normal vector for each triangle of the input mesh, and ignore any normal vectors already in the input mesh.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Vertices are ordered in a clockwise direction around each triangle. The computed normal vector direction is therefore inverted 180 degrees from the direction computed using counterclockwise vertex ordering.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Compute a unit-length normal vector for each triangle of the input mesh. Mutually exclusive with <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.WeightByArea" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Weight the direction of the computed per-vertex normal or partial derivative vector according to the areas of triangles attached to that vertex. Mutually exclusive with <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.WeightEqual" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Compute the partial derivative with respect to texture coordinate u independently for each vertex, and then compute the partial derivative with respect to v as the cross product of the normal vector and the partial derivative with respect to u. Mutually exclusive with <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.Orthogonalize" /> and <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.OrthogonalizeFromV" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Compute the partial derivative with respect to texture coordinate v independently for each vertex, and then compute the partial derivative with respect to u as the cross product of the partial derivative with respect to v and the normal vector. Mutually exclusive with <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.Orthogonalize" /> and <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.OrthogonalizeFromU" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Transform texture coordinates to orthogonal Cartesian coordinates. Mutually exclusive with <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.OrthogonalizeFromU" /> and <see cref="F:Microsoft.DirectX.Direct3D.TangentOptions.OrthogonalizeFromV" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Do not normalize partial derivatives with respect to texture coordinates. If not normalized, the scale of the partial derivatives is proportional to the scale of the 3-D model divided by the scale of the triangle in (u, v) space. This scale value provides a measure of how much the texture is stretched in a given direction. The resulting vector length is a weighted sum of the lengths of the partial derivatives.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Texture coordinate values in both u and v directions are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Texture coordinate values in the v direction are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TangentOptions.">
      <summary>Texture coordinate values in the u direction are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TransitionType">
      <summary>Defines the transition style between values of a mesh animation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransitionType.">
      <summary>Ease-in, ease-out spline transition between values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransitionType.">
      <summary>Linear transition between values.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags">
      <summary>Defines the options for welding vertices together.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.">
      <summary>Instructs the weld to allow vertices to be modified only, not removed. This flag is valid only if <see cref="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.WeldPartialMatches" /> is set. It is useful to modify vertices so that they are equal, but not to allow vertices to be removed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.">
      <summary>Instructs the weld to allow vertices to be modified only, not removed. This flag is valid only if <see cref="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.WeldPartialMatches" /> is set. It is useful to modify vertices to be equal, but not to allow vertices to be removed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.">
      <summary>If a given vertex component is within epsilon, instructs the weld to modify partially matched vertices so that both components are equal. If all components are equal, one of the vertices is removed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WeldEpsilonsFlags.">
      <summary>Welds all vertices that are marked by adjacency as being overlapping.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileErrorCodes">
      <summary>Defines XFile error codes. The methods used to work with Microsoft DirectX XFiles can return the following return values. Exceptions thrown from methods that use XFiles can also contain these values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>A cache file could not be read.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>No further data is available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>All objects have been enumerated.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Template member data could not be retrieved.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Array size exceeds the allowable size.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>File could not be parsed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>A file read or write operation failed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>File is not the expected size.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>File has an invalid format version.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>File has an invalid format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Resource is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Resource could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>File could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Operation has not completed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Object could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>File did not match known template types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>A variable is outside its expected range; typically returned when an object is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.">
      <summary>Data could not be read from or written to an object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileFormat">
      <summary>Defines file formats for XFiles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.">
      <summary>Indicates a compressed file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.">
      <summary>Indicates a text file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.">
      <summary>Indicates a binary file.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AnimationRootFrame">
      <summary>Contains the root frame and animation controller in a frame hierarchy.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AnimationRootFrame.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AnimationRootFrame" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.AnimationController">
      <summary>Retrieves the animation controller.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AnimationRootFrame.FrameHierarchy">
      <summary>Retrieves the root node reference of the loaded frame hierarchy.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AttributeRange">
      <summary>Stores an attribute table entry.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeRange.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AttributeRange" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeRange.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.AttributeId">
      <summary>Retrieves or sets the attribute table identifier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.FaceCount">
      <summary>Retrieves or sets the number of faces included in an attribute table entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.FaceStart">
      <summary>Retrieves or sets the first face in an attribute group.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.VertexCount">
      <summary>Retrieves or sets the number of vertices in the attribute group.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeRange.VertexStart">
      <summary>Retrieves or sets the first vertex in an attribute group.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AttributeWeights">
      <summary>Specifies mesh weight attributes.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeWeights.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AttributeWeights" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AttributeWeights.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Binormal">
      <summary>Retrieves or sets a numerical value that indicates the degree to which binormal data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Boundary">
      <summary>Retrieves or sets a numerical value that indicates the degree to which boundary data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Diffuse">
      <summary>Retrieves or sets a numerical value that indicates the degree to which diffuse data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Normal">
      <summary>Retrieves or sets a numerical value that indicates the degree to which normal data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Position">
      <summary>Retrieves or sets a numerical value that indicates the degree to which position data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Specular">
      <summary>Retrieves or sets a numerical value that indicates the degree to which specular data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.Tangent">
      <summary>Retrieves or sets a numerical value that indicates the degree to which tangent data is used in simplification operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AttributeWeights.TextureCoordinate">
      <summary>Retrieves or sets a numerical value that indicates the degree to which texture coordinate data is used in simplification operations.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BoneCombination">
      <summary>Describes a subset of the mesh that has the same attribute and bone combination.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneCombination.#ctor">
      <summary>Creates a new instance of the <see cref="M:Microsoft.DirectX.Direct3D.BoneCombination.#ctor" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneCombination.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.AttributeId">
      <summary>Retrieves or sets the attribute table identifier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.BoneId">
      <summary>Retrieves or sets an array of values that identify each of the bones that can be drawn in a single drawing call.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.FaceCount">
      <summary>Retrieves or sets the face count for the bone combination.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.FaceStart">
      <summary>Retrieves or sets the starting face for the bone combination.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.VertexCount">
      <summary>Retrieves or sets the vertex count of the bone combination.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BoneCombination.VertexStart">
      <summary>Retrieves or sets the starting vertex in the bone combination.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BoneInfluences">
      <summary>Describes the vertices and weights that a bone influences.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneInfluences.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BoneInfluences" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneInfluences.GetVertices">
      <summary>Retrieves or sets an array of vertices that are influenced by the bone associated with the current <see cref="T:Microsoft.DirectX.Direct3D.BoneInfluences" /> structure.</summary>
      <returns>Array of <see cref="T:System.Int32" /> values indicating the vertices that are influenced by the bone associated with the current <see cref="T:Microsoft.DirectX.Direct3D.BoneInfluences" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BoneInfluences.GetWeights">
      <summary>Retrieves or sets an array of weights associated with the current <see cref="T:Microsoft.DirectX.Direct3D.BoneInfluences" /> structure.</summary>
      <returns>Array of <see cref="T:System.Single" /> values indicating the weight values that the bone exerts on the vertices associated with the current <see cref="T:Microsoft.DirectX.Direct3D.BoneInfluences" /> structure.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CallbackData">
      <summary>Retrieves information about animation callbacks.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CallbackData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CallbackData" /> class.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CallbackData.CallbackPosition">
      <summary>Retrieves or sets a value that indicates the position of the callback.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CallbackData.Data">
      <summary>Points to data for the callback.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConstantDescription">
      <summary>Describes a constant in a constant table.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConstantDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Class">
      <summary>Retrieves or sets the parameter class of the constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Columns">
      <summary>Retrieves or sets a value that indicates the number of columns.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.DefaultData">
      <summary>Retrieves or sets a reference to the default value for the constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Elements">
      <summary>Retrieves or sets the number of elements in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Name">
      <summary>Retrieves or sets the name of the constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.ParameterType">
      <summary>Retrieves or sets the parameter type of the constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.RegisterCount">
      <summary>Retrieves or sets the number of registers that contain data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.RegisterIndex">
      <summary>Retrieves or sets the index of the constant in the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.RegisterSet">
      <summary>Retrieves or sets the constant data type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.Rows">
      <summary>Retrieves or sets a value that indicates the number of rows.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantDescription.StructMembers">
      <summary>Retrieves or sets a value that indicates the number of structure member sub-parameters.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConstantTableDescription">
      <summary>Describes the constant table.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTableDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConstantTableDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConstantTableDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTableDescription.Constants">
      <summary>Retrieves or sets the number of constants in the constant table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTableDescription.Creator">
      <summary>Retrieves or sets the name of the constant table creator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ConstantTableDescription.Version">
      <summary>Retrieves or sets a value that indicates the shader version of the constant table.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeTextureRequirements">
      <summary>Contains cube texture creation parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTextureRequirements.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CubeTextureRequirements" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTextureRequirements.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTextureRequirements.Format">
      <summary>Retrieves or sets the desired pixel format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTextureRequirements.NumberMipLevels">
      <summary>Retrieves or sets the number of mipmap levels for a cube texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTextureRequirements.Size">
      <summary>Retrieves or sets the size of a cube texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DegenerateItems">
      <summary>Indicates the index of patches and vertices that cause the <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.Validate" /> method to fail.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DegenerateItems.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DegenerateItems" /> class.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DegenerateItems.DegeneratePatches">
      <summary>Retrieves the index of patches that cause the <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.Validate" /> method to fail.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DegenerateItems.DegenerateVertices">
      <summary>Retrieves the index of vertices that cause the <see cref="M:Microsoft.DirectX.Direct3D.PatchMesh.Validate" /> method to fail.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplacementParameter">
      <summary>Contains mesh geometry displacement parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplacementParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DisplacementParameter" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplacementParameter.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.LevelOfDetailBias">
      <summary>Retrieves or sets the level-of-detail bias value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.MagFilter">
      <summary>Retrieves or sets the texture filter to use in magnification.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.MinFilter">
      <summary>Retrieves or sets the texture filter to use in minification.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.MipFilter">
      <summary>Retrieves or sets the texture filter for mipmapping.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.Texture">
      <summary>Retrieves or sets a texture for displacement mapping.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplacementParameter.Wrap">
      <summary>Retrieves or sets the texture address wrap mode.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectDefault">
      <summary>Manages a default effect parameter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDefault.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDefault.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDefault.Data">
      <summary>Retrieves or sets the effect parameter data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDefault.ParameterName">
      <summary>Retrieves or sets the parameter name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDefault.Type">
      <summary>Retrieves or sets the data type in the <see cref="P:Microsoft.DirectX.Direct3D.EffectDefault.Data" /> property.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectDescription">
      <summary>Describes an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.EffectDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Creator">
      <summary>Retrieves the name of the effect creator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Functions">
      <summary>Retrieves the number of functions that can render the effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Parameters">
      <summary>Retrieves the number of parameters used for the effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectDescription.Techniques">
      <summary>Retrieves the number of techniques that can render the effect.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EffectInstance">
      <summary>Manages a set of default effect parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectInstance.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectInstance.GetDefaults">
      <summary>Retrieves the default effect parameters managed by the current <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</summary>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> instances that represent the default effect parameters managed by the <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectInstance.SetDefaults(Microsoft.DirectX.Direct3D.EffectDefault[])">
      <summary>Sets the default effect parameters managed by the current <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</summary>
      <param name="value">Array of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> instances that represent the default effect parameters managed by the <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EffectInstance.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EffectInstance.EffectFilename">
      <summary>Retrieves or sets the name of the effect file.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.EventDescription">
      <summary>Describes an animation event.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.EventDescription.#ctor">
      <summary>Initializes a new instance of an object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.Duration">
      <summary>Retrieves the duration of the event in global time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.Enable">
      <summary>Retrieves the enable flag.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.EventType">
      <summary>Retrieves the event type as defined in <see cref="T:Microsoft.DirectX.Direct3D.EventType" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.Position">
      <summary>Retrieves the track position for the event.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.Speed">
      <summary>Retrieves the track speed for the event.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.StartTime">
      <summary>Retrieves the start time of the event in global time.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.Track">
      <summary>Retrieves the event track identifier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.TransitionType">
      <summary>Retrieves the transition style of the event as defined in <see cref="T:Microsoft.DirectX.Direct3D.TransitionType" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.EventDescription.Weight">
      <summary>Retrieves the track weight for the event.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ExtendedMaterial">
      <summary>Returns material information that is saved in DirectX (.x) files.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ExtendedMaterial.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ExtendedMaterial.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ExtendedMaterial.Material3D">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.Material" /> structure that describes the material properties.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ExtendedMaterial.TextureFilename">
      <summary>Retrieves or sets a string that specifies the file name of the texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FontDescription">
      <summary>Defines the attributes of a font.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FontDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FontDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FontDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.CharSet">
      <summary>Retrieves or sets the character set for the font.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.FaceName">
      <summary>Retrieves or sets the name of the font.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.Height">
      <summary>Retrieves or sets the height of the font in logical units.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.IsItalic">
      <summary>Determines whether a font is italic.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.MipLevels">
      <summary>Retrieves or sets the number of mip levels requested.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.OutputPrecision">
      <summary>Retrieves or sets the output precision for a font.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.PitchAndFamily">
      <summary>Retrieves or sets the pitch and family of a font.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.Quality">
      <summary>Retrieves or sets the output quality of a font.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.Weight">
      <summary>Retrieves or sets the weight of a font.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FontDescription.Width">
      <summary>Retrieves or sets the width of a font in logical units.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FragmentDescription">
      <summary>Describes an annotation used by an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FragmentDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FragmentDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentDescription.Name">
      <summary>Retrieves or sets a fragment name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FragmentDescription.Target">
      <summary>Retrieves or sets a fragment compile target.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FunctionDescription">
      <summary>Describes a function used by an effect.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FunctionDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FunctionDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FunctionDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FunctionDescription.Annotations">
      <summary>Unused. This member is always set to 0 by <see cref="M:Microsoft.DirectX.Direct3D.BaseEffect.GetFunctionDescription(Microsoft.DirectX.Direct3D.EffectHandle)" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FunctionDescription.Name">
      <summary>Retrieves the function name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GlyphMetricsFloat">
      <summary>Contains information about the position and orientation of the corresponding glyph in the string.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.GlyphMetricsFloat" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.BlackBoxX">
      <summary>Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.BlackBoxY">
      <summary>Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.CellIncX">
      <summary>Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.CellIncY">
      <summary>Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GlyphMetricsFloat.GlyphOrigin">
      <summary>Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ImageInformation">
      <summary>Contains a description of the original contents of an image file.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ImageInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ImageInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ImageInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Depth">
      <summary>Retrieves or sets the depth of the original image.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Format">
      <summary>Retrieves or sets a value that most closely describes the data in the original image.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Height">
      <summary>Retrieves or sets the height of the original image.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.ImageFileFormat">
      <summary>Retrieves or sets the format of the image file.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.MipLevels">
      <summary>Retrieves or sets the number of mip levels in the original image.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.ResourceType">
      <summary>Retrieves or sets a value that represents the type of the texture stored in the file.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ImageInformation.Width">
      <summary>Retrieves or sets the width of the original image.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IntersectInformation">
      <summary>Describes the intersection of a ray and a triangle.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntersectInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IntersectInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IntersectInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.Dist">
      <summary>Retrieves or sets the distance along the ray where the intersection occurred.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.FaceIndex">
      <summary>Retrieves or sets the index of the triangle that intersected the ray.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.U">
      <summary>Retrieves or sets the barycentric coordinate within the triangle where the ray intersects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IntersectInformation.V">
      <summary>Retrieves or sets the barycentric coordinate within the triangle where the ray intersects.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyCallback">
      <summary>Describes a callback key for use in keyframe animation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyCallback.CallBackData">
      <summary>Retrieves or sets user callback data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyCallback.Time">
      <summary>Retrieves or sets a time value that indicates when the callback is triggered.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyCallback.#ctor">
      <summary>Creates a new instance of a <see cref="T:Microsoft.DirectX.Direct3D.KeyCallback" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyQuaternion">
      <summary>Describes a quaternion key for use in keyframe animation, and specifies a quaternion value at a given time.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyQuaternion.Time">
      <summary>Retrieves or sets the time of the quaternion key.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyQuaternion.Value">
      <summary>Retrieves or sets the value of the quaternion key.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyQuaternion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.KeyQuaternion" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.KeyVector3">
      <summary>Describes a vector key for use in keyframe animation, and specifies a vector at a given time.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyVector3.Time">
      <summary>Retrieves or sets the keyframe time stamp.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.KeyVector3.Value">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Vector3" /> object that supplies scale and/or translation values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.KeyVector3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.KeyVector3" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Macro">
      <summary>Describes preprocessor definitions used by an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Macro.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Macro" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Macro.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Macro.Definition">
      <summary>Retrieves or sets the definition name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Macro.Name">
      <summary>Retrieves or sets the preprocessor name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshData">
      <summary>Contains mesh data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MeshData" /> class.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshData.Mesh">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> contained in the current object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshData.PatchMesh">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.PatchMesh" /> contained in the current object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshData.ProgressiveMesh">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.ProgressiveMesh" /> contained in the current object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MeshOptions">
      <summary>Specifies the type of mesh optimization to perform.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.#ctor(Microsoft.DirectX.Direct3D.MeshFlags[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MeshOptions" /> class.</summary>
      <param name="initialFlags">Array of <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> objects that specify the mesh creation options.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.#ctor(Microsoft.DirectX.Direct3D.MeshFlags)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MeshOptions" /> class.</summary>
      <param name="initialFlag">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> object that specifies the mesh creation options.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MeshOptions" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MeshOptions.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.DoNotClip">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.DoNotClip" /> should be used for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Dynamic">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.Dynamic" /> should be used for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferDynamic">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.Dynamic" /> should be used for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferManaged">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.Managed" /> should be used for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferSoftwareProcessing">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.SoftwareProcessing" /> should be used for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferSystemMem">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.SystemMemory" /> should be used for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.IndexBufferWriteOnly">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.WriteOnly" /> should be used for index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Managed">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.Managed" /> should be used for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.NPatches">
      <summary>Specifies whether the index and vertex buffers of the mesh should be created with <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.NPatches" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Points">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.Points" /> should be used for index and vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.RtPatches">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.RTPatches" /> should be used for index and vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.SoftwareProcessing">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.SoftwareProcessing" /> should be used for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.SystemMem">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.SystemMemory" /> should be used for vertex and index buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Use32Bit">
      <summary>Specifies whether the mesh uses 32-bit indices instead of 16-bit indices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.Value">
      <summary>Specifies creation options for a mesh.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferDynamic">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.Dynamic" /> should be used for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferManaged">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.Managed" /> should be used for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferSoftwareProcessing">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.SoftwareProcessing" /> should be used for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferSystemMem">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.SystemMemory" /> should be used for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.VertexBufferWriteOnly">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.WriteOnly" /> should be used for vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MeshOptions.WriteOnly">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.Usage.Usage.WriteOnly" /> should be used for vertex and index buffers.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXAllocateHierarchy">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXAnimationCallback">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXFrame">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXIncludeClass">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXLoadUserData">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXMeshContainer">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MyD3DXSaveUserData">
      <summary>Not supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ParameterDescription">
      <summary>Describes a parameter that is used for an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ParameterDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ParameterDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ParameterDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Annotations">
      <summary>Retrieves the number of annotations for the parameter description.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Bytes">
      <summary>Contains the size of the parameter in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Class">
      <summary>Retrieves the parameter class, which is one of the values in the <see cref="T:Microsoft.DirectX.Direct3D.ParameterClass" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Columns">
      <summary>Retrieves the number of columns in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Elements">
      <summary>Retrieves the number of elements in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Flags">
      <summary>Retrieves the parameter attributes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Name">
      <summary>Retrieves the name of the parameter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Rows">
      <summary>Retrieves the number of rows in the array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Semantic">
      <summary>Retrieves the semantic meaning, also called the usage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.StructMembers">
      <summary>Retrieves the number of structure members.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ParameterDescription.Type">
      <summary>Retrieves the parameter type, which is one of the values in the <see cref="T:Microsoft.DirectX.Direct3D.ParameterType" /> enumeration.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PassDescription">
      <summary>Describes a pass for an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PassDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PassDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.Annotations">
      <summary>Retrieves the number of annotations for the current pass description.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.Name">
      <summary>Retrieves the name used for the pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.PixelShaderFunction">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the pixel shader function.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PassDescription.VertexShaderFunction">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the vertex shader function.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchInformation">
      <summary>Contains the attributes of a patch mesh.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PatchInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PatchInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.BasisType">
      <summary>Retrieves or sets the type of curve used to construct the patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.Degree">
      <summary>Retrieves or sets the degree of the curves used to construct the patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.PatchType">
      <summary>Retrieves or sets the patch type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PatchInformation.TessellateLevel">
      <summary>Retrieves or sets the tessellation level.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PropertyDescription">
      <summary>Describes a property used for an effect object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PropertyDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PropertyDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PropertyDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Bytes">
      <summary>Retrieves or sets the size of the property, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Dimension">
      <summary>Retrieves or sets the dimension of the property.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Index">
      <summary>Retrieves or sets the index of the property.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Name">
      <summary>Retrieves or sets the name of the property.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PropertyDescription.Type">
      <summary>Retrieves or sets the property type.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData">
      <summary>Contains precomputed radiance transfer (PRT) split mesh cluster data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.ClusterLength">
      <summary>Retrieves or sets the number of clusters in this supercluster.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.ClusterStart">
      <summary>Retrieves or sets the initial index into cluster array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.FaceLength">
      <summary>Retrieves or sets the number of faces in this supercluster.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.FaceStart">
      <summary>Retrieves or sets the initial index into face array.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.VertexLength">
      <summary>Retrieves or sets the number of vertices in this supercluster.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshClusterData.VertexStart">
      <summary>Retrieves or sets the initial vertex into remapped vertex array.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrtSplitMeshVertexData">
      <summary>Contains precomputed radiance transfer (PRT) split mesh vertex data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PrtSplitMeshVertexData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PrtSplitMeshVertexData" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshVertexData.SubCluster">
      <summary>Retrieves or sets the cluster index, relative to the supercluster.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshVertexData.VertexRemap">
      <summary>Retrieves or sets the vertex in the original mesh to which this split mesh vertex corresponds.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PrtSplitMeshVertexData.VertexStatus">
      <summary>Retrieves or sets the vertex status.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription">
      <summary>Describes an off-screen render target.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.DepthStencil">
      <summary>Retrieves or sets a value that indicates whether the z-buffer is needed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.DepthStencilFormat">
      <summary>Retrieves or sets the depth stencil format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.Format">
      <summary>Retrieves or sets the color buffer format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.MipLevels">
      <summary>Retrieves or sets the maximum level of detail (LOD) number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToEnvironmentDescription.Size">
      <summary>Retrieves or sets the size of the render target.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription">
      <summary>Describes a render surface.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.DepthStencil">
      <summary>Retrieves or sets a value that specifies whether the render surface supports a depth stencil surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.DepthStencilFormat">
      <summary>Retrieves or sets the depth stencil format of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.Format">
      <summary>Retrieves or sets the format of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.Height">
      <summary>Retrieves or sets the height of the render surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderToSurfaceDescription.Width">
      <summary>Retrieves or sets the width of the render surface.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ScaleRotateTranslate">
      <summary>Encapsulates scale, rotate and translate structures.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ScaleRotateTranslate" /> class.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.Rotation">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.Scaling">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ScaleRotateTranslate.Translation">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Semantic">
      <summary>Maps a parameter to vertex or pixel shader registers.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Semantic.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Semantic" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Semantic.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Semantic.Usage">
      <summary>Retrieves or sets options that identify how resources are used.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Semantic.UsageIndex">
      <summary>Retrieves or sets options that modify how usage is interpreted.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderConstantInformation">
      <summary>Contains shader constant information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderConstantInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.DefaultValue">
      <summary>Retrieves or sets the offset, in bytes, to the string that contains the default value of the shader constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.Name">
      <summary>Retrieves or sets the offset, in bytes, to the name of the shader constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.RegisterCount">
      <summary>Retrieves or sets the number of registers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.RegisterIndex">
      <summary>Retrieves or sets the register index.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.RegisterSet">
      <summary>Retrieves or sets a value from the <see cref="T:Microsoft.DirectX.Direct3D.RegisterSet" /> enumeration that specifies the shader register data type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantInformation.TypeInformation">
      <summary>Retrieves or sets the offset, in bytes, to the type information of a shader constant.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderConstantTable">
      <summary>Contains the shader constant table that is embedded inside the shader.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderConstantTable" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderConstantTable.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.BuildInfo">
      <summary>Retrieves or sets the offset, in bytes, to the build information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.ConstantInformation">
      <summary>Retrieves or sets the offset, in bytes, to the constant information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Constants">
      <summary>Retrieves or sets the number of constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Creator">
      <summary>Retrieves or sets the offset, in bytes, to the name of the effect creator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Flags">
      <summary>Retrieves or sets one or more values from the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFlags" /> enumeration that specify the compiler flags used to build the shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Size">
      <summary>Retrieves or sets the size of a constant.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Target">
      <summary>Retrieves or sets the offset, in bytes, into the string that contains the target.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderConstantTable.Version">
      <summary>Retrieves or sets the shader version.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderDebugInformation">
      <summary>Contains shader debug information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderDebugInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderDebugInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderDebugInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Creator">
      <summary>Retrieves or sets the offset to the shader creator information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.EntryPointName">
      <summary>Retrieves or sets the offset to the entry-point name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.FileInformation">
      <summary>Retrieves or sets the offset to the shader file information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Files">
      <summary>Retrieves or sets the number of source files.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.InstructionInformation">
      <summary>Retrieves or sets the offset, in bytes, from the start of the structure to the instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Instructions">
      <summary>Retrieves or sets the number of instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Size">
      <summary>Retrieves or sets the size, in bytes, of the debug information structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.SourceCode">
      <summary>Retrieves or sets the offset, in bytes, from the start of the structure to the source code.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.VariableInformation">
      <summary>Retrieves or sets the offset, in bytes, from the start of the structure to the variable information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderDebugInformation.Variables">
      <summary>Retrieves or sets the number of variables.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderFileInformation">
      <summary>Contains information about the shader file.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderFileInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderFileInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderFileInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderFileInformation.Name">
      <summary>Retrieves or sets the offset, in bytes, to the shader name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderInstructionInformation">
      <summary>Contains data for retrieving shader instruction information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderInstructionInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.File">
      <summary>Retrieves or sets the offset, in bytes, from the beginning of the debug information to the file-name string.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.Line">
      <summary>Retrieves or sets the shader line number that contains the instruction.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderInstructionInformation.Offset">
      <summary>Retrieves or sets the offset for the shader instruction.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation">
      <summary>Contains the shader structure member information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.Name">
      <summary>Retrieves or sets the shader structure member name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderStructMemberInformation.TypeInformation">
      <summary>Retrieves or sets the offset of the string that contains the type information.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderTypeInformation">
      <summary>Contains shader type information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderTypeInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderTypeInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderTypeInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Class">
      <summary>Retrieves or sets the class for shader type information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Columns">
      <summary>Retrieves or sets the number of columns for vectors and matrices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Elements">
      <summary>Retrieves or sets the number of elements, or the array dimensions, for the shader type information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.StructMemberInformation">
      <summary>Retrieves or sets the offset of the structure member information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.StructMembers">
      <summary>Retrieves or sets the number of structure members.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderTypeInformation.Type">
      <summary>Retrieves or sets the type for shader type information.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderVariableInformation">
      <summary>Contains shader variable information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderVariableInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderVariableInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderVariableInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.Name">
      <summary>Retrieves or sets the shader variable name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.Scope">
      <summary>Retrieves or sets the scope of the shader variable.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.TypeInformation">
      <summary>Retrieves or sets the type of the shader variable.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.WriteInformation">
      <summary>Retrieves or sets the write information for the variable.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderVariableInformation.Writes">
      <summary>Retrieves or sets the number of writes.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShaderWriteInformation">
      <summary>Contains the shader write information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderWriteInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ShaderWriteInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShaderWriteInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShaderWriteInformation.Instruction">
      <summary>Retrieves or sets the shader instruction to write.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SkinMesh">
      <summary>Contains skin information and mesh data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads skin information and mesh data from a Microsoft Direct3D .x file data object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the Microsoft DirectX file data object to load.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specifies creation options for the mesh.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> objects loaded from the .x file data object.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> structure that contains the skin and mesh data from the .x file object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads skin information and mesh data from a Microsoft Direct3D .x file data object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the Microsoft DirectX file data object to load.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specifies creation options for the mesh.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object representing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> structure that contains the skin and mesh data from the .x file object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@)">
      <summary>Loads skin information and mesh data from a Microsoft Direct3D .x file data object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the Microsoft DirectX file data object to load.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specifies creation options for the mesh.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object representing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> objects loaded from the .x file data object.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> structure that contains the skin and mesh data from the .x file object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@)">
      <summary>Loads skin information and mesh data from a Microsoft Direct3D .x file data object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the Microsoft DirectX file data object to load.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specifies creation options for the mesh.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object representing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> structure that contains the skin and mesh data from the .x file object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device)">
      <summary>Loads skin information and mesh data from a Microsoft Direct3D .x file data object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the Microsoft DirectX file data object to load.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specifies creation options for the mesh.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> structure that contains the skin and mesh data from the .x file object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.FromX(Microsoft.DirectX.Direct3D.XFileData,Microsoft.DirectX.Direct3D.MeshFlags,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream@,Microsoft.DirectX.Direct3D.ExtendedMaterial[]@,Microsoft.DirectX.Direct3D.EffectInstance[]@)">
      <summary>Loads skin information and mesh data from a Microsoft Direct3D .x file data object.</summary>
      <param name="xofObjMesh">An <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> object that represents the Microsoft DirectX file data object to load.</param>
      <param name="options">A <see cref="T:Microsoft.DirectX.Direct3D.MeshFlags" /> enumeration that specifies creation options for the mesh.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object associated with the mesh.</param>
      <param name="adjacency">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object representing an array of three <see cref="T:System.Int32" /> values per face that specify the three neighbors for each face in the mesh.</param>
      <param name="materials">Array of <see cref="T:Microsoft.DirectX.Direct3D.ExtendedMaterial" /> objects loaded from the .x file data object.</param>
      <param name="effects">An array of <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" /> structures, where each structure contains a set of <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> structures. Each <see cref="T:Microsoft.DirectX.Direct3D.EffectDefault" /> represents an attribute group in the returned mesh. The data in these structures represent a particular instance of state information used to initialize an effect. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.EffectInstance" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SkinMesh" /> structure that contains the skin and mesh data from the .x file object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SkinMesh.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinMesh.Mesh">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.Mesh" /> object associated with the current skin information.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SkinMesh.SkinInformation">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.SkinInformation" /> object used for skinning.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial">
      <summary>Contains spherical harmonic (SH)precomputed radiance transfer (PRT) material characteristics.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.Absorption">
      <summary>Retrieves or sets the absorption coefficient used to model light propagation in a participating medium.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.AbsorptionColor">
      <summary>Retrieves or sets the absorption coefficient used to model light propagation in a participating medium.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.Diffuse">
      <summary>Retrieves or sets the diffuse albedo of the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.DiffuseColor">
      <summary>Retrieves or sets the diffuse albedo of the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.IsMirror">
      <summary>Determines whether the material is a mirror.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.IsSubsurfaceScattering">
      <summary>Enables or disables subsurface scattering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.ReducedScattering">
      <summary>Retrieves or sets the reduced scattering coefficient used to model light propagation in a participating medium.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.ReducedScatteringColor">
      <summary>Retrieves or sets the reduced scattering coefficient used to model light propagation in a participating medium.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SphericalHarmonicMaterial.RelativeIndexOfRefraction">
      <summary>Retrieves or sets the relative index of refraction as the ratio between two absolute indices of refraction.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TechniqueDescription">
      <summary>Describes a technique used by an effect.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TechniqueDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TechniqueDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TechniqueDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TechniqueDescription.Annotations">
      <summary>Retrieves the number of annotations for the current technique.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TechniqueDescription.Name">
      <summary>Retrieves the technique name.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TechniqueDescription.Passes">
      <summary>Retrieves the number of rendering passes the technique requires.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureRequirements">
      <summary>Contains texture creation parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureRequirements.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TextureRequirements" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureRequirements.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.Format">
      <summary>Retrieves or sets the desired pixel format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.Height">
      <summary>Retrieves or sets the height for a texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.NumberMipLevels">
      <summary>Retrieves or sets the number of mipmap levels for a texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureRequirements.Width">
      <summary>Retrieves or sets the width for a texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TrackDescription">
      <summary>Describes an animation track and specifies its weight and speed at a given time.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrackDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TrackDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrackDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Enable">
      <summary>Retrieves or sets a track's enable/disable parameter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Position">
      <summary>Retrieves or sets a track's time position in the local time frame of its current animation set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Priority">
      <summary>Retrieves or sets a track's priority type as defined in <see cref="T:Microsoft.DirectX.Direct3D.PriorityType" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Speed">
      <summary>Retrieves or sets the speed value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrackDescription.Weight">
      <summary>Retrieves or sets the weight value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UVAtlasOutput">
      <summary>Contains texture atlas data returned from <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> member methods.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UVAtlasOutput.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UVAtlasOutput" /> class.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.UVAtlasOutput.FacePartitioning">
      <summary>Gets face partitioning data created as a result of a <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> method.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.UVAtlasOutput.MaximumStretch">
      <summary>Gets the maximum stretch value output as a result of a <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> method.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.UVAtlasOutput.Mesh">
      <summary>Gets the mesh created as the result of a <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> method.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.UVAtlasOutput.NumberCharts">
      <summary>Gets the number of charts created as a result of a <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> method, or the number of charts required to create a texture atlas.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.UVAtlasOutput.VertexRemapArray">
      <summary>Gets a <see cref="T:Microsoft.DirectX.GraphicsStream" /> that describes the remapping of the vertices of the mesh created by a <see cref="T:Microsoft.DirectX.Direct3D.UVAtlas" /> texture atlas operation.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeTextureRequirements">
      <summary>Contains volume texture creation parameters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTextureRequirements" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Depth">
      <summary>Retrieves or sets the volume texture depth, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Format">
      <summary>Retrieves or sets the desired pixel format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Height">
      <summary>Retrieves or sets the volume texture height, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.NumberMipLevels">
      <summary>Retrieves or sets the number of mipmap levels of a volume texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTextureRequirements.Width">
      <summary>Retrieves or sets the volume texture width, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WeldEpsilons">
      <summary>Specifies a per-vertex value that is used to weld similar vertices together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WeldEpsilons.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WeldEpsilons" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WeldEpsilons.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Binormal">
      <summary>Retrieves or sets the allowable tolerance value of a binormal, or the cross product of the tangent and normal vectors, to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.BlendWeights">
      <summary>Retrieves or sets the allowable tolerance value of the blend weights to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Diffuse">
      <summary>Retrieves or sets the allowable tolerance value of the diffuse lighting to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Normal">
      <summary>Retrieves or sets the allowable tolerance value of a normal to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.PointSize">
      <summary>Retrieves or sets the allowable tolerance value of a point size to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Position">
      <summary>Retrieves or sets the allowable tolerance value of a position to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Specular">
      <summary>Retrieves or sets the allowable tolerance value of specular lighting to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.Tangent">
      <summary>Retrieves or sets the allowable tolerance value of a tangent to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.TessellateFactor">
      <summary>Retrieves or sets the allowable tolerance value of a tessellation factor to compare between vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.WeldEpsilons.TextureCoordinate">
      <summary>Retrieves or sets the allowable tolerance value of texture coordinates to compare between vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HFONT__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAllocateHierarchy">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationCallbackHandler">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationController">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXAnimationSet">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseEffect">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBaseMesh">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXBuffer">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXCompressedAnimationSet">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXConstantTable">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffect">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectCompiler">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectPool">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXEffectStateManager">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFile">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileData">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileEnumObject">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveData">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFileSaveObject">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFragmentLinker">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXInclude">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXKeyframedAnimationSet">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXLine">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXLoadUserData">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXMesh">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPatchMesh">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPMesh">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTBuffer">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTCompBuffer">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXPRTEngine">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToEnvMap">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXRenderToSurface">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSaveUserData">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSkinInfo">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSPMesh">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXSprite">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureGutterHelper">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXTextureShader">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ManagedD3DXEffectStateManager">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagMSG">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagTEXTMETRICA">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXATTRIBUTERANGE">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXATTRIBUTEWEIGHTS">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXBONECOMBINATION">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXCONSTANTTABLE_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXCONSTANT_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXEFFECTDEFAULT">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXEFFECTINSTANCE">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXEFFECT_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXEVENT_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXFONT_DESCW">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXFRAGMENT_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXFRAME">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXFUNCTION_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXF_FILELOADMEMORY">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXIMAGE_INFO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXKEY_CALLBACK">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXKEY_QUATERNION">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXKEY_VECTOR3">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXMACRO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXMATERIAL">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXMESHCONTAINER">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXMESHDATA">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXPARAMETER_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXPASS_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXPATCHINFO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXRTE_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXRTS_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXSEMANTIC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXSHMATERIAL">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXTECHNIQUE_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXTRACK_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXWELDEPSILONS">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._GLYPHMETRICSFLOAT">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._IMAGE_DOS_HEADER">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._SECURITY_ATTRIBUTES">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._SYSTEMTIME">
      <summary />
    </member>
  </members>
</doc>