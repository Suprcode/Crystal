<doc>
  <assembly>
    <name>Microsoft.DirectX</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.DirectXException">
      <summary>Describes the root exception class for all Microsoft DirectX 9.0 for Managed Code exceptions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.DirectXException.IsExceptionIgnored">
      <summary>Specifies whether Microsoft DirectX 9.0 for Managed Code exceptions are enabled or disabled.</summary>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.DirectXException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialization information for the current exception.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the context for the current exception.</param>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.DirectXException" /> class.</summary>
      <param name="message">String that contains the error text for the exception.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that contains the inner exception.</param>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.DirectXException" /> class.</summary>
      <param name="message">String that contains the error text for the exception.</param>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.DirectXException" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.EnableExceptions">
      <summary>Enables Microsoft DirectX 9.0 for Managed Code exception throwing.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.GetDirectXErrorString(System.Int32)">
      <summary>Retrieves a string that contains the name of the Microsoft DirectX error code.</summary>
      <param name="errorCode">Result code of the failed method that caused this exception.</param>
      <returns>A string that contains the name of the error code.</returns>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.GetExceptionFromResultInternal(System.Int32)">
      <summary>Retrieves the <see cref="T:System.Exception" /> object associated with the <see cref="M:Microsoft.DirectX.DirectXException.GetExceptionFromResultInternal(System.Int32)" /> passed in.</summary>
      <param name="resultCode">Result code of the failed method that caused this exception.</param>
      <returns>An <see cref="T:System.Exception" /> object that contains the new exception created from passing in <see cref="M:Microsoft.DirectX.DirectXException.GetExceptionFromResultInternal(System.Int32)" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.IgnoreExceptions">
      <summary>Disables Microsoft DirectX 9.0 for Managed Code exception throwing.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.ToString">
      <summary>Obtains the string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.DirectXException.ErrorCode">
      <summary>Retrieves or sets the integer value result code.</summary>
    </member>
    <member name="P:Microsoft.DirectX.DirectXException.ErrorString">
      <summary>Retrieves the error string that is specific to Microsoft DirectX 9.0 for Managed Code.</summary>
    </member>
    <member name="P:Microsoft.DirectX.DirectXException.LastError">
      <summary>Retrieves the error status for the last operation that failed.</summary>
    </member>
    <member name="T:Microsoft.DirectX.DXHelp">
      <summary>Contains miscellaneous helper functions for Microsoft DirectX 9.0 for Managed Code.</summary>
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.CopyObjectDataToPointer(System.Object,System.IntPtr)">
      <summary>Copies a managed object to an unmanaged pointer.</summary>
      <param name="objectData">Source <see cref="T:System.Object" /> to copy to the unmanaged pointer.</param>
      <param name="pointerData">Destination pointer to which the source object is copied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.CopyPointerDataToObject(System.Object@,System.IntPtr)">
      <summary>Copies an unmanaged pointer to a managed object.</summary>
      <param name="objectData">[ref] Destination <see cref="T:System.Object" /> to which the pointer data is copied.</param>
      <param name="pointerData">Source pointer data that is copied to the object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.GetObjectSize(System.Object)">
      <summary>Retrieves an object's size.</summary>
      <param name="objectSize">Reference to the <see cref="T:System.Object" /> whose size is being returned.</param>
      <returns>Integer that represents the size of the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.GetTypeSize(System.Type)">
      <summary>Retrieves the size of the <see cref="T:System.Type" />.</summary>
      <param name="typeSize">Reference to the <see cref="T:System.Type" /> whose size is being returned.</param>
      <returns>Integer that represents the size of the type.</returns>
    </member>
    <member name="T:Microsoft.DirectX.GraphicsStream">
      <summary>Contains a graphics data stream.</summary>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Close">
      <summary>Closes the current stream and releases any resources associated with it.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.GraphicsStream" /> class.</summary>
      <param name="dataPointer">Reference to the graphics data in the stream buffer.</param>
      <param name="size">Size of the data referenced by <see cref="M:Microsoft.DirectX.GraphicsStream.#ctor" />.</param>
      <param name="read">Set to true if the buffer is readable; otherwise, false.</param>
      <param name="write">Set to true if buffer is writable; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.#ctor(System.Void,System.Int64,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.GraphicsStream" /> class.</summary>
      <param name="pDataPointer">Reference to the graphics data in the stream buffer.</param>
      <param name="size">Size of the data referenced by <see cref="M:Microsoft.DirectX.GraphicsStream.#ctor" />.</param>
      <param name="read">Set to true if the buffer is readable; otherwise, false.</param>
      <param name="write">Set to true if buffer is writable; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.#ctor(System.IntPtr,System.Int64,System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.GraphicsStream" /> class.</summary>
      <param name="dataPointer">Reference to the graphics data in the stream buffer.</param>
      <param name="size">Size of the data referenced by <see cref="M:Microsoft.DirectX.GraphicsStream.#ctor" />.</param>
      <param name="bufferPointer">Reference to the actual stream buffer.</param>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.#ctor(System.Void,System.Int64,System.Void)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.GraphicsStream" /> class.</summary>
      <param name="pDataPointer">Reference to the graphics data in the stream buffer.</param>
      <param name="size">Size of the data referenced by <see cref="M:Microsoft.DirectX.GraphicsStream.#ctor" />.</param>
      <param name="bufferPointer">Reference to the actual stream buffer.</param>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Dispose">
      <summary>Immediately releases the unmanaged resources used by an object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Flush">
      <summary>Flushing the graphics stream is not supported.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Read(System.Boolean)">
      <summary>Reads from the current stream and advances the position within it by the number of bytes read.</summary>
      <param name="unicode">Set to true if the graphics stream is Unicode. Set to false if the graphics stream is ASCII.</param>
      <returns>A <see cref="T:System.String" /> that contains the data to read from the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Read(System.Type,System.Int32[])">
      <summary>Reads from the current stream and advances the position within it by the number of bytes read.</summary>
      <param name="returnType">Value that indicates the <see cref="T:System.Type" /> of the returned array.</param>
      <param name="ranks">An array of <see cref="T:System.Int32" /> values that represent the size of each dimension of the returning array.</param>
      <returns>An <see cref="T:System.Array" /> of type <see cref="M:Microsoft.DirectX.GraphicsStream.Read" /> that contains the data read from the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Read(System.Type)">
      <summary>Reads from the current stream and advances the position within it by the number of bytes read.</summary>
      <param name="returnType">Value that indicates the <see cref="T:System.Type" /> of the returned array.</param>
      <returns>A <see cref="T:System.ValueType" /> of type <see cref="M:Microsoft.DirectX.GraphicsStream.Read" /> that contains the data read from the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer">Reference to a <see cref="T:System.Byte" /> array that is used as the read buffer.</param>
      <param name="offset">Value that specifies the offset, from the start of the buffer, of the data read from <see cref="M:Microsoft.DirectX.GraphicsStream.Read" />.</param>
      <param name="count">Value that specifies the number of bytes to read.</param>
      <returns>Integer that represents the number of bytes read into <see cref="M:Microsoft.DirectX.GraphicsStream.Read" /> from the graphics stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream.</summary>
      <param name="newposition">Value that represents the new position within the stream buffer.</param>
      <param name="origin">Member of the <see cref="T:System.IO.SeekOrigin" /> enumeration that specifies where to begin seeking.</param>
      <returns>New position within the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.SetLength(System.Int64)">
      <summary>Resizing the graphics stream is not supported.</summary>
      <param name="newLength" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Write(System.String)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">Reference to a <see cref="T:System.String" /> that contains the data to write into the stream buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Write(System.String,System.Boolean)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">Reference to a <see cref="T:System.String" /> that contains the data to write into the stream buffer.</param>
      <param name="isUnicodeString">Set to true if the graphics stream is Unicode. Set to false if the graphics stream is ASCII.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Write(System.Array)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">Reference to an <see cref="T:System.Array" /> that contains the data to write into the stream buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Write(System.ValueType)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">Value that specifies the <see cref="T:System.ValueType" /> of the data to write into the stream buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.GraphicsStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="buffer">Reference to a <see cref="T:System.Byte" /> array that is used as the write buffer.</param>
      <param name="offset">Value that specifies the offset of the data to write from <see cref="M:Microsoft.DirectX.GraphicsStream.Write" />.</param>
      <param name="count">Value that specifies the number of bytes to write.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.CanRead">
      <summary>Retrieves a value that indicates whether the current stream supports reading.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.CanSeek">
      <summary>Retrieves a value that indicates whether the current stream supports seeking.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.CanWrite">
      <summary>Retrieves a value that indicates whether the current stream supports writing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.InternalBuffer">
      <summary>This internal data member is the direct pointer to the unmanaged memory. It can be used, for example, to glue in unmanaged code that renders to dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.InternalBufferPointer">
      <summary>This internal data member is the direct pointer to the unmanaged memory. It can be used, for example, to glue in unmanaged code that renders to dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.InternalData">
      <summary>This internal data member is the direct pointer to the unmanaged memory. It can be used, for example, to glue in unmanaged code that renders to dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.InternalDataPointer">
      <summary>This internal data member is the direct pointer to the unmanaged memory. It can be used, for example, to glue in unmanaged code that renders to dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.Length">
      <summary>Retrieves the length of the stream in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.GraphicsStream.Position">
      <summary>Retrieves or sets the position within the current stream.</summary>
    </member>
    <member name="T:Microsoft.DirectX.MatrixStack">
      <summary>Contains methods and properties that applications use to manipulate a matrix stack.</summary>
    </member>
    <member name="E:Microsoft.DirectX.MatrixStack.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.MatrixStack.Dispose" /> method is called or when the object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.MatrixStack" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Dispose">
      <summary>Immediately releases the unmanaged resources used by an object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.LoadIdentity">
      <summary>Loads identity in the current matrix.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.LoadMatrix(Microsoft.DirectX.Matrix)">
      <summary>Loads a given matrix into the current matrix.</summary>
      <param name="value">New <see cref="T:Microsoft.DirectX.Matrix" /> to load into the current matrix.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.MultiplyMatrix(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of the current matrix and a given matrix.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Matrix" /> to multiply with the current matrix.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.MultiplyMatrixLocal(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of a given matrix and the current matrix.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Matrix" /> to multiply with the current matrix.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Pop">
      <summary>Removes the current matrix from the top of the stack.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Push">
      <summary>Adds a matrix to the stack.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.MatrixStack" />.<see cref="E:Microsoft.DirectX.MatrixStack.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference. Should be the current object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Determines the product of the current matrix and the computed rotation matrix.</summary>
      <param name="axisRotation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the rotation axis to use for the calculation.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateAxisLocal(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Determines the product of the current matrix and the computed rotation matrix.</summary>
      <param name="axisRotation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the rotation axis to use for the calculation.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed rotation matrix, which is composed of a given yaw, pitch, and roll.</summary>
      <param name="yaw">Floating-point value that represents the yaw around the y-axis, in radians.</param>
      <param name="pitch">Floating-point value that represents the pitch around the x-axis, in radians.</param>
      <param name="roll">Floating-point value that represents the roll around the z-axis, in radians.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateYawPitchRollLocal(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed rotation matrix, which is composed of a given yaw, pitch, and roll.</summary>
      <param name="yaw">Floating-point value that represents the yaw around the y-axis, in radians.</param>
      <param name="pitch">Floating-point value that represents the pitch around the x-axis, in radians.</param>
      <param name="roll">Floating-point value that represents the roll around the z-axis, in radians.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Scale(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the current matrix and the computed scale matrix composed from the given point (x, y, and z).</summary>
      <param name="scale">A <see cref="T:Microsoft.DirectX.Vector3" /> object that represents the scale values to use in the calculation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Scale(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed scale matrix composed from the given point (x, y, and z).</summary>
      <param name="x">Floating-point value that represents the scaling component in the x-direction.</param>
      <param name="y">Floating-point value that represents the scaling component in the y-direction.</param>
      <param name="z">Floating-point value that represents the scaling component in the z-direction.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.ScaleLocal(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the computed scale matrix composed from the given point (x, y, and z) and the current matrix.</summary>
      <param name="scale">A <see cref="T:Microsoft.DirectX.Vector3" /> object that represents the scale values to use in the calculation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.ScaleLocal(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the computed scale matrix composed from the given point (x, y, and z) and the current matrix.</summary>
      <param name="x">Floating-point value that represents the scaling component in the x-direction.</param>
      <param name="y">Floating-point value that represents the scaling component in the y-direction.</param>
      <param name="z">Floating-point value that represents the scaling component in the z-direction.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Translate(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the current matrix and the computed translation matrix by the given factors (x, y, and z).</summary>
      <param name="trans">A <see cref="T:Microsoft.DirectX.Vector3" /> object that represents the translation factors to use in the calculation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Translate(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed translation matrix by the given factors (x, y, and z).</summary>
      <param name="x">Floating-point value that represents the translation factor in the x-direction.</param>
      <param name="y">Floating-point value that represents the translation factor in the y-direction.</param>
      <param name="z">Floating-point value that represents the translation factor in the z-direction.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.TranslateLocal(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the computed translation matrix by the given factors (x, y, and z) and the current matrix.</summary>
      <param name="trans">A <see cref="T:Microsoft.DirectX.Vector3" /> object that represents the translation factors to use in the calculation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.TranslateLocal(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the computed translation matrix by the given factors (x, y, and z) and the current matrix.</summary>
      <param name="x">Floating-point value that represents the translation factor in the x-direction.</param>
      <param name="y">Floating-point value that represents the translation factor in the y-direction.</param>
      <param name="z">Floating-point value that represents the translation factor in the z-direction.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.MatrixStack.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="P:Microsoft.DirectX.MatrixStack.Top">
      <summary>Retrieves the current matrix at the top of the stack.</summary>
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods">
      <summary>Defines high-performance utility methods for matrix, plane, quaternion, and vector manipulation. This class is a container of classes. See the individual classes for more information. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="N:Microsoft.DirectX" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods.Matrix">
      <summary>Describes and manipulates a matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="T:Microsoft.DirectX.Matrix" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.AffineTransformation2D(Microsoft.DirectX.Matrix,System.Single,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2)">
      <summary>Builds a 2-D affine transformation matrix in the xy plane. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is an affine transformation matrix.</param>
      <param name="scaling">Scaling factor. A value of zero indicates no scaling.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents a point identifying the center of rotation. Use an empty <see cref="T:Microsoft.DirectX.Vector2" /> for no rotation.</param>
      <param name="rotation">Angle of rotation. A value of zero indicates no rotation.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents the translation. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no translation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is an affine transformation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Invert(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Calculates the inverse of a matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the result of the operation.</param>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Invert(Microsoft.DirectX.Matrix,System.Single,Microsoft.DirectX.Matrix)">
      <summary>Calculates the inverse of a matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the result of the operation.</param>
      <param name="determinant">A <see cref="T:System.Single" /> value that contains the determinant of the matrix. If the determinant is not needed, the parameter is omitted.</param>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.LookAtLH(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Builds a left-handed look-at matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a left-handed look-at matrix.</param>
      <param name="cameraPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera point. This value is used in translation.</param>
      <param name="cameraTarget">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera look-at target.</param>
      <param name="cameraUpVector">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the up direction of the current world, usually [0, 1, 0].</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a left-handed look-at matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.LookAtRH(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Builds a right-handed look-at matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a right-handed look-at matrix.</param>
      <param name="cameraPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera point. This value is used in translation.</param>
      <param name="cameraTarget">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera look-at target.</param>
      <param name="cameraUpVector">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the up direction of the current world, usually [0, 1, 0].</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a right-handed look-at matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the product of two matrices.</param>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the product of two matrices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.MultiplyTranspose(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Calculates the transposed product of two matrices. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the product and transposition of two matrices.</param>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.RotationAxis(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Builds a matrix that rotates around an arbitrary axis. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="axisRotation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the axis about which to rotate the matrix.</param>
      <param name="angle" />
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.RotationQuaternion(Microsoft.DirectX.Matrix,Microsoft.DirectX.Quaternion)">
      <summary>Builds a matrix from a quaternion. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="quat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Scaling(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix that scales along the x-axis, y-axis, and z-axis. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Scaled <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure containing three values that represent the scaling factors applied along the x-axis, y-axis, and z-axis.</param>
      <returns>Scaled <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Transformation(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Builds a transformation matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Resulting <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="scalingCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the scaling center point.</param>
      <param name="scalingRotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the scaling rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no scaling.</param>
      <param name="scalingFactor">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the scaling vector.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a point identifying the center of rotation.</param>
      <param name="rotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no rotation.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the translation. Use <see cref="P:Microsoft.DirectX.Vector3.Empty" /> to specify no translation.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Transformation2D(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2)">
      <summary>Builds a 2-D transformation matrix in the xy plane. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains the transformation matrix.</param>
      <param name="scalingCenter">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a point identifying the scaling center.</param>
      <param name="scalingRotation">Scaling rotation factor. Use a zero value to specify no rotation.</param>
      <param name="scaling">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a point identifying the scale. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no scaling.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a point identifying the rotation center.</param>
      <param name="rotation">Angle of rotation, in radians.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that identifies the translation. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no translation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains the transformation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Matrix.Translation(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix using specified offsets. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains a translated transformation matrix.</param>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the x-coordinate, y-coordinate, and z-coordinate offsets.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains a translated transformation matrix.</returns>
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods.Plane">
      <summary>Describes and manipulates a plane. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="T:Microsoft.DirectX.Plane" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.Dot(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector4)">
      <summary>Computes the dot product of a plane and a vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pPlane">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="pV">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that is the dot product of the plane and the vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.DotCoordinate(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
      <summary>Computes the dot product of a plane and a 3-D vector. The w parameter of the vector is assumed to be 1. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pPlane">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="pV">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that is the dot product of the plane and the vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.DotNormal(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
      <summary>Computes the dot product of a plane and a 3-D vector. The w parameter of the vector is assumed to be 0. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pPlane" />
      <param name="pV" />
      <returns>A <see cref="T:System.Single" /> value that represents the dot product of the plane and the 3-D vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.FromPointNormal(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Constructs a plane from a point and a normal. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Plane" /> structure constructed from the point and the normal.</param>
      <param name="pPoint">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the point used to construct the plane.</param>
      <param name="pNormal">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the normal used to construct the plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure constructed from the point and the normal.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.FromPoints(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Constructs a plane from three points. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Plane" /> structure constructed from the given points.</param>
      <param name="pPoint1">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines one of the points used to construct the plane.</param>
      <param name="pPoint2">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines one of the points used to construct the plane.</param>
      <param name="pPoint3">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines one of the points used to construct the plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure constructed from the given points.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.IntersectLine(Microsoft.DirectX.Vector3,Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Finds the intersection between a plane and a line. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the intersection between the specified plane and line.</param>
      <param name="pPlane">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="pV1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines a line starting point.</param>
      <param name="pV2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines a line ending point.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the intersection between the specified plane and line.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.Normalize(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
      <summary>Returns the normal of a plane. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the normal of the plane.</param>
      <param name="pPlane">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the normal of the plane.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.Scale(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane,System.Single)">
      <summary>Scales the plane with a given scaling factor. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">The <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the scaled plane.</param>
      <param name="pPlane">Pointer to the source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="s">Scale factor.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the scaled plane.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.Transform(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane,Microsoft.DirectX.Matrix)">
      <summary>Transforms a plane by a matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the transformed plane.</param>
      <param name="pPlane">Input <see cref="T:Microsoft.DirectX.Plane" /> structure, which contains the plane to be transformed. The vector (a,b,c) that describes the plane must be normalized before this method is called.</param>
      <param name="pMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure, which contains the transformation values. This matrix must contain the inverse transpose of the transformation values.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the transformed plane.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Plane.TransformArray(Microsoft.DirectX.Plane,System.Int32,Microsoft.DirectX.Plane,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms an array of planes by a matrix. The vectors that describe each plane must be normalized. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the transformed plane.</param>
      <param name="outStride">The stride of each transformed plane.</param>
      <param name="pPlane">Input <see cref="T:Microsoft.DirectX.Plane" /> structure, which contains the plane to be transformed. The vector (a,b,c) that describes the plane must be normalized before this method is called.</param>
      <param name="vectorStride">The stride of each non-transformed plane.</param>
      <param name="pMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure, which contains the transformation values. This matrix must contain the inverse transpose of the transformation values.</param>
      <param name="count">The number of planes to transform.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the transformed plane.</returns>
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods.Quaternion">
      <summary>Describes and manipulates a quaternion. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.BaryCentric(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single,System.Single)">
      <summary>Returns a quaternion in barycentric coordinates. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Resulting <see cref="T:Microsoft.DirectX.Quaternion" /> structure in barycentric coordinates.</param>
      <param name="pQuat1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuat2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuat3">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Quaternion" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Conjugate(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Returns the conjugate of a quaternion. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the conjugate of the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Conjugate(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</param>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the conjugate of the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Conjugate(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Dot(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Returns the dot product of two quaternions. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pQuat1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuat2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>Dot product of two quaternions.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Exp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Calculates the exponential. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the exponential of the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Exp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</param>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the exponential of the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Exp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Invert(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Conjugates and re-normalizes a quaternion. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the inverse of the quaternion passed into the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Invert(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</param>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the inverse of the quaternion passed into the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Invert(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Length(Microsoft.DirectX.Quaternion)">
      <summary>Returns the length of a quaternion. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the quaternion's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.LengthSq(Microsoft.DirectX.Quaternion)">
      <summary>Returns the square of a quaternion's length. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the quaternion's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Ln(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Calculates the natural logarithm. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the natural logarithm of the quaternion passed into the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Ln(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</param>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the natural logarithm of the quaternion passed into the <see cref="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Ln(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Multiplies two quaternions. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the product of two quaternions.</param>
      <param name="pQuat1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuat2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the product of two quaternions.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Normalize(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Returns the normal of a quaternion. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the normal of the quaternion.</param>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the normal of the quaternion.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.RotationAxis(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Builds a quaternion that is rotated around an arbitrary axis. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is rotated around the specified axis.</param>
      <param name="pAxis">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the axis about which to rotate the quaternion.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is rotated around the specified axis.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.RotationMatrix(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Matrix)">
      <summary>Builds a quaternion from a rotation matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure built from a rotation matrix.</param>
      <param name="pMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure that defines the rotation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure built from a rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Slerp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the interpolation.</param>
      <param name="pQuat1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuat2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="t">A <see cref="T:System.Single" /> value that indicates how far to interpolate between the quaternions.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.Squad(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
      <summary>Interpolates between quaternions, using spherical quadrangle interpolation. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the spherical quadrangle interpolation.</param>
      <param name="pQuat1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuata">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuatb">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="pQuatc">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="t">A <see cref="T:System.Single" /> value that indicates how far to interpolate between the quaternions.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the spherical quadrangle interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.SquadSetup(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Sets up control points for spherical quadrangle interpolation. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOutA">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the outA value.</param>
      <param name="pOutB">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the outB value.</param>
      <param name="pOutC">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the outC value.</param>
      <param name="pQ0">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q0 input control point.</param>
      <param name="pQ1">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q1 input control point.</param>
      <param name="pQ2">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q2 input control point.</param>
      <param name="pQ3">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q3 input control point.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Quaternion.ToAxisAngle(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Computes a quaternion's axis and angle of rotation. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pQuat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure. See Remarks.</param>
      <param name="pAxis">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the quaternion's axis of rotation.</param>
      <param name="pAngle">A <see cref="T:System.Single" /> value that identifies the quaternion's angle of rotation, in radians.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods.Vector2">
      <summary>Describes and manipulates a vector in two-dimensional (2-D) space. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="T:Microsoft.DirectX.Vector2" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Add(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Adds two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Sum of the two source <see cref="T:Microsoft.DirectX.Vector2" /> structures.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <returns>Sum of the two source <see cref="T:Microsoft.DirectX.Vector2" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.BaryCentric(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using specified 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure in barycentric coordinates.</param>
      <param name="pV1">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pV2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pV3">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.CatmullRom(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using specified 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the Catmull-Rom interpolation.</param>
      <param name="pPosition1">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="pPosition2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="pPosition3">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="pPosition4">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Ccw(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns the z component by calculating the cross product of two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>The z component.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Dot(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Determines the dot product of two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>Dot product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Hermite(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation using specified 2-D vectors.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the Hermite spline interpolation.</param>
      <param name="pPosition">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="pTangent">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a tangent vector.</param>
      <param name="pPosition2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="pTangent2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a tangent vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Length(Microsoft.DirectX.Vector2)">
      <summary>Returns the length of a 2-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>Vector length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.LengthSq(Microsoft.DirectX.Vector2)">
      <summary>Returns the square of the length of a 2-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>Vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Lerp(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the linear interpolation.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="interpolater">Parameter that linearly interpolates between the vectors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Maximize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the largest components of two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is made up of the largest components of the two vectors.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is made up of the largest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Minimize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the smallest components of two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is made up of the smallest components of the two vectors.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is made up of the smallest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Normalize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns the normalized version of a 2-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the normalized version of the vector.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the normalized version of the vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Scale(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Scales a 2-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the scaled vector.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="scalingFactor">Scaling value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the scaled vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Subtract(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Subtracts two 2-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the operation.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure to the left of the subtraction operator.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.Transform(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.TransformArray(Microsoft.DirectX.Vector4,System.Int32,Microsoft.DirectX.Vector2,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms an array of 2-D vectors by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</param>
      <param name="outStride">Stride between vectors in the output data stream.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.TransformCoordinate(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix, projecting the result back into w = 1. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents the results of the method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents the results of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.TransformCoordinateArray(Microsoft.DirectX.Vector2,System.Int32,Microsoft.DirectX.Vector2,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms array (x, y, 0, 1) by a given matrix, and projects the result back into w = 1. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents the results of the method.</param>
      <param name="outStride">The stride of each transformed array.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.TransformNormal(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that contains the results of this method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that contains the results of this method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector2.TransformNormalArray(Microsoft.DirectX.Vector2,System.Int32,Microsoft.DirectX.Vector2,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms array (x, y, 0, 0) by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the method.</param>
      <param name="outStride">Stride between vectors in the output data stream.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the method.</returns>
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods.Vector3">
      <summary>Describes and manipulates a vector in three-dimensional (3-D) space. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Add(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Adds two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Sum of the two source <see cref="T:Microsoft.DirectX.Vector3" /> structures.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector3" />.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector3" />.</param>
      <returns>Sum of the two source <see cref="T:Microsoft.DirectX.Vector3" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.BaryCentric(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using specified 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure in barycentric coordinates.</param>
      <param name="pV1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pV2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pV3">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.CatmullRom(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using specified 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the Catmull-Rom interpolation.</param>
      <param name="pPosition1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="pPosition2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="pPosition3">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="pPosition4">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Cross(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines the cross product of two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the cross product of two 3-D vectors.</param>
      <param name="pV1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pV2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the cross product of two 3-D vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Dot(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines the dot product of two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that is the dot product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Hermite(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation using the specified 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the Hermite spline interpolation.</param>
      <param name="pPosition">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="pTangent">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a tangent vector.</param>
      <param name="pPosition2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="pTangent2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a tangent vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Length(Microsoft.DirectX.Vector3)">
      <summary>Returns the length of a 3-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that contains the vector's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.LengthSq(Microsoft.DirectX.Vector3)">
      <summary>Returns the square of the length of a 3-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that contains the vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Lerp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the linear interpolation.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="interpolater">Parameter that linearly interpolates between the vectors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Maximize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the largest components of two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is made up of the largest components of the two vectors.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is made up of the largest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Minimize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the smallest components of two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is made up of the smallest components of the two vectors.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is made up of the smallest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Normalize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns the normalized version of a 3-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the normalized version of the specified vector.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the normalized version of the specified vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Scale(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Scales a 3-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the scaled vector.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="scalingFactor">Scaling value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the scaled vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Subtract(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Subtracts two 3-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the operation.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure to the left of the subtraction operator.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.Transform(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector or an array of 3-D vectors by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.TransformArray(Microsoft.DirectX.Vector4,System.Int32,Microsoft.DirectX.Vector3,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms an array of 3-D vectors by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</param>
      <param name="outStride">Stride between vectors in the output data stream.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure array.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.TransformCoordinate(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector by a given matrix, projecting the result back into w = 1. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the results of the method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the results of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.TransformCoordinateArray(Microsoft.DirectX.Vector3,System.Int32,Microsoft.DirectX.Vector3,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms array (x, y, z, 1) by a given matrix, and projects the result back into w = 1. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the results of the method.</param>
      <param name="outStride">Stride between vectors in the output data stream.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure array.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.TransformNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector normal by the given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the results of this method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the results of this method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector3.TransformNormalArray(Microsoft.DirectX.Vector3,System.Int32,Microsoft.DirectX.Vector3,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms array (x, y, z, 0) by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the method.</param>
      <param name="outStride">Stride between vectors in the output data stream.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure array.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the method.</returns>
    </member>
    <member name="T:Microsoft.DirectX.UnsafeNativeMethods.Vector4">
      <summary>Describes and manipulates a vector in four-dimensional (4-D) space. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the methods of the <see cref="T:Microsoft.DirectX.Vector4" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Add(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Adds two 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">Sum of the two <see cref="T:Microsoft.DirectX.Vector4" /> structures.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector4" />.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector4" />.</param>
      <returns>Sum of the two <see cref="T:Microsoft.DirectX.Vector4" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.BaryCentric(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using the specified 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure in barycentric coordinates.</param>
      <param name="pV1">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pV2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pV3">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.CatmullRom(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using specified 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the Catmull-Rom interpolation.</param>
      <param name="pPosition1">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="pPosition2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="pPosition3">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="pPosition4">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Cross(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Determines the cross product in four dimensions. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the cross product.</param>
      <param name="pV1">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pV2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pV3">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the cross product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Dot(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Determines the dot product of two 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the dot product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Hermite(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation using the specified 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the Hermite spline interpolation.</param>
      <param name="pPosition">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="pTangent">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a tangent vector.</param>
      <param name="pPosition2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="pTangent2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a tangent vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Length(Microsoft.DirectX.Vector4)">
      <summary>Returns the length of a 4-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that indicates the vector's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.LengthSq(Microsoft.DirectX.Vector4)">
      <summary>Returns the square of the length of a 4-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that indicates the vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Lerp(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the linear interpolation.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="interpolater">Parameter that linearly interpolates between the vectors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Maximize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the largest components of two 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is made up of the largest components of the two vectors.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is made up of the largest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Minimize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the smallest components of two 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is made up of the smallest components of the two vectors.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is made up of the smallest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Normalize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns the normalized version of a 4-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the normalized version of the specified vector.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the normalized version of the specified vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Scale(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Scales a 4-D vector. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the scaled vector.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="scalingFactor">Scaling value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the scaled vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Subtract(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Subtracts two 4-D vectors. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the operation.</param>
      <param name="pLeft">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure to the left of the subtraction operator.</param>
      <param name="pRight">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.Transform(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector or an array of 4-D vectors by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.UnsafeNativeMethods.Vector4.TransformArray(Microsoft.DirectX.Vector4,System.Int32,Microsoft.DirectX.Vector4,System.Int32,Microsoft.DirectX.Matrix,System.Int32)">
      <summary>Transforms a vector array by a given matrix. For programming in Microsoft Visual Basic .NET or Microsoft JScript .NET, use the equivalent method in the <see cref="N:Microsoft.DirectX" /> structures.</summary>
      <param name="pOut">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</param>
      <param name="outStride">Stride between vectors in the output data stream.</param>
      <param name="pSource">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure array.</param>
      <param name="vectorStride">Stride between vectors in the input data stream.</param>
      <param name="pSourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="count">Number of elements in the array.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Matrix">
      <summary>Describes and manipulates a matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M11">
      <summary>Retrieves or sets the element in the first row and the first column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M12">
      <summary>Retrieves or sets the element in the first row and the second column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M13">
      <summary>Retrieves or sets the element in the first row and the third column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M14">
      <summary>Retrieves or sets the element in the first row and the fourth column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M21">
      <summary>Retrieves or sets the element in the second row and the first column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M22">
      <summary>Retrieves or sets the element in the second row and the second column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M23">
      <summary>Retrieves or sets the element in the second row and the third column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M24">
      <summary>Retrieves or sets the element in the second row and the fourth column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M31">
      <summary>Retrieves or sets the element in the third row and the first column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M32">
      <summary>Retrieves or sets the element in the third row and the second column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M33">
      <summary>Retrieves or sets the element in the third row and the third column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M34">
      <summary>Retrieves or sets the element in the third row and the fourth column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M41">
      <summary>Retrieves or sets the element in the fourth row and the first column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M42">
      <summary>Retrieves or sets the element in the fourth row and the second column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M43">
      <summary>Retrieves or sets the element in the fourth row and the third column of the matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M44">
      <summary>Retrieves or sets the element in the fourth row and the fourth column of the matrix.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Add(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Adds two matrices.</summary>
      <param name="left">A <see cref="T:Microsoft.DirectX.Matrix" /> instance on the left side of the addition operator.</param>
      <param name="right">A <see cref="T:Microsoft.DirectX.Matrix" /> instance on the right side of the addition operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> instance that represents the result of the addition.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.AffineTransformation(System.Single,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Builds a 3-D affine transformation matrix.</summary>
      <param name="scaling">Scaling factor. A value of zero indicates no scaling.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that indicates the point at the center of rotation.</param>
      <param name="rotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no rotation.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the translation. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no translation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.AffineTransformation2D(System.Single,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2)">
      <summary>Builds a 2-D affine transformation matrix in the xy plane.</summary>
      <param name="scaling">Scaling factor. A value of zero indicates no scaling.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents a point identifying the center of rotation. Use an empty <see cref="T:Microsoft.DirectX.Vector2" /> for no rotation.</param>
      <param name="rotation">Angle of rotation. A value of zero indicates no rotation</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents the translation. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no translation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is an affine transformation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Matrix" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Invert">
      <summary>Calculates the inverse of a matrix.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Invert(Microsoft.DirectX.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Invert(System.Single@,Microsoft.DirectX.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="determinant">A <see cref="T:System.Single" /> value that contains the determinant of the matrix. If the determinant is not needed, the parameter is omitted.</param>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.LookAtLH(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Builds a left-handed look-at matrix.</summary>
      <param name="cameraPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera point. This value is used in translation.</param>
      <param name="cameraTarget">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera look-at target.</param>
      <param name="cameraUpVector">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the up direction of the current world, usually [0, 1, 0].</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a left-handed look-at matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.LookAtRH(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Builds a right-handed look-at matrix.</summary>
      <param name="cameraPosition">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera point. This value is used in translation.</param>
      <param name="cameraTarget">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the camera look-at target.</param>
      <param name="cameraUpVector">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the up direction of the current world, usually [0, 1, 0].</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a right-handed look-at matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure to multiply by the current instance.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the product of two matrices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.MultiplyTranspose(Microsoft.DirectX.Matrix)">
      <summary>Calculates the transposed product of two matrices.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure to multiply and transpose with the current instance.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.MultiplyTranspose(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Calculates the transposed product of two matrices.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the product and transposition of two matrices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Addition(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Adds two instances of the <see cref="T:Microsoft.DirectX.Matrix" /> structure.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the left of the addition operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the right of the addition operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Equality(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Inequality(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is the product of two matrices.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Subtraction(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Subtracts two instances of the <see cref="T:Microsoft.DirectX.Matrix" /> structure.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the left of the subtraction operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Matrix" /> structure to the right of the subtraction operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a left-handed orthogonal projection matrix.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="znearPlane">Minimum z-value of the view volume, which is referred to as z-near.</param>
      <param name="zfarPlane">Maximum z-value of the view volume, which is referred to as z-far.</param>
      <returns>Pointer to a <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a left-handed orthogonal projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, left-handed orthogonal projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="znearPlane">Minimum z-value of the view volume.</param>
      <param name="zfarPlane">Maximum z-value of the view volume.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a customized, left-handed orthogonal projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, right-handed orthogonal projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Maximum y-value of the view volume.</param>
      <param name="top">Minimum y-value of the view volume.</param>
      <param name="znearPlane">Minimum z-value of the view volume.</param>
      <param name="zfarPlane">Maximum z-value of the view volume.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a customized, right-handed orthogonal projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a right-handed orthogonal projection matrix.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="znearPlane">Minimum z-value of the view volume.</param>
      <param name="zfarPlane">Maximum z-value of the view volume.</param>
      <returns>Pointer to a <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a right-handed orthogonal projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a left-handed perspective projection matrix based on a field of view.</summary>
      <param name="fieldOfViewY">Field of view in the y direction, in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as the view space width divided by height.</param>
      <param name="znearPlane">Z-value of the near view plane.</param>
      <param name="zfarPlane">Z-value of the far view plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a left-handed perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a right-handed perspective projection matrix based on a field of view (FOV).</summary>
      <param name="fieldOfViewY">Field of view in the y direction, in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as the view space width divided by height.</param>
      <param name="znearPlane">Z-value of the near view plane.</param>
      <param name="zfarPlane">Z-value of the far view plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a right-handed perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a left-handed perspective projection matrix.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="znearPlane">Z-value of the near view plane.</param>
      <param name="zfarPlane">Z-value of the far view plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a left-handed perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, left-handed perspective projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="znearPlane">Minimum z-value of the view volume.</param>
      <param name="zfarPlane">Maximum z-value of the view volume.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a customized, left-handed perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, right-handed perspective projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="znearPlane">Minimum z-value of the view volume.</param>
      <param name="zfarPlane">Maximum z-value of the view volume.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a customized, right-handed perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a right-handed perspective projection matrix.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="znearPlane">Z-value of the near view plane.</param>
      <param name="zfarPlane">Z-value of the far view plane.</param>
      <returns>Pointer to a <see cref="T:Microsoft.DirectX.Matrix" /> structure that is a right-handed perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Reflect(Microsoft.DirectX.Plane)">
      <summary>Builds a matrix that reflects the coordinate system about a plane.</summary>
      <param name="plane">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Rotates the matrix around an arbitrary axis.</summary>
      <param name="axisRotation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the axis about which to rotate the matrix.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateQuaternion(Microsoft.DirectX.Quaternion)">
      <summary>Rotates a matrix from a quaternion.</summary>
      <param name="quat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure that defines the rotation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateX(System.Single)">
      <summary>Rotates a matrix around the x-axis.</summary>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateY(System.Single)">
      <summary>Rotates a matrix around the y-axis.</summary>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Rotates a matrix with a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateZ(System.Single)">
      <summary>Rotates the matrix around the z-axis.</summary>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when viewed from the rotation axis (positive side) toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Builds a matrix that rotates around an arbitrary axis.</summary>
      <param name="axisRotation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the axis about which to rotate the matrix.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationQuaternion(Microsoft.DirectX.Quaternion)">
      <summary>Builds a matrix from a quaternion.</summary>
      <param name="quat">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationX(System.Single)">
      <summary>Builds a matrix that rotates around the x-axis.</summary>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationY(System.Single)">
      <summary>Builds a matrix that rotates around the y-axis.</summary>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix with a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationZ(System.Single)">
      <summary>Builds a matrix that rotates around the z-axis.</summary>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when viewed from the rotation axis (positive side) toward the origin.</param>
      <returns>Rotated <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scale(Microsoft.DirectX.Vector3)">
      <summary>Scales the matrix along the x-axis, y-axis, and z-axis.</summary>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure containing three values that represent the scaling factors applied along the x-axis, y-axis, and z-axis.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scale(System.Single,System.Single,System.Single)">
      <summary>Scales the matrix along the x-axis, y-axis, and z-axis.</summary>
      <param name="x">Scaling factor that is applied along the x-axis.</param>
      <param name="y">Scaling factor that is applied along the y-axis.</param>
      <param name="z">Scaling factor that is applied along the z-axis.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scaling(Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix that scales along the x-axis, y-axis, and z-axis.</summary>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure containing three values that represent the scaling factors applied along the x-axis, y-axis, and z-axis.</param>
      <returns>Scaled <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scaling(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix that scales along the x-axis, y-axis, and z-axis.</summary>
      <param name="x">Scaling factor that is applied along the x-axis.</param>
      <param name="y">Scaling factor that is applied along the y-axis.</param>
      <param name="z">Scaling factor that is applied along the z-axis.</param>
      <returns>Scaled <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Shadow(Microsoft.DirectX.Vector4,Microsoft.DirectX.Plane)">
      <summary>Builds a matrix that flattens geometry into a plane.</summary>
      <param name="light">A <see cref="T:Microsoft.DirectX.Vector4" /> structure that describes the light's position.</param>
      <param name="plane">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Subtract(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Subtracts one matrix from another.</summary>
      <param name="left">A <see cref="T:Microsoft.DirectX.Matrix" /> instance on the left side of the subtraction operation.</param>
      <param name="right">A <see cref="T:Microsoft.DirectX.Matrix" /> instance on the right side of the subtraction operation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> instance that represents the result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transform(Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Transforms the matrix.</summary>
      <param name="scalingCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the scaling center point.</param>
      <param name="scalingRotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the scaling rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no scaling.</param>
      <param name="scalingFactor">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the scaling vector.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a point that identifies the center of rotation.</param>
      <param name="rotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no rotation.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the translation. Use <see cref="P:Microsoft.DirectX.Vector3.Empty" /> to specify no translation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transformation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Builds a transformation matrix.</summary>
      <param name="scalingCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the scaling center point.</param>
      <param name="scalingRotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the scaling rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no scaling.</param>
      <param name="scalingFactor">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the scaling vector.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a point identifying the center of rotation.</param>
      <param name="rotation">A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that specifies the rotation. Use <see cref="P:Microsoft.DirectX.Quaternion.Identity" /> to specify no rotation.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the translation. Use <see cref="P:Microsoft.DirectX.Vector3.Empty" /> to specify no translation.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Matrix" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transformation2D(Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2)">
      <summary>Builds a 2-D transformation matrix in the xy plane.</summary>
      <param name="scalingCenter">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a point identifying the scaling center.</param>
      <param name="scalingRotation">Scaling rotation factor. Use a zero value to specify no rotation.</param>
      <param name="scaling">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a point identifying the scale. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no scaling.</param>
      <param name="rotationCenter">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a point identifying the rotation center.</param>
      <param name="rotation">Angle of rotation, in radians.</param>
      <param name="translation">A <see cref="T:Microsoft.DirectX.Vector2" /> structure that identifies the translation. Use <see cref="P:Microsoft.DirectX.Vector2.Empty" /> to specify no translation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains the transformation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translate(Microsoft.DirectX.Vector3)">
      <summary>Translates the matrix using specified offsets.</summary>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the x-coordinate, y-coordinate, and z-coordinate offsets.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translate(System.Single,System.Single,System.Single)">
      <summary>Translates the matrix using specified offsets.</summary>
      <param name="x">X-coordinate offset.</param>
      <param name="y">Y-coordinate offset.</param>
      <param name="z">Z-coordinate offset.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translation(Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix using specified offsets.</summary>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the x-coordinate, y-coordinate, and z-coordinate offsets.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains a translated transformation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translation(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix using specified offsets.</summary>
      <param name="x">X-coordinate offset.</param>
      <param name="y">Y-coordinate offset.</param>
      <param name="z">Z-coordinate offset.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that contains a translated transformation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transpose(Microsoft.DirectX.Matrix)">
      <summary>Transposes the matrix using a source matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.TransposeMatrix(Microsoft.DirectX.Matrix)">
      <summary>Returns the matrix transpose of a given matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> object that is the matrix transpose of the matrix.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Matrix.Determinant">
      <summary>Retrieves the determinant of the matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Matrix.Identity">
      <summary>Retrieves the identity of the matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Matrix.Zero">
      <summary>Retrieves an empty matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Plane">
      <summary>Describes and manipulates a plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.A">
      <summary>Retrieves or sets the 'A' coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.B">
      <summary>Retrieves or sets the 'B' coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.C">
      <summary>Retrieves or sets the 'C' coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.D">
      <summary>Retrieves or sets the 'D' coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Plane.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane" /> class.</summary>
      <param name="valuePointA">A <see cref="T:System.Single" /> value used to set the initial value of the <see cref="F:Microsoft.DirectX.Plane.A" /> field.</param>
      <param name="valuePointB">A <see cref="T:System.Single" /> value used to set the initial value of the <see cref="F:Microsoft.DirectX.Plane.B" /> field.</param>
      <param name="valuePointC">A <see cref="T:System.Single" /> value used to set the initial value of the <see cref="F:Microsoft.DirectX.Plane.C" /> field.</param>
      <param name="valuePointD">A <see cref="T:System.Single" /> value used to set the initial value of the <see cref="F:Microsoft.DirectX.Plane.D" /> field.</param>
    </member>
    <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Vector3)">
      <summary>Computes the dot product of a plane and a vector.</summary>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that is the dot product of the plane and the vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Vector4)">
      <summary>Computes the dot product of a plane and a vector.</summary>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that is the dot product of the plane and the vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.DotNormal(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
      <summary>Computes the dot product of a plane and a 3-D vector. The w parameter of the vector is assumed to be 0.</summary>
      <param name="p">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the dot product of the plane and the 3-D vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.FromPointNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Constructs a plane from a point and a normal.</summary>
      <param name="point">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the point used to construct the plane.</param>
      <param name="normal">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines the normal used to construct the plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure constructed from the point and the normal.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.FromPoints(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Constructs a plane from three points.</summary>
      <param name="p1">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines one of the points used to construct the plane.</param>
      <param name="p2">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines one of the points used to construct the plane.</param>
      <param name="p3">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines one of the points used to construct the plane.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure constructed from the given points.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.IntersectLine(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Finds the intersection between a plane and a line.</summary>
      <param name="p">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="v1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines a line starting point.</param>
      <param name="v2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that defines a line ending point.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the intersection between the specified plane and line.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.Normalize">
      <summary>Returns the normal of a plane.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Normalize(Microsoft.DirectX.Plane)">
      <summary>Returns the normal of a plane.</summary>
      <param name="p">Source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the normal of the plane.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.op_Equality(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Plane" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Plane" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.op_Inequality(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Plane" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Plane" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.Scale(System.Single)">
      <summary>Scales the plane with a given scaling factor.</summary>
      <param name="s">Scale factor.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Scale(Microsoft.DirectX.Plane,System.Single)">
      <summary>Scales the plane with a given scaling factor.</summary>
      <param name="p">Pointer to the source <see cref="T:Microsoft.DirectX.Plane" /> structure.</param>
      <param name="s">Scale factor.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the scaled plane.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Plane.Transform(Microsoft.DirectX.Matrix)">
      <summary>Transforms a plane by a matrix.</summary>
      <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure, which contains the transformation values. This matrix must contain the inverse transpose of the transformation values.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Transform(Microsoft.DirectX.Plane,Microsoft.DirectX.Matrix)">
      <summary>Transforms a plane by a matrix.</summary>
      <param name="p">Input <see cref="T:Microsoft.DirectX.Plane" /> structure, which contains the plane to be transformed. The vector (a,b,c) that describes the plane must be normalized before this method is called.</param>
      <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure, which contains the transformation values. This matrix must contain the inverse transpose of the transformation values.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Plane" /> structure that represents the transformed plane.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Plane.Empty">
      <summary>Retrieves an empty plane.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Quaternion">
      <summary>Describes a quaternion.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.W">
      <summary>Retrieves or sets the w component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.X">
      <summary>Retrieves or sets the x component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.Y">
      <summary>Retrieves or sets the y component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.Z">
      <summary>Retrieves or sets the z component of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Add(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Adds two quaternions.</summary>
      <param name="m1">Source <see cref="T:Microsoft.DirectX.Quaternion" />.</param>
      <param name="m2">Source <see cref="T:Microsoft.DirectX.Quaternion" />.</param>
      <returns>Sum of the two source <see cref="T:Microsoft.DirectX.Quaternion" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.BaryCentric(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single,System.Single)">
      <summary>Returns a quaternion in barycentric coordinates.</summary>
      <param name="q1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="q2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="q3">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Quaternion" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Conjugate(Microsoft.DirectX.Quaternion)">
      <summary>Returns the conjugate of a quaternion.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the conjugate of the <see cref="M:Microsoft.DirectX.Quaternion.Conjugate(Microsoft.DirectX.Quaternion)" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion" /> class.</summary>
      <param name="valueX">Initial <see cref="T:System.Single" /> value for the <see cref="F:Microsoft.DirectX.Quaternion.X" /> member.</param>
      <param name="valueY">Initial <see cref="T:System.Single" /> value for the <see cref="F:Microsoft.DirectX.Quaternion.Y" /> member.</param>
      <param name="valueZ">Initial <see cref="T:System.Single" /> value for the <see cref="F:Microsoft.DirectX.Quaternion.Z" /> member.</param>
      <param name="valueW">Initial <see cref="T:System.Single" /> value for the <see cref="F:Microsoft.DirectX.Quaternion.W" /> member.</param>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Dot(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Returns the dot product of two quaternions.</summary>
      <param name="v1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="v2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>Dot product of two quaternions.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Exp">
      <summary>Calculates the exponential.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Exp(Microsoft.DirectX.Quaternion)">
      <summary>Calculates the exponential.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the exponential of the <see cref="T:Microsoft.DirectX.Quaternion" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Invert">
      <summary>Conjugates and re-normalizes a quaternion.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Invert(Microsoft.DirectX.Quaternion)">
      <summary>Conjugates and re-normalizes a quaternion.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the inverse of the quaternion passed into the <see cref="M:Microsoft.DirectX.Quaternion.Invert" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Length">
      <summary>Returns the length of a quaternion.</summary>
      <returns>A <see cref="T:System.Single" /> value that represents the quaternion's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Length(Microsoft.DirectX.Quaternion)">
      <summary>Returns the length of a quaternion.</summary>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the quaternion's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.LengthSq">
      <summary>Returns the square of a quaternion's length.</summary>
      <returns>A <see cref="T:System.Single" /> value that represents the quaternion's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.LengthSq(Microsoft.DirectX.Quaternion)">
      <summary>Returns the square of a quaternion's length.</summary>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the quaternion's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Ln">
      <summary>Calculates the natural logarithm.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Ln(Microsoft.DirectX.Quaternion)">
      <summary>Calculates the natural logarithm.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the natural logarithm of the quaternion passed into the <see cref="M:Microsoft.DirectX.Quaternion.Ln" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Multiply(Microsoft.DirectX.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="m1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="m2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the product of two quaternions.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Normalize">
      <summary>Returns the normal of a quaternion.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Normalize(Microsoft.DirectX.Quaternion)">
      <summary>Returns the normal of a quaternion.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the normal of the quaternion.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Addition(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Adds two quaternions.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the addition operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the addition operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Equality(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Inequality(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Determines the product of two quaternions.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the product of two quaternions.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Subtraction(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Subtracts two quaternions.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the subtraction operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the subtraction operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotateAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Rotates a quaternion around an arbitrary axis.</summary>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the axis about which to rotate the quaternion.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotateMatrix(Microsoft.DirectX.Matrix)">
      <summary>Builds a quaternion from a rotation matrix.</summary>
      <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure that defines the rotation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotateYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a quaternion with the given yaw, pitch, and roll.</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotationAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Builds a quaternion that is rotated around an arbitrary axis.</summary>
      <param name="v">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the axis about which to rotate the quaternion.</param>
      <param name="angle">Angle of rotation, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is rotated around the specified axis.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotationMatrix(Microsoft.DirectX.Matrix)">
      <summary>Builds a quaternion from a rotation matrix.</summary>
      <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure that defines the rotation.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure built from a rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a quaternion with the given yaw, pitch, and roll.</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure with the specified yaw, pitch, and roll.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Slerp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="q1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="q2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="t">A <see cref="T:System.Single" /> value that indicates how far to interpolate between the quaternions.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Squad(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
      <summary>Interpolates between quaternions, using spherical quadrangle interpolation.</summary>
      <param name="q1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="a">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="b">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="c">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure.</param>
      <param name="t">A <see cref="T:System.Single" /> value that indicates how far to interpolate between the quaternions.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the spherical quadrangle interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.SquadSetup(Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Sets up control points for spherical quadrangle interpolation.</summary>
      <param name="outA">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the outA value.</param>
      <param name="outB">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the outB value.</param>
      <param name="outC">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the outC value.</param>
      <param name="q0">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q0 input control point.</param>
      <param name="q1">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q1 input control point.</param>
      <param name="q2">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q2 input control point.</param>
      <param name="q3">A <see cref="T:Microsoft.DirectX.Quaternion" /> instance that represents the q3 input control point.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Subtract(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Subtracts two quaternion instances.</summary>
      <param name="m1">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the subtraction operator.</param>
      <param name="m2">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Quaternion" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.ToAxisAngle(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3@,System.Single@)">
      <summary>Computes a quaternion's axis and angle of rotation.</summary>
      <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion" /> structure. See Remarks.</param>
      <param name="axis">A <see cref="T:Microsoft.DirectX.Vector3" /> structure that identifies the quaternion's axis of rotation.</param>
      <param name="angle">A <see cref="T:System.Single" /> value that identifies the quaternion's angle of rotation, in radians.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Quaternion.Identity">
      <summary>Retrieves the identity quaternion.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Quaternion.Zero">
      <summary>Retrieves an empty quaternion.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Single16">
      <summary>Describes and manipulates a 16-bit floating-point value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.AdditionRounding">
      <summary>Retrieves a value that indicates the largest value that is rounded.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.DigitsOfPrecision">
      <summary>Retrieves a value that indicates the number of decimal digits of precision for the <see cref="T:Microsoft.DirectX.Single16" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.Epsilon">
      <summary>Retrieves the smallest value that a <see cref="T:System.Single" /> can hold.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.ExponentRadix">
      <summary>Retrieves the exponent radix value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MantissaBits">
      <summary>Retrieves the number of bits in a mantissa.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MaxBinaryExponent">
      <summary>Retrieves the maximum binary exponent.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MaxDecimalExponent">
      <summary>Retrieves the maximum decimal exponent.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MaxValue">
      <summary>Retrieves the maximum value for this type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MinBinaryExponent">
      <summary>Retrieves the minimum binary exponent.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MinDecimalExponent">
      <summary>Retrieves the minimum decimal exponent.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Single16.MinValue">
      <summary>Retrieves the minimum value for this type.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Single16.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Single16" /> class.</summary>
      <param name="value">A <see cref="T:System.Single" /> value that is used to set the initial value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Single16.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Single16.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Single16.op_Equality(Microsoft.DirectX.Single16,Microsoft.DirectX.Single16)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Single16.op_Inequality(Microsoft.DirectX.Single16,Microsoft.DirectX.Single16)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Quaternion" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Single16.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Vector2">
      <summary>Describes and manipulates a vector in two-dimensional (2-D) space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector2.X">
      <summary>Retrieves or sets the x component of a 2-D vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector2.Y">
      <summary>Retrieves or sets the y component of a 2-D vector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Add(Microsoft.DirectX.Vector2)">
      <summary>Adds two 2-D vectors.</summary>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Add(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Adds two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" />.</param>
      <returns>Sum of the two source <see cref="T:Microsoft.DirectX.Vector2" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.BaryCentric(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using specified 2-D vectors.</summary>
      <param name="v1">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="v2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="v3">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.CatmullRom(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using specified 2-D vectors.</summary>
      <param name="position1">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="position2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="position3">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="position4">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Ccw(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns the z component by calculating the cross product of two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>The z component.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector2" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector2" /> class.</summary>
      <param name="valueX">Initial <see cref="F:Microsoft.DirectX.Vector2.X" /> value.</param>
      <param name="valueY">Initial <see cref="F:Microsoft.DirectX.Vector2.Y" /> value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Dot(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Determines the dot product of two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>Dot product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Hermite(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation using specified 2-D vectors.</summary>
      <param name="position">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="tangent">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a tangent vector.</param>
      <param name="position2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a position vector.</param>
      <param name="tangent2">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure that is a tangent vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Length">
      <summary>Returns the length of a 2-D vector.</summary>
      <returns>Vector length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Length(Microsoft.DirectX.Vector2)">
      <summary>Returns the length of a 2-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>Vector length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.LengthSq">
      <summary>Returns the square of the length of a 2-D vector.</summary>
      <returns>Vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.LengthSq(Microsoft.DirectX.Vector2)">
      <summary>Returns the square of the length of a 2-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>Vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Lerp(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="interpolater">Parameter that linearly interpolates between the vectors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Maximize(Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the largest components of two 2-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Maximize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the largest components of two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is made up of the largest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Minimize(Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the smallest components of two 2-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Minimize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the smallest components of two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is made up of the smallest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Multiply(Microsoft.DirectX.Vector2,System.Single)">
      <summary>Multiplies the current 2-D vector with a single value.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="s">Source <see cref="T:System.Single" /> value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> that is the result of the <see cref="M:Microsoft.DirectX.Vector2.Multiply" /> parameter multiplied by the <see cref="M:Microsoft.DirectX.Vector2.Multiply" /> parameter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Multiply(System.Single)">
      <summary>Multiplies the current 2-D vector with a single value.</summary>
      <param name="s">Source <see cref="T:System.Single" /> value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Normalize">
      <summary>Returns the normalized version of a 2-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Normalize(Microsoft.DirectX.Vector2)">
      <summary>Returns the normalized version of a 2-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the normalized version of the vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Addition(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Adds two 2-D vectors.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the left of the addition operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the right of the addition operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Vector2" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Equality(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Inequality(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Multiply(System.Single,Microsoft.DirectX.Vector2)">
      <summary>Determines the product of a single value and a 2-D vector.</summary>
      <param name="right">Source <see cref="T:System.Single" /> structure.</param>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the product of the <see cref="M:Microsoft.DirectX.Vector2.op_Multiply" /> and <see cref="M:Microsoft.DirectX.Vector2.op_Multiply" /> parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Multiply(Microsoft.DirectX.Vector2,System.Single)">
      <summary>Determines the product of a single value and a 2-D vector.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="right">Source <see cref="T:System.Single" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the product of the <see cref="M:Microsoft.DirectX.Vector2.op_Multiply" /> and <see cref="M:Microsoft.DirectX.Vector2.op_Multiply" /> parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Subtraction(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Subtracts two 2-D vectors.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the left of the subtraction operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector2" /> structure to the right of the subtraction operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Vector2" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_UnaryNegation(Microsoft.DirectX.Vector2)">
      <summary>Negates the vector.</summary>
      <param name="vec">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the negation operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Scale(System.Single)">
      <summary>Scales a 2-D vector.</summary>
      <param name="scalingFactor">Scaling value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Scale(Microsoft.DirectX.Vector2,System.Single)">
      <summary>Scales a 2-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="scalingFactor">Scaling value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the scaled vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Subtract(Microsoft.DirectX.Vector2)">
      <summary>Subtracts two 2-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> a structure to subtract from the current <see cref="T:Microsoft.DirectX.Vector2" /> instance.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Subtract(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Subtracts two 2-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure to the left of the subtraction operator.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Transform(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector2" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector4" /> structures that are the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Transform(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix, projecting the result back into w = 1.</summary>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix, projecting the result back into w = 1.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector2" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector2" /> structures that represent the results of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector or an array of 2-D vectors by a given matrix, projecting the result back into w = 1.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that represents the results of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by a given matrix.</summary>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by a given matrix.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector2" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector2" /> structures that contain the results of this method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by a given matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector2" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector2" /> structure that contains the results of this method.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Vector2.Empty">
      <summary>Retrieves an empty 2-D vector.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Vector3">
      <summary>Describes and manipulates a vector in three-dimensional (3-D) space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector3.X">
      <summary>Retrieves or sets the x component of a 3-D vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector3.Y">
      <summary>Retrieves or sets the y component of a 3-D vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector3.Z">
      <summary>Retrieves or sets the z component of a 3-D vector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Add(Microsoft.DirectX.Vector3)">
      <summary>Adds two 3-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Add(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Adds two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" />.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" />.</param>
      <returns>Sum of the two <see cref="T:Microsoft.DirectX.Vector3" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.BaryCentric(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using specified 3-D vectors.</summary>
      <param name="v1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="v2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="v3">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.CatmullRom(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using specified 3-D vectors.</summary>
      <param name="position1">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="position2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="position3">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="position4">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Cross(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines the cross product of two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the cross product of two 3-D vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3" /> class.</summary>
      <param name="valueX">Initial <see cref="F:Microsoft.DirectX.Vector3.X" /> value.</param>
      <param name="valueY">Initial <see cref="F:Microsoft.DirectX.Vector3.Y" /> value.</param>
      <param name="valueZ">Initial <see cref="F:Microsoft.DirectX.Vector3.Z" /> value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Dot(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines the dot product of two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that is the dot product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Hermite(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation using the specified 3-D vectors.</summary>
      <param name="position">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="tangent">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a tangent vector.</param>
      <param name="position2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a position vector.</param>
      <param name="tangent2">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure that is a tangent vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Length">
      <summary>Returns the length of a 3-D vector.</summary>
      <returns>A <see cref="T:System.Single" /> value that contains the vector's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Length(Microsoft.DirectX.Vector3)">
      <summary>Returns the length of a 3-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that contains the vector's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.LengthSq">
      <summary>Returns the square of the length of a 3-D vector.</summary>
      <returns>A <see cref="T:System.Single" /> value that contains the vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.LengthSq(Microsoft.DirectX.Vector3)">
      <summary>Returns the square of the length of a 3-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that contains the vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Lerp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="interpolater">Parameter that linearly interpolates between the vectors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the largest components of two 3-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the largest components of two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is made up of the largest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the smallest components of two 3-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the smallest components of two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is made up of the smallest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Multiply(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Multiplies a 3-D vector by a <see cref="T:System.Single" /> value.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="f">Source <see cref="T:System.Single" /> value used as a multiplier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is multiplied by the <see cref="T:System.Single" /> value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Multiply(System.Single)">
      <summary>Multiplies a 3-D vector by a <see cref="T:System.Single" /> value.</summary>
      <param name="s">Source <see cref="T:System.Single" /> value used as a multiplier.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Normalize">
      <summary>Returns the normalized version of a 3-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Normalize(Microsoft.DirectX.Vector3)">
      <summary>Returns the normalized version of a 3-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the normalized version of the specified vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Addition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the sum of the parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Equality(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector3" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector3" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Inequality(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector3" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector3" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Multiply(System.Single,Microsoft.DirectX.Vector3)">
      <summary>Determines the product of a single value and a 3-D vector.</summary>
      <param name="right">Source <see cref="T:System.Single" /> structure.</param>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the product of the <see cref="M:Microsoft.DirectX.Vector3.op_Multiply" /> and <see cref="M:Microsoft.DirectX.Vector3.op_Multiply" /> parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Multiply(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Determines the product of a single value and a 3-D vector.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="right">Source <see cref="T:System.Single" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the product of the <see cref="M:Microsoft.DirectX.Vector3.op_Multiply" /> and <see cref="M:Microsoft.DirectX.Vector3.op_Multiply" /> parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Subtraction(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Subtracts two 3-D vectors.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector3" /> structure to the left of the subtraction operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector3" /> structure to the right of the subtraction operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Vector3" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_UnaryNegation(Microsoft.DirectX.Vector3)">
      <summary>Negates the vector.</summary>
      <param name="vec">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Project(System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from object space into screen space.</summary>
      <param name="viewport">An <see cref="T:System.Object" /> structure that represents the viewport. Only <see cref="T:Microsoft.DirectX.Direct3D.Viewport" /> structures are valid for this parameter.</param>
      <param name="projection">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the projection matrix.</param>
      <param name="view">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the view matrix.</param>
      <param name="world">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the world matrix.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Project(Microsoft.DirectX.Vector3,System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from object space into screen space.</summary>
      <param name="v">The source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="viewport">An <see cref="T:System.Object" /> structure that represents the viewport. Only <see cref="T:Microsoft.DirectX.Direct3D.Viewport" /> structures are valid for this parameter.</param>
      <param name="projection">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the projection matrix.</param>
      <param name="view">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the view matrix.</param>
      <param name="world">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the world matrix.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the vector projected from object space into screen space.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Scale(System.Single)">
      <summary>Scales a 3-D vector.</summary>
      <param name="scalingFactor">Scaling value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Scale(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Scales a 3-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="scalingFactor">Scaling value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the scaled vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Subtract(Microsoft.DirectX.Vector3)">
      <summary>Subtracts two 3-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure to subtract from the current instance.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Subtract(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Subtracts two 3-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure to the left of the subtraction operator.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Transform(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector or an array of 3-D vectors by a given matrix.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector3" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector4" /> structures that are the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Transform(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector or an array of 3-D vectors by a given matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector or an array of 3-D vectors by a given matrix, projecting the result back into w = 1.</summary>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector or an array of 3-D vectors by a given matrix, projecting the result back into w = 1.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector3" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector3" /> structures that represent the results of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector or an array of 3-D vectors by a given matrix, projecting the result back into w = 1.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that represents the results of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector normal by the given matrix.</summary>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector normal by the given matrix.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector3" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector3" /> structures that contain the results of this method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector normal by the given matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that contains the results of this method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Unproject(System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from screen space into object space.</summary>
      <param name="viewport">An <see cref="T:System.Object" /> that represents the viewport.</param>
      <param name="projection">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the projection matrix.</param>
      <param name="view">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the view matrix.</param>
      <param name="world">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the world matrix.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Unproject(Microsoft.DirectX.Vector3,System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from screen space into object space.</summary>
      <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3" /> structure.</param>
      <param name="viewport">An <see cref="T:System.Object" /> that represents the viewport.</param>
      <param name="projection">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the projection matrix.</param>
      <param name="view">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the view matrix.</param>
      <param name="world">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that represents the world matrix.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector3" /> structure that is the vector projected from screen space into object space.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Vector3.Empty">
      <summary>Retrieves an empty 3-D vector.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Vector4">
      <summary>Describes a vector in four-dimensional (4-D) space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.W">
      <summary>Retrieves or sets the w component of a 4-D vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.X">
      <summary>Retrieves or sets the x component of a 4-D vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.Y">
      <summary>Retrieves or sets the y component of a 4-D vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.Z">
      <summary>Retrieves or sets the z component of a 4-D vector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Add(Microsoft.DirectX.Vector4)">
      <summary>Adds two 4-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Add(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Adds two 4-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" />.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" />.</param>
      <returns>Sum of the two <see cref="T:Microsoft.DirectX.Vector4" /> structures.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.BaryCentric(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using the specified 4-D vectors.</summary>
      <param name="v1">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="v2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="v3">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="f">Weighting factor. See Remarks.</param>
      <param name="g">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.CatmullRom(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using specified 4-D vectors.</summary>
      <param name="position1">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="position2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="position3">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="position4">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Cross(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Determines the cross product in four dimensions.</summary>
      <param name="v1">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="v2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="v3">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the cross product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4" /> class.</summary>
      <param name="valueX">Initial <see cref="F:Microsoft.DirectX.Vector4.X" /> value.</param>
      <param name="valueY">Initial <see cref="F:Microsoft.DirectX.Vector4.Y" /> value.</param>
      <param name="valueZ">Initial <see cref="F:Microsoft.DirectX.Vector4.Z" /> value.</param>
      <param name="valueW">Initial <see cref="F:Microsoft.DirectX.Vector4.W" /> value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Dot(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Determines the dot product of two 4-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that represents the dot product.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Hermite(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation using the specified 4-D vectors.</summary>
      <param name="position">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="tangent">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a tangent vector.</param>
      <param name="position2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a position vector.</param>
      <param name="tangent2">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure that is a tangent vector.</param>
      <param name="weightingFactor">Weighting factor. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Length">
      <summary>Returns the length of a 4-D vector.</summary>
      <returns>A <see cref="T:System.Single" /> value that indicates the vector's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Length(Microsoft.DirectX.Vector4)">
      <summary>Returns the length of a 4-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that indicates the vector's length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.LengthSq">
      <summary>Returns the square of the length of a 4-D vector.</summary>
      <returns>A <see cref="T:System.Single" /> value that indicates the vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.LengthSq(Microsoft.DirectX.Vector4)">
      <summary>Returns the square of the length of a 4-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:System.Single" /> value that indicates the vector's squared length.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Lerp(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two 4-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="interpolater">Parameter that linearly interpolates between the vectors.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the linear interpolation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Maximize(Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the largest components of two 4-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Maximize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the largest components of two 4-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is made up of the largest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Minimize(Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the smallest components of two 4-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Minimize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the smallest components of two 4-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is made up of the smallest components of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Multiply(Microsoft.DirectX.Vector4,System.Single)">
      <summary>Multiplies a 4-D vector by a <see cref="T:System.Single" /> value.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="f">Source <see cref="T:System.Single" /> value used as a multiplier.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is multiplied by the <see cref="T:System.Single" /> value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Multiply(System.Single)">
      <summary>Multiplies a 4-D vector by a <see cref="T:System.Single" /> value.</summary>
      <param name="s">Source <see cref="T:System.Single" /> value used as a multiplier.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Normalize">
      <summary>Returns the normalized version of a 4-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Normalize(Microsoft.DirectX.Vector4)">
      <summary>Returns the normalized version of a 4-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the normalized version of the specified vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Addition(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that contains the sum of the parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Equality(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector4" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector4" /> structure to the right of the equality operator.</param>
      <returns>Value that is true if the objects are the same, or false if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Inequality(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector4" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector4" /> structure to the right of the inequality operator.</param>
      <returns>Value that is true if the objects are different, or false if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Multiply(System.Single,Microsoft.DirectX.Vector4)">
      <summary>Determines the product of a <see cref="T:System.Single" /> value and a 4-D vector.</summary>
      <param name="right">Source <see cref="T:System.Single" /> structure.</param>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the product of the <see cref="M:Microsoft.DirectX.Vector4.op_Multiply" /> and <see cref="M:Microsoft.DirectX.Vector4.op_Multiply" /> parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Multiply(Microsoft.DirectX.Vector4,System.Single)">
      <summary>Determines the product of a <see cref="T:System.Single" /> value and a 4-D vector.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="right">Source <see cref="T:System.Single" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the product of the <see cref="M:Microsoft.DirectX.Vector4.op_Multiply" /> and <see cref="M:Microsoft.DirectX.Vector4.op_Multiply" /> parameters.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Subtraction(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Subtracts two 4-D vectors.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Vector4" /> structure to the left of the subtraction operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Vector4" /> structure to the right of the subtraction operator.</param>
      <returns>Resulting <see cref="T:Microsoft.DirectX.Vector4" /> structure.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_UnaryNegation(Microsoft.DirectX.Vector4)">
      <summary>Negates the vector.</summary>
      <param name="vec">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Scale(System.Single)">
      <summary>Scales a 4-D vector.</summary>
      <param name="scalingFactor">Scaling value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Scale(Microsoft.DirectX.Vector4,System.Single)">
      <summary>Scales a 4-D vector.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="scalingFactor">Scaling value.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the scaled vector.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Subtract(Microsoft.DirectX.Vector4)">
      <summary>Subtracts two 4-D vectors.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure to subtract from the current instance.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Subtract(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Subtracts two 4-D vectors.</summary>
      <param name="left">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure to the left of the subtraction operator.</param>
      <param name="right">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure to the right of the subtraction operator.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the operation.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector or an array of 4-D vectors by a given matrix.</summary>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Vector4[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector or an array of 4-D vectors by a given matrix.</summary>
      <param name="vector">Array of source <see cref="T:Microsoft.DirectX.Vector4" /> structures.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>Array of <see cref="T:Microsoft.DirectX.Vector4" /> structures that are the result of the method.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Vector4,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector or an array of 4-D vectors by a given matrix.</summary>
      <param name="source">Source <see cref="T:Microsoft.DirectX.Vector4" /> structure.</param>
      <param name="sourceMatrix">Source <see cref="T:Microsoft.DirectX.Matrix" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Vector4" /> structure that is the result of the method.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Vector4.Empty">
      <summary>Returns an empty 4-D vector.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXMatrixStack">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.GraphicsPermission">
      <summary>Controls the permissions related to DirectX Graphics.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="canUse" />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.GraphicsPermission.Use">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.InputPermission">
      <summary>Controls the permissions related to DirectX Input.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.InputPermission.Use">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.NetworkPermission">
      <summary>Controls the permissions related DirectPlay.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.NetworkPermission.Host">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.NetworkPermission.Join">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.SoundPermission">
      <summary>Controls the permissions related DirectX Audio.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.SoundPermission.Use">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.SoundPermission.UseCapture">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute">
      <summary>Allows security actions for GraphicsPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute.CreatePermission">
      <summary>Creates a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute.Use">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute">
      <summary>Allows security actions for InputPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute.CreatePermission">
      <summary>Creates a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute.Use">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute">
      <summary>Allows security actions for NetworkPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.CreatePermission">
      <summary>Create a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.Host">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.Join">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute">
      <summary>Allows security actions for SoundPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.CreatePermission">
      <summary>Creates a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.Use">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.UseCapture">
      <summary>Gets or sets the type of access.</summary>
    </member>
  </members>
</doc>