<doc>
  <assembly>
    <name>Microsoft.DirectX.Direct3D</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterInformation">
      <summary>Manipulates adapter information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.GetWhqlInformation">
      <summary>Retrieves adapter information that includes Windows Hardware Quality Labs (WHQL) information.</summary>
      <returns>An <see cref="T:Microsoft.DirectX.Direct3D.AdapterDetails" /> structure that contains the adapter information.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.Adapter">
      <summary>Retrieves the adapter ordinal number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.CurrentDisplayMode">
      <summary>Retrieves the current display mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.Information">
      <summary>Retrieves information about the current adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.SupportedDisplayModes">
      <summary>Returns a collection of supported display modes for the current adapter.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterListCollection">
      <summary>Manipulates a collection of adapters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListCollection.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.</summary>
      <returns>Enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListCollection.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListCollection.MoveNext">
      <summary>Advances the enumerator to the next light.</summary>
      <returns>Value that is true if the move to the next item was successful, or false if it was not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListCollection.Reset">
      <summary>Resets the current enumerator to point to the head of the queue.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Count">
      <summary>Retrieves the number of <see cref="T:Microsoft.DirectX.Direct3D.AdapterInformation" /> objects in <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Current">
      <summary>Retrieves the current <see cref="T:Microsoft.DirectX.Direct3D.AdapterInformation" /> object in the queue.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default">
      <summary>Retrieves the default adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Item(System.Int32)">
      <summary>Retrieves a specific <see cref="T:Microsoft.DirectX.Direct3D.AdapterInformation" /> object using an index value.</summary>
      <param name="adapter">Index value of the adapter to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseTexture">
      <summary>Manipulates texture resources, including <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> and <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> textures.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GenerateMipSubLevels">
      <summary>Generates mipmap sublevels.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DBaseTexture9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.op_Equality(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.op_Inequality(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.SetLevelOfDetail(System.Int32)">
      <summary>Sets the most detailed level of detail (LOD) for a managed texture.</summary>
      <param name="lodNew">Most detailed LOD value to set for the  chain.</param>
      <returns>An <see cref="T:System.Int32" /> value, clamped to the maximum LOD value (one less than the total number of levels). Subsequent calls to this method return the maximum value, not the previously set LOD value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.AutoGenerateFilterType">
      <summary>Retrieves or sets the filter type used for automatically generated  sublevels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelCount">
      <summary>Retrieves the number of texture levels in a multilevel texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelOfDetail">
      <summary>Retrieves or sets the most detailed level of detail (LOD) for a managed texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipPlane">
      <summary>Defines the clipping plane for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlane.GetSingleArray">
      <summary>Retrieves the coefficients of a user-defined clipping plane for the device.</summary>
      <returns>Returns a four-element array of values that represent the coefficients of the clipping plane, in the form of the general plane equation. See Remarks.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlane.SetSingleArray(System.Single[])">
      <summary>Sets the coefficients of a user-defined clipping plane for the device.</summary>
      <param name="value">A four-element array of values that represent the clipping plane coefficients to set, in the form of the general plane equation. See Remarks.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlane.Enabled">
      <summary>Enables or disables a clipping plane.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlane.Plane">
      <summary>Retrieves or sets the coefficients of a user-defined clipping plane for the device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipPlanes">
      <summary>Contains the clipping planes on the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlanes.DisableAll">
      <summary>Disables all clipping planes on the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlanes.EnableAll">
      <summary>Enables all clipping planes that have been set.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlanes.Item(System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.ClipPlane" /> object referenced by <see cref="P:Microsoft.DirectX.Direct3D.ClipPlanes.Item(System.Int32)" />.</summary>
      <param name="index">Index of the <see cref="T:Microsoft.DirectX.Direct3D.ClipPlane" /> to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException">
      <summary>The currently set render states cannot be used together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException">
      <summary>The current texture filters cannot be used together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException">
      <summary>The current textures cannot be used simultaneously.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeTexture">
      <summary>Manipulates a cube texture resource.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.CubeTexture.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle(Microsoft.DirectX.Direct3D.CubeMapFace)">
      <summary>Adds a dirty region to a cube texture resource.</summary>
      <param name="faceType">A <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> value that identifies the face where the dirty region will be added. Omitting the <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle" /> parameter indicates that the dirty region should expand to cover the full face.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Drawing.Rectangle)">
      <summary>Adds a dirty region to a cube texture resource.</summary>
      <param name="faceType">A <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> value that identifies the face where the dirty region will be added. Omitting the <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle" /> parameter indicates that the dirty region should expand to cover the full face.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that specifies the dirty region.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9" /> interface pointer.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="pool">A <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> value that describes the memory class into which the cube texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="edgeLength">Size of the edges of all top-level faces of the cube texture. The pixel dimensions of subsequent levels of each face are the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0, 1 is taken instead.</param>
      <param name="levels">Number of levels in each face of the cube texture. If this value is 0, Microsoft Direct3D generates all cube texture sublevels down to 1x1 pixels for each face, for hardware that supports  cube textures. To see the number of levels generated, check the <see cref="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelCount" /> property.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> values. It is good practice to match the usage parameter in the <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the format of all levels in all faces of the cube texture.</param>
      <param name="pool">A <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> value that describes the memory class into which the cube texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetCubeMapSurface(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Retrieves a cube texture map surface.</summary>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a mipmapped cube texture.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the returned cube texture map surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a description of one face of a specified cube texture level.</summary>
      <param name="level">Level of a mipmapped cube texture.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SurfaceDescription" /> structure that describes one face of the specified cube texture level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DCubeTexture9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <param name="ranks">Array of 1 to 3 <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <param name="ranks">Array of 1 to 3 <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <param name="ranks">Array of 1 to 3 <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a  cube texture.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> enumerated values that describe the type of lock to perform.</param>
      <param name="ranks">Array of 1 to 3 <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.op_Equality(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.CubeTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.op_Inequality(Microsoft.DirectX.Direct3D.CubeTexture,Microsoft.DirectX.Direct3D.CubeTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.CubeTexture.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.UnlockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Unlocks a rectangle on a cube texture resource.</summary>
      <param name="faceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.CubeMapFace" /> enumerated type that identifies a cube map face.</param>
      <param name="level">Level of a mipmapped cube texture.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTexture.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CubeTexture.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex">
      <summary>Defines various custom fixed-format vertex types. This class is a container of structures. See the individual structures for more information.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Device">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, gets and sets palettes, and creates shaders.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceLost">
      <summary>Occurs when a device is about to be lost (for example, immediately prior to a reset).</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceReset">
      <summary>Occurs after a device is reset, allowing an application to re-create all <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.Default" /> resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceResizing">
      <summary>Occurs when a device is resizing, allowing the application to cancel the default handling of the resize.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Device.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.BeginScene">
      <summary>Begins a scene.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.BeginStateBlock">
      <summary>Signals Microsoft Direct3D to begin recording a device state block.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CheckCooperativeLevel">
      <summary>Reports the current cooperative-level status of the Microsoft Direct3D device for a windowed or full-screen application.</summary>
      <returns>Current cooperative-level status of the device for a windowed or full-screen application. A return value of true indicates that the device is operational and that the calling application can continue; a value of false indicates that the device is lost or needs to be reset.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CheckCooperativeLevel(System.Int32@)">
      <summary>Reports the current cooperative-level status of the Microsoft Direct3D device for a windowed or full-screen application.</summary>
      <param name="result">[in, out] Current cooperative-level status of the device for a windowed or full-screen application, reported using a <see cref="T:Microsoft.DirectX.Direct3D.ResultCode" /> value. A <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.Success" /> result indicates that the device is operational and that the calling application can continue. A <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.DeviceLost" /> result indicates that the device is lost but cannot be reset at this time; therefore, rendering is not possible. A <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.DeviceNotReset" /> result indicates that the device is lost but can be reset at this time.</param>
      <returns>Current cooperative-level status of the device for a windowed or full-screen application. A return value of true indicates that the device is operational and that the calling application can continue; a value of false indicates that the device is lost or needs to be reset.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Drawing.Color,System.Single,System.Int32)">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Stencil" />: Clears the stencil buffer to the value in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Target" />: Clears the render target to the color in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.ZBuffer" />: Clears the depth buffer to the value in the Z parameter.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> object that represents the color to which the render target surface is cleared.</param>
      <param name="zdepth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n-1, where n is the bit depth of the stencil buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Drawing.Color,System.Single,System.Int32,System.Drawing.Rectangle[])">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Stencil" />: Clears the stencil buffer to the value in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Target" />: Clears the render target to the color in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.ZBuffer" />: Clears the depth buffer to the value in the Z parameter.</param>
      <param name="color">A <see cref="T:System.Drawing.Color" /> object that represents the color to which the render target surface is cleared.</param>
      <param name="zdepth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n-1, where n is the bit depth of the stencil buffer.</param>
      <param name="rect">Array of <see cref="T:System.Drawing.Rectangle" /> structures that describe the rectangles to clear. To clear the entire surface, set a rectangle to the dimensions of the rendering target. Each rectangle uses screen coordinates that correspond to points on the render target surface. Coordinates are clipped to the bounds of the viewport rectangle.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Int32,System.Single,System.Int32)">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Stencil" />: Clears the stencil buffer to the value in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Target" />: Clears the render target to the color in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.ZBuffer" />: Clears the depth buffer to the value in the Z parameter.</param>
      <param name="color">A 32-bit ARGB color value to which the render target surface is cleared.</param>
      <param name="zdepth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n-1, where n is the bit depth of the stencil buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Int32,System.Single,System.Int32,System.Drawing.Rectangle[])">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Stencil" />: Clears the stencil buffer to the value in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.Target" />: Clears the render target to the color in the <see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> parameter.<see cref="F:Microsoft.DirectX.Direct3D.ClearFlags.ZBuffer" />: Clears the depth buffer to the value in the Z parameter.</param>
      <param name="color">A 32-bit ARGB color value to which the render target surface is cleared.</param>
      <param name="zdepth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n-1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">Array of <see cref="T:System.Drawing.Rectangle" /> structures that describe the rectangles to clear. To clear the entire surface, set a rectangle to the dimensions of the rendering target. Each rectangle uses screen coordinates that correspond to points on the render target surface. Coordinates are clipped to the bounds of the viewport rectangle.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ColorFill(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>Allows an application to fill a rectangular area of a <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> surface with a specified color.</summary>
      <param name="surface">Surface to be filled.</param>
      <param name="rect">Source rectangle. To fill the entire surface, specify null.</param>
      <param name="color">Color used for filling.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ColorFill(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.Int32)">
      <summary>Allows an application to fill a rectangular area of a <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> surface with a specified color.</summary>
      <param name="surface">Surface to be filled.</param>
      <param name="rect">Source rectangle. To fill the entire surface, specify null.</param>
      <param name="color">Color used for filling.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a depth stencil resource.</summary>
      <param name="width">Width of the depth stencil surface in pixels.</param>
      <param name="height">Height of the depth stencil surface in pixels.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DepthFormat" /> enumerated type that describes the format of the depth stencil surface. This value must be one of the enumerated depth stencil formats for the current device.</param>
      <param name="multiSample">Member of the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" /> enumerated type that describes the multisampling buffer type. This value must be one of the supported multisample types. When this surface is passed to the <see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" /> property, its multisample type must be the same as that of the render target set by <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" />.</param>
      <param name="multiSampleQuality">Quality level. The valid range is between 0 and one less than the level returned by the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> method. Passing a larger value results in a <see cref="T:Microsoft.DirectX.Direct3D.GraphicsException" /> with an <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.InvalidCall" /> value. The <see cref="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" /> values of paired render targets, depth stencil surfaces, and the <see cref="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" /> type must all match.</param>
      <param name="discard">Set to true to enable z-buffer discarding; otherwise false. If this flag is set, the contents of the depth stencil buffer are invalid after <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> is called or when <see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" /> is set with a different depth surface. This flag's behavior is the same as passing the enumerated value <see cref="F:Microsoft.DirectX.Direct3D.PresentFlag.DiscardDepthStencil" /> to the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> method.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> that represents the created depth stencil surface resource.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates an off-screen surface.</summary>
      <param name="width">Width of the surface in pixels.</param>
      <param name="height">Height of the surface in pixels.</param>
      <param name="format">Format of the surface. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Format" />.</param>
      <param name="pool">Surface pool type. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Pool" />.</param>
      <returns>The <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that is created.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a render target surface.</summary>
      <param name="width">Width of the render-target surface in pixels.</param>
      <param name="height">Height of the render-target surface in pixels.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the format of the render target.</param>
      <param name="multiSample">Member of the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" /> enumerated type that describes the multisampling buffer type. This parameter specifies the antialiasing type for the render target. When this surface is passed to <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" />, its multisample type must be the same as that of the depth stencil property <see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" />.</param>
      <param name="multiSampleQuality">Quality level. The valid range is between 0 and one less than the level returned by the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" />. Passing a larger value causes an <see cref="T:Microsoft.DirectX.Direct3D.InvalidCallException" />. The <see cref="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" /> values of paired render targets, depth stencil surfaces, and the multisample type must all match.</param>
      <param name="lockable">Set to true if render targets are lockable; otherwise, false. Note that lockable render targets reduce performance on some graphics hardware.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DDevice9)">
      <summary>Initializes a new instance of the current class.
	</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DDevice9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the current class.
	</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DDevice9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,System.IntPtr,Microsoft.DirectX.Direct3D.CreateFlags,Microsoft.DirectX.Direct3D.PresentParameters[])">
      <summary>Initializes a new instance of the current class.
	</summary>
      <param name="adapter">Ordinal number that identifies which physical device the object represents. Device 0 is the default device. The highest value that can be used in this parameter is one less than the total number of physical devices.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumerated type that denotes the desired device type. If the desired device type is not available, the method fails.</param>
      <param name="renderWindowHandle">Handle to a <see cref="T:System.Windows.Forms.Form" />, <see cref="T:System.Web.UI.WebControls.Panel" />, or any other <see cref="T:System.Windows.Forms.Control" /> derived class. This parameter indicates the surface to bind to the device. For full-screen mode, the window specified must be a top-level window.For windowed mode, this parameter can be null. If null is specified, a non-null handle must be specified when calling <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" />. This can be done either by setting the <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> property, or by using the optional <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> parameter of the <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> method.</param>
      <param name="behaviorFlags">Combination of one or more options that control device creation.</param>
      <param name="presentationParameters">[in, out] Pointer to a <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> object that describes the presentation parameters for the device to create. For Microsoft Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order. User-specified nonzero ForcedRefreshRate registry key, if supported by the device.Application-specified nonzero refresh rate value in the presentation parameter.Refresh rate of the latest desktop mode, if supported by the device.75 hertz if supported by the device.60 hertz if supported by the device.Device default. By default, if a refresh rate is unsupported, the closest supported refresh rate below it is used. For example, if the application specifies 63 hertz, 60 hertz is used. No refresh rates below 57 hertz are supported. Calling this method changes the value of several members of <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />. <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferCount" />, <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferWidth" />, and <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferHeight" /> = 0 for windowed or full-screen mode.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferFormat" /> = <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" /> for windowed mode only. Full-screen mode must specify a format. If <see cref="F:Microsoft.DirectX.Direct3D.CreateFlags.AdapterGroupDevice" /> is set, <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> is an array. Regardless of the number of heads that exist, only one depth stencil surface is automatically created.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.CreateFlags,Microsoft.DirectX.Direct3D.PresentParameters[])">
      <summary>Initializes a new instance of the current class.
	</summary>
      <param name="adapter">Ordinal number that identifies which physical device the object represents. Device 0 is the default device. The highest value that can be used in this parameter is one less than the total number of physical devices.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumerated type that denotes the desired device type. If the desired device type is not available, the method fails.</param>
      <param name="renderWindow">Pointer to an unmanaged (or non-Windows form) window handle.</param>
      <param name="behaviorFlags">Combination of one or more options that control device creation.</param>
      <param name="presentationParameters">[in, out] Pointer to a <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> object that describes the presentation parameters for the device to create. For Microsoft Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order. User-specified nonzero ForcedRefreshRate registry key, if supported by the device.Application-specified nonzero refresh rate value in the presentation parameter.Refresh rate of the latest desktop mode, if supported by the device.75 hertz if supported by the device.60 hertz if supported by the device.Device default. By default, if a refresh rate is unsupported, the closest supported refresh rate below it is used. For example, if the application specifies 63 hertz, 60 hertz is used. No refresh rates below 57 hertz are supported. Calling this method changes the value of several members of <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />. <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferCount" />, <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferWidth" />, and <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferHeight" /> = 0 for windowed or full-screen mode.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferFormat" /> = <see cref="F:Microsoft.DirectX.Direct3D.Format.Unknown" /> for windowed mode only. Full-screen mode must specify a format. If <see cref="F:Microsoft.DirectX.Direct3D.CreateFlags.AdapterGroupDevice" /> is set, <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> is an array. Regardless of the number of heads that exist, only one depth stencil surface is automatically created.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DeletePatch(System.Int32)">
      <summary>Frees a cached high-order patch.</summary>
      <param name="handle">Handle of the cached high-order patch to delete.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices.</summary>
      <param name="primitiveType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.PrimitiveType" /> enumerated type that describes the type of primitive to render. The <see cref="F:Microsoft.DirectX.Direct3D.PrimitiveType.PointList" /> constant is not supported with this method. See Remarks.</param>
      <param name="baseVertex">Offset from the start of the index buffer to the first vertex index.</param>
      <param name="minVertexIndex">Minimum vertex index for vertices used during the call.</param>
      <param name="numVertices">Number of vertices used during the call, starting from <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> + <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />.</param>
      <param name="startIndex">Location in the index array at which to start reading vertices.</param>
      <param name="primCount">Number of primitives to render. The number of vertices used is a function of the <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> and <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />. To determine the maximum number of primitives allowed, check the <see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount" /> member of the <see cref="T:Microsoft.DirectX.Direct3D.Caps" /> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Object,System.Boolean,System.Object)">
      <summary>Renders the specified geometric primitive with data specified by a user memory pointer.</summary>
      <param name="primitiveType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.PrimitiveType" /> enumerated type that describes the type of primitive to render.</param>
      <param name="minVertexIndex">Minimum vertex index, relative to 0 (the start of <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Object,System.Boolean,System.Object)" />), for vertices used during the call.</param>
      <param name="numVertexIndices">Number of vertices used during the call, starting from <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Object,System.Boolean,System.Object)" />.</param>
      <param name="primitiveCount">Number of primitives to render. The number of indices used is a function of the primitive count and primitive type. To determine the maximum number of primitives allowed, check the <see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount" /> member of the <see cref="T:Microsoft.DirectX.Direct3D.Caps" /> structure.</param>
      <param name="indexData">User memory pointer to the index data.</param>
      <param name="sixteenBitIndices">Set to true to indicate 16-bit indices. Set to false if to indicate 32-bit indices.</param>
      <param name="vertexStreamZeroData">User memory pointer to the vertex data to use for vertex stream 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of non-indexed geometric primitives of the specified type from the current set of data input streams.</summary>
      <param name="primitiveType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.PrimitiveType" /> enumerated type that describes the type of primitive to render.</param>
      <param name="startVertex">Index of the first vertex to load. Beginning at <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)" />, the correct number of vertices is read out of the vertex buffer.</param>
      <param name="primitiveCount">Number of primitives to render. To determine the maximum number of primitives allowed, check <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount" />. The <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)" /> is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.RectanglePatchInformation)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the rectangular patch to draw.</param>
      <param name="numSegs">A <see cref="T:Microsoft.DirectX.Plane" /> structure. The <see cref="F:Microsoft.DirectX.Plane.A" />, <see cref="F:Microsoft.DirectX.Plane.B" />, <see cref="F:Microsoft.DirectX.Plane.C" /> and <see cref="F:Microsoft.DirectX.Plane.D" /> fields identify the number of segments each edge of the rectangle patch should be divided into when tessellated.</param>
      <param name="rectPatchInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.RectanglePatchInformation)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the rectangular patch to draw.</param>
      <param name="numSegs">Array of four floating-point values that identify the number of segments into which each edge of the rectangle patch should be divided when tessellated. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation" />.</param>
      <param name="rectPatchInformation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.RectanglePatchInformation)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the rectangular patch to draw.</param>
      <param name="numSegs">A <see cref="T:Microsoft.DirectX.Plane" /> structure. The <see cref="F:Microsoft.DirectX.Plane.A" />, <see cref="F:Microsoft.DirectX.Plane.B" />, <see cref="F:Microsoft.DirectX.Plane.C" /> and <see cref="F:Microsoft.DirectX.Plane.D" /> fields identify the number of segments each edge of the rectangle patch should be divided into when tessellated.</param>
      <param name="rectPatchInformation">A pointer to a <see cref="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation" /> structure that describes the rectangular patch to draw. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.RectanglePatchInformation)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the rectangular patch to draw.</param>
      <param name="numSegs">Array of four floating-point values that identify the number of segments into which each edge of the rectangle patch should be divided when tessellated. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation" />.</param>
      <param name="rectPatchInformation">A pointer to a <see cref="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation" /> structure that describes the rectangular patch to draw. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the rectangular patch to draw.</param>
      <param name="numSegs">A <see cref="T:Microsoft.DirectX.Plane" /> structure. The <see cref="F:Microsoft.DirectX.Plane.A" />, <see cref="F:Microsoft.DirectX.Plane.B" />, <see cref="F:Microsoft.DirectX.Plane.C" /> and <see cref="F:Microsoft.DirectX.Plane.D" /> fields identify the number of segments each edge of the rectangle patch should be divided into when tessellated.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[])">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the rectangular patch to draw.</param>
      <param name="numSegs">Array of four floating-point values that identify the number of segments into which each edge of the rectangle patch should be divided when tessellated. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.TrianglePatchInformation)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the triangular patch to draw.</param>
      <param name="numSegs">A <see cref="T:Microsoft.DirectX.Plane" /> structure. The <see cref="F:Microsoft.DirectX.Plane.A" />, <see cref="F:Microsoft.DirectX.Plane.B" />, <see cref="F:Microsoft.DirectX.Plane.C" />, and <see cref="F:Microsoft.DirectX.Plane.D" /> fields identify the number of segments into which each edge of the triangle patch should be divided when tessellated.</param>
      <param name="triPatchInformation">A <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" /> structure that describes the triangular high-order patch to draw.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.TrianglePatchInformation)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the triangular patch to draw.</param>
      <param name="numSegs">Pointer to an array of three floating-point values that identify the number of segments each edge of the triangle patch should be divided into when tessellated. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" />.</param>
      <param name="triPatchInformation">A <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" /> structure that describes the triangular high-order patch to draw.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.TrianglePatchInformation)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the triangular patch to draw.</param>
      <param name="numSegs">A <see cref="T:Microsoft.DirectX.Plane" /> structure. The <see cref="F:Microsoft.DirectX.Plane.A" />, <see cref="F:Microsoft.DirectX.Plane.B" />, <see cref="F:Microsoft.DirectX.Plane.C" />, and <see cref="F:Microsoft.DirectX.Plane.D" /> fields identify the number of segments into which each edge of the triangle patch should be divided when tessellated.</param>
      <param name="triPatchInformation">A pointer to a <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" /> structure that describes the triangular high-order patch to draw. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.TrianglePatchInformation)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the triangular patch to draw.</param>
      <param name="numSegs">Pointer to an array of three floating-point values that identify the number of segments each edge of the triangle patch should be divided into when tessellated. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" />.</param>
      <param name="triPatchInformation">A pointer to a <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" /> structure that describes the triangular high-order patch to draw. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the triangular patch to draw.</param>
      <param name="numSegs">A <see cref="T:Microsoft.DirectX.Plane" /> structure. The <see cref="F:Microsoft.DirectX.Plane.A" />, <see cref="F:Microsoft.DirectX.Plane.B" />, <see cref="F:Microsoft.DirectX.Plane.C" />, and <see cref="F:Microsoft.DirectX.Plane.D" /> fields identify the number of segments into which each edge of the triangle patch should be divided when tessellated.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[])">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">Handle to the triangular patch to draw.</param>
      <param name="numSegs">Pointer to an array of three floating-point values that identify the number of segments each edge of the triangle patch should be divided into when tessellated. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Object)">
      <summary>Renders data specified by a user memory pointer as a sequence of geometric primitives of the specified type.</summary>
      <param name="primitiveType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.PrimitiveType" /> enumerated type that describes the type of primitive to render.</param>
      <param name="primitiveCount">Number of primitives to render. To determine the maximum number of primitives allowed, check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount" /> member.</param>
      <param name="vertexStreamZeroData">User memory vertex data to use for vertex stream 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EndScene">
      <summary>Ends a scene that was started by calling the <see cref="M:Microsoft.DirectX.Direct3D.Device.BeginScene" /> method.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EndStateBlock">
      <summary>Signals Microsoft Direct3D to stop recording a device state block and retrieve a pointer to the state block interface.</summary>
      <returns>State block object. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EvictManagedResources">
      <summary>Evicts all managed resources, including Microsoft Direct3D resources and those that are driver-managed.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetBackBuffer(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)">
      <summary>Retrieves a back buffer from a device's swap chain.</summary>
      <param name="swapChain">Unsigned integer that specifies the swap chain.</param>
      <param name="backBuffer">Index of the back buffer object to return.</param>
      <param name="backBufferType">Stereo view is not supported in Microsoft DirectX 9.0, so the only valid value for this parameter is <see cref="F:Microsoft.DirectX.Direct3D.BackBufferType.Mono" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> that represents the returned back buffer surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetCubeTexture(System.Int32)">
      <summary>Retrieves the cube texture assigned to a stage for a device.</summary>
      <param name="stage">Stage identifier of the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> to retrieve. Stage identifiers are zero-based.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object that represents the returned <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetFrontBufferData(System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Generates a copy of a device's front buffer and places it in a system memory buffer provided by the application.</summary>
      <param name="swapChain">Unsigned integer that specifies the swap chain.</param>
      <param name="buffer">[in, out] A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class that receives a copy of the front buffer's contents. The data is returned in successive rows with no intervening space, proceeding from the highest vertical row on the device's output to the lowest. For windowed mode, the size of the destination surface should be the desktop size. For full-screen mode, the size of the destination surface should be the screen size.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetGammaRamp(System.Int32)">
      <summary>Retrieves the gamma correction ramp for the swap chain.</summary>
      <param name="swapChain">Unsigned integer that specifies the swap chain.</param>
      <returns>[in, out] Application-supplied <see cref="T:Microsoft.DirectX.Direct3D.GammaRamp" /> structure to fill with the gamma correction ramp.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DDevice9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Device" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPaletteEntries(System.Int32)">
      <summary>Retrieves palette entries.</summary>
      <param name="paletteNumber">Ordinal value that identifies the palette to retrieve.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structure that represents the returned palette entries.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Retrieves a Boolean shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of Boolean values in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Retrieves an integer shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of four-integer vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Retrieves a floating-point shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of four-float vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRasterStatus(System.Int32)">
      <summary>Returns information that describes the raster of the monitor on which the swap chain is presented.</summary>
      <param name="swapChain">Unsigned integer that specifies the swap chain.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.RasterStatus" /> structure that contains information about the position or other status of the raster on the monitor driven by this adapter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderStateBoolean(Microsoft.DirectX.Direct3D.RenderStates)">
      <summary>Retrieves the Boolean value of a given render state.</summary>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration that represents the render state value to retreive.</param>
      <returns>The render state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderStateInt32(Microsoft.DirectX.Direct3D.RenderStates)">
      <summary>Retrieves the integer value of a given render state.</summary>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration that represents the render state value to retreive.</param>
      <returns>The render state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderStateSingle(Microsoft.DirectX.Direct3D.RenderStates)">
      <summary>Retrieves the floating-point value of a given render state.</summary>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration that represents the render state value to retreive.</param>
      <returns>The render state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderTarget(System.Int32)">
      <summary>Retrieves a render target surface.</summary>
      <param name="renderTargetIndex">Index of the render target. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> that represents the returned render target surface for the current device.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderTargetData(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies the render target data from device memory to system memory.</summary>
      <param name="renderTarget">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents a render target.</param>
      <param name="destSurface">[in, out] A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents a destination surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetSamplerStageStateBoolean(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates)">
      <summary>Retrieves the Boolean value of a given sampler stage state.</summary>
      <param name="stage">Index value of the sampler stage to retrieve.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that represents the sampler stage state value to retreive.</param>
      <returns>The sampler stage state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetSamplerStageStateInt32(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates)">
      <summary>Retrieves the integer value of a given sampler stage state.</summary>
      <param name="stage">Index value of the sampler stage to retrieve.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that represents the sampler stage state value to retreive.</param>
      <returns>The sampler stage state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetSamplerStageStateSingle(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates)">
      <summary>Retrieves the floating-point value of a given sampler stage state.</summary>
      <param name="stage">Index value of the sampler stage to retrieve.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that represents the sampler stage state value to retreive.</param>
      <returns>The sampler stage state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetStreamSource(System.Int32,System.Int32@,System.Int32@)">
      <summary>Retrieves a vertex buffer bound to the specified data stream.</summary>
      <param name="streamNumber">Number of the data stream, in the range of 0 to the maximum number of streams -1.</param>
      <param name="offsetInBytes">Offset from the beginning of the stream to the beginning of the vertex data, in bytes. See Remarks.</param>
      <param name="stride">Pointer to a returned stride of the component, in bytes. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class that represents the returned vertex buffer bound to the specified data stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetStreamSourceFrequency(System.Int32)">
      <summary>Retrieves the stream source frequency divider value.</summary>
      <param name="streamNumber">Stream source number.</param>
      <returns>Frequency divider value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetSwapChain(System.Int32)">
      <summary>Retrieves a reference to a swap chain.</summary>
      <param name="swapChain">Swap chain ordinal value. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.NumberOfAdaptersInGroup" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class that receives a copy of the swap chain.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTexture(System.Int32)">
      <summary>Retrieves a texture assigned to a stage for a device.</summary>
      <param name="stage">Stage identifier of the texture to retrieve. Stage identifiers are zero-based.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the returned texture.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTextureStageStateBoolean(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates)">
      <summary>Retrieves the Boolean value of a given texture stage state.</summary>
      <param name="stage">Index value of the texture stage to retrieve.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that represents the texture stage state value to retreive.</param>
      <returns>The texture stage state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTextureStageStateInt32(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates)">
      <summary>Retrieves the integer value of a given texture stage state.</summary>
      <param name="stage">Index value of the texture stage to retrieve.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that represents the texture stage state value to retreive.</param>
      <returns>The texture stage state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTextureStageStateSingle(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates)">
      <summary>Retrieves the floating-point value of a given texture stage state.</summary>
      <param name="stage">Index value of the texture stage to retrieve.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that represents the texture stage state value to retreive.</param>
      <returns>The texture stage state value retrieved.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTransform(Microsoft.DirectX.Direct3D.TransformType)">
      <summary>Retrieves a matrix that describes a transformation state.</summary>
      <param name="state">Transform that is being retrieved. This parameter can be any member of the <see cref="T:Microsoft.DirectX.Direct3D.TransformType" /> enumerated type.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Matrix" /> structure that describes the returned transformation state.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Retrieves a Boolean vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of Boolean values in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Retrieves an integer vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of four-integer vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Retrieves a floating-point vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of four-float vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVolumeTexture(System.Int32)">
      <summary>Retrieves the volume texture assigned to a stage for a device.</summary>
      <param name="stage">Stage identifier of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> to retrieve. Stage identifiers are zero-based.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object that represents the returned <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.MultiplyTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix)">
      <summary>Multiplies a device's world, view, or projection matrices by a specified matrix.</summary>
      <param name="state">Member of the <see cref="T:Microsoft.DirectX.Direct3D.TransformType" /> enumerated type that identifies which device matrix to modify. The most common setting, <see cref="F:Microsoft.DirectX.Direct3D.TransformType.World" />, modifies the world matrix, but the view or projection matrices also can be modified.</param>
      <param name="matrix">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that modifies the current transformation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.op_Equality(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Device)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.op_Inequality(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Device)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.IntPtr,System.Boolean)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent">The <see cref="T:System.Drawing.Rectangle" /> to present.</param>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for this presentation. If this parameter is not used, <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> is taken.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.IntPtr)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for this presentation. If this parameter is not used, <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the source rectangle. If the rectangle exceeds the source surface, it is clipped to the source surface. This parameter can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the destination rectangle. This parameter can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />.</param>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for this presentation. If this parameter is not used, <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Boolean)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent">The <see cref="T:System.Drawing.Rectangle" /> to present.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,System.Boolean)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent">The <see cref="T:System.Drawing.Rectangle" /> to present.</param>
      <param name="overrideWindow">Pointer to a destination window whose client area is taken as the target for this presentation. If this parameter is omitted, <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> is taken.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Windows.Forms.Control)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="overrideWindow">Pointer to a destination window whose client area is taken as the target for this presentation. If this parameter is omitted, <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the source rectangle. If the rectangle exceeds the source surface, it is clipped to the source surface. This parameter can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the destination rectangle. This parameter can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />.</param>
      <param name="overrideWindow">Pointer to a destination window whose client area is taken as the target for this presentation. If this parameter is omitted, <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow" /> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.</summary>
      <param name="srcStartIndex">Index of first vertex to load.</param>
      <param name="destIndex">Index of first vertex in the destination vertex buffer into which the results are placed.</param>
      <param name="vertexCount">Number of vertices to process.</param>
      <param name="destBuffer">A <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class; the destination vertex buffer that represents the stream of interleaved vertex data.</param>
      <param name="vertexDeclaration">A <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class that represents the output vertex data declaration. When vertex shader 3.0 or later is set as the current vertex shader, the output vertex declaration must be present.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,Microsoft.DirectX.Direct3D.VertexDeclaration,System.Boolean)">
      <summary>Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.</summary>
      <param name="srcStartIndex">Index of first vertex to load.</param>
      <param name="destIndex">Index of first vertex in the destination vertex buffer into which the results are placed.</param>
      <param name="vertexCount">Number of vertices to process.</param>
      <param name="destBuffer">A <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class; the destination vertex buffer that represents the stream of interleaved vertex data.</param>
      <param name="vertexDeclaration">A <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class that represents the output vertex data declaration. When vertex shader 3.0 or later is set as the current vertex shader, the output vertex declaration must be present.</param>
      <param name="copyData">Set to true for default processing. Set to false to prevent the system from copying vertex data not affected by the vertex operation into the destination buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceLost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.DeviceLost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceReset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.DeviceReset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceResizing(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.DeviceResizing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Device.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])">
      <summary>Resets the presentation parameters for the current device.</summary>
      <param name="presentationParameters">[in, out] A <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> structure that describes the new presentation parameters. This value cannot be null.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursor(System.Windows.Forms.Cursor,System.Boolean)">
      <summary>Sets the current cursor.</summary>
      <param name="cursor">Handle to the cursor.</param>
      <param name="addWaterMark">Set to true to add small grey characters that read "D3D" to the upper-left corner of the cursor image.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursorPosition(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets the cursor position and update options.</summary>
      <param name="positionX">New X-position of the cursor in virtual desktop coordinates. See Remarks.</param>
      <param name="positionY">New Y-position of the cursor in virtual desktop coordinates. See Remarks.</param>
      <param name="updateImmediate">Set to true if the system guarantees that the cursor is updated at a minimum of half of the display refresh rate, but never more frequently than the display refresh rate. Set to false if the method delays cursor updates until the next <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> call. Setting this parameter to false usually results in better performance. However, applications should use true if the rate of calls to <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> is low enough that users would notice a significant delay in cursor motion. This flag has no effect in an application in windowed mode. Some video cards implement hardware color cursors; this flag does not affect these cards.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursorProperties(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Sets properties for the cursor.</summary>
      <param name="hotSpotX">X-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from the new position. The offset is determined by subtracting the hot spot coordinates from the position.</param>
      <param name="hotSpotY">Y-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from the new position. The offset is determined by subtracting the hot spot coordinates from the position.</param>
      <param name="cursorBitmap">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object. This parameter must be an 8888 ARGB surface (format <see cref="F:Microsoft.DirectX.Direct3D.Format.A8R8G8B8" />). The contents of this surface are copied and potentially converted into an internal buffer from which the cursor is displayed. The dimensions of this surface must be less than the dimensions of the display mode, and must be a power of two in each direction, although not necessarily the same power of two. The alpha channel must be either 0.0 or 1.0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetDialogBoxesEnabled(System.Boolean)">
      <summary>Enables the use of Microsoft Windows Graphics Device Interface (GDI) dialog boxes in full-screen applications.</summary>
      <param name="value">Set to true to enable Windows Graphics Device Interface (GDI) dialog boxes. Set to false to disable Windows Graphics Device Interface (GDI) dialog boxes.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetGammaRamp(System.Int32,System.Boolean,Microsoft.DirectX.Direct3D.GammaRamp)">
      <summary>Sets the gamma correction ramp for the implicit swap chain.</summary>
      <param name="swapChain">Unsigned integer that specifies the swap chain.</param>
      <param name="calibrate">Set to true to indicate that correction should be applied. Set to false to indicate that no gamma correction should be applied. The supplied gamma table is transferred directly to the device.</param>
      <param name="ramp">A <see cref="T:Microsoft.DirectX.Direct3D.GammaRamp" /> structure that represents the gamma correction ramp to set for the implicit swap chain.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPaletteEntries(System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[])">
      <summary>Sets palette entries.</summary>
      <param name="paletteNumber">Ordinal value that identifies the palette on which the operation is performed.</param>
      <param name="entries">Pointer to a <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structure that represents the palette entries to set. The number of <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> structures passed into <see cref="M:Microsoft.DirectX.Direct3D.Device.SetPaletteEntries(System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[])" /> is assumed to be 256. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Vector4)">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A pointer to a <see cref="T:Microsoft.DirectX.Vector4" /> object that represents the constant data to set. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A pointer to a <see cref="T:Microsoft.DirectX.Matrix" /> object that represents the constant data to set. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Vector4)">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.Vector4" /> object representing the constant data to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.Matrix" /> object representing the constant data to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Boolean[])">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:System.Boolean" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Int32[])">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:System.Int32" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Vector4[])">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:Microsoft.DirectX.Vector4" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Matrix[])">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:Microsoft.DirectX.Matrix" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Single[])">
      <summary>Sets a pixel shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:System.Single" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets Boolean shader constants.</summary>
      <param name="startRegister">Register number that will contain the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader constants to set.</param>
      <param name="numberRegisters">Number of constants contained within <see cref="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets integer shader constants.</summary>
      <param name="startRegister">Register number that will contain the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader constants to set.</param>
      <param name="numberRegisters">Number of constants contained within <see cref="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets floating-point shader constants.</summary>
      <param name="startRegister">Register number that will contain the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader constants to set.</param>
      <param name="numberRegisters">Number of constants contained within <see cref="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetRenderState(Microsoft.DirectX.Direct3D.RenderStates,System.Single)">
      <summary>Sets a render state value.</summary>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration that represents the render state value to set.</param>
      <param name="value">A floating-point render state value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetRenderState(Microsoft.DirectX.Direct3D.RenderStates,System.Boolean)">
      <summary>Sets a render state value.</summary>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration that represents the render state value to set.</param>
      <param name="value">A Boolean render state value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetRenderState(Microsoft.DirectX.Direct3D.RenderStates,System.Int32)">
      <summary>Sets a render state value.</summary>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> enumeration that represents the render state value to set.</param>
      <param name="value">An integer render state value to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Sets a new color buffer for a device.</summary>
      <param name="renderTargetIndex">Index of the render target. See Remarks.</param>
      <param name="renderTarget">New color buffer. If set to null, the color buffer for the corresponding <see cref="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)" /> is disabled. Devices must always be associated with a color buffer. The new render-target surface must have at least <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> specified.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetSamplerState(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates,System.Single)">
      <summary>Sets a sampler stage state value.</summary>
      <param name="stage">Index value of the sampler stage to set.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that represents the sampler stage state value to set.</param>
      <param name="value">A floating-point value to set for the given sampler stage state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetSamplerState(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates,System.Boolean)">
      <summary>Sets a sampler stage state value.</summary>
      <param name="stage">Index value of the sampler stage to set.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that represents the sampler stage state value to set.</param>
      <param name="value">A Boolean value to set for the given sampler stage state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetSamplerState(System.Int32,Microsoft.DirectX.Direct3D.SamplerStageStates,System.Int32)">
      <summary>Sets a sampler stage state value.</summary>
      <param name="stage">Index value of the sampler stage to set.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStageStates" /> enumeration that represents the sampler stage state value to set.</param>
      <param name="value">An integer value to set for the given sampler stage state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource(System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,System.Int32)">
      <summary>Binds a vertex buffer to a device data stream.</summary>
      <param name="streamNumber">Data stream in the range of 0 to the maximum number of streams -1.</param>
      <param name="streamData">Pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class that represents the vertex buffer to bind to the specified data stream.</param>
      <param name="offsetInBytes">Offset from the beginning of the stream to the beginning of the vertex data, in bytes. To determine whether the device supports stream offsets, see <see cref="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsStreamOffset" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource(System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,System.Int32,System.Int32)">
      <summary>Binds a vertex buffer to a device data stream.</summary>
      <param name="streamNumber">Data stream in the range of 0 to the maximum number of streams -1.</param>
      <param name="streamData">Pointer to a <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class that represents the vertex buffer to bind to the specified data stream.</param>
      <param name="offsetInBytes">Offset from the beginning of the stream to the beginning of the vertex data, in bytes. To determine whether the device supports stream offsets, see <see cref="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsStreamOffset" />.</param>
      <param name="stride">Stride of the component, in bytes. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSourceFrequency(System.Int32,System.Int32)">
      <summary>Sets the stream source frequency divider value.</summary>
      <param name="streamNumber">Stream source number.</param>
      <param name="divider">Frequency divider value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTexture(System.Int32,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Assigns a texture to a device stage.</summary>
      <param name="stage">Index value for the device stage.</param>
      <param name="texture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the texture being set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTextureStageState(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates,System.Single)">
      <summary>Sets a texture stage state value.</summary>
      <param name="stage">Index value of the texture stage to set.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that represents the texture stage state value to set.</param>
      <param name="value">A floating-point value to set for the given texture stage state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTextureStageState(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates,System.Boolean)">
      <summary>Sets a texture stage state value.</summary>
      <param name="stage">Index value of the texture stage to set.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that represents the texture stage state value to set.</param>
      <param name="value">A Boolean value to set for the given texture stage state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTextureStageState(System.Int32,Microsoft.DirectX.Direct3D.TextureStageStates,System.Int32)">
      <summary>Sets a texture stage state value.</summary>
      <param name="stage">Index value of the texture stage to set.</param>
      <param name="state">A member from the <see cref="T:Microsoft.DirectX.Direct3D.TextureStageStates" /> enumeration that represents the texture stage state value to set.</param>
      <param name="value">An integer value to set for the given texture stage state.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix)">
      <summary>Sets a single device transform.</summary>
      <param name="state">Type of transform that is being modified; can be any member of the <see cref="T:Microsoft.DirectX.Direct3D.TransformType" /> enumerated type.</param>
      <param name="matrix">A <see cref="T:Microsoft.DirectX.Matrix" /> structure that modifies the current transform.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Vector4)">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A pointer to a <see cref="T:Microsoft.DirectX.Vector4" /> object that represents the constant data to set. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A pointer to a <see cref="T:Microsoft.DirectX.Matrix" /> object that represents the constant data to set. Use this if your code block is marked unsafe.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Vector4)">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.Vector4" /> object representing the constant data to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.Matrix" /> object representing the constant data to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Boolean[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:System.Boolean" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Int32[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:System.Int32" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Vector4[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:Microsoft.DirectX.Vector4" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Matrix[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:Microsoft.DirectX.Matrix" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Single[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantData">Array of <see cref="T:System.Single" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets Boolean vertex shader constants.</summary>
      <param name="startRegister">Register number that will contain the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader constants to set.</param>
      <param name="numberRegisters">Number of constants contained within <see cref="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstantBoolean(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets integer vertex shader constants.</summary>
      <param name="startRegister">Register number that will contain the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader constants to set.</param>
      <param name="numberRegisters">Number of constants contained within <see cref="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstantInt32(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)">
      <summary>Sets floating-point vertex shader constants.</summary>
      <param name="startRegister">Register number that will contain the first constant value.</param>
      <param name="constantData">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that contains the shader constants to set.</param>
      <param name="numberRegisters">Number of constants contained within <see cref="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstantSingle(System.Int32,Microsoft.DirectX.GraphicsStream,System.Int32)" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ShowCursor(System.Boolean)">
      <summary>Displays or hides the cursor.</summary>
      <param name="canShow">Set to true if the cursor is shown. Set to false if the cursor is hidden.</param>
      <returns>Value that indicates whether the cursor was previously visible. If set to true, the cursor was visible; if set to false, it was not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.StretchRectangle(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.TextureFilter)">
      <summary>Copies the contents of the source rectangle to the destination rectangle.</summary>
      <param name="sourceSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface.</param>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the source rectangle. If set to null, the entire source surface is used.</param>
      <param name="destSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> object that represents the destination rectangle. If set to null, the entire destination surface is used.</param>
      <param name="filter">Filter type. Allowable values are <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.None" />, <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.Point" />, or <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.Linear" />. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.TextureFilter" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.TestCooperativeLevel">
      <summary>Reports the current cooperative-level status of the Microsoft Direct3D device for a windowed or full-screen application.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface; must point to a surface other than <see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" />.</param>
      <param name="destinationSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Point)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface; must point to a surface other than <see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" />.</param>
      <param name="destinationSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPoint">A <see cref="T:System.Drawing.Point" /> object that represents the upper-left corner of the destination rectangle. Specifying null for this parameter causes the entire surface to be copied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface; must point to a surface other than <see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" />.</param>
      <param name="sourceRect">A <see cref="T:System.Drawing.Rectangle" /> object that represents the rectangle on the source surface. Specifying null for this parameter causes the entire surface to be copied.</param>
      <param name="destinationSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Point)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the source surface; must point to a surface other than <see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" />.</param>
      <param name="sourceRect">A <see cref="T:System.Drawing.Rectangle" /> object that represents the rectangle on the source surface. Specifying null for this parameter causes the entire surface to be copied.</param>
      <param name="destinationSurface">A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the destination surface.</param>
      <param name="destPoint">A <see cref="T:System.Drawing.Point" /> object that represents the upper-left corner of the destination rectangle. Specifying null for this parameter causes the entire surface to be copied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Updates the dirty portions of a texture.</summary>
      <param name="sourceTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the source texture, which must be in system memory (<see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.SystemMemory" />).</param>
      <param name="destinationTexture">A <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" /> object that represents the destination texture, which must be in the default memory pool (<see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.Default" />).</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DDevice9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DDevice9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ValidateDevice">
      <summary>Reports the device's ability to render the current texture-blending operations and arguments in a single pass.</summary>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ValidateDeviceParams" /> object that provides the number of passes and the result code of the validation check.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.AvailableTextureMemory">
      <summary>Retrieves an estimate of the amount of available texture memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ClipPlanes">
      <summary>Retrieves the clipping planes on the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ClipStatus">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.ClipStatus" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.CreationParameters">
      <summary>Retrieves the creation parameters of the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.CurrentTexturePalette">
      <summary>Retrieves or sets the current texture palette.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface">
      <summary>Retrieves or sets the depth stencil surface owned by the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DeviceCaps">
      <summary>Retrieves the capabilities of the rendering device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Indices">
      <summary>Retrieves or sets index data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers">
      <summary>Retrieves or sets a value that indicates whether the device should use event handlers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Lights">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.LightsCollection" /> collection on the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Material">
      <summary>Retrieves or sets the current material properties for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.NPatchMode">
      <summary>Retrieves or sets the N-patch mode segments.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.NumberOfSwapChains">
      <summary>Retrieves the number of implicit swap chains.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.PixelShader">
      <summary>Retrieves or sets the current pixel shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.PresentationParameters">
      <summary>Retrieves presentation parameters for a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.RasterStatus">
      <summary>Retrieves information that describes the raster of the monitor on which the swap chain is presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.RenderState">
      <summary>Retrieves a render-state value for a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.SamplerState">
      <summary>Retrieves a device's sampler states.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ScissorRectangle">
      <summary>Retrieves or sets the scissor rectangle.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.SoftwareVertexProcessing">
      <summary>Retrieves or sets the vertex processing mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.TextureState">
      <summary>Retrieves a state value for an assigned texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Transform">
      <summary>Retrieves a matrix that describes a transformation state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DDevice9" /> interface pointer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexDeclaration">
      <summary>Retrieves or sets a vertex shader declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexFormat">
      <summary>Retrieves or sets the supported flexible vertex formats.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexShader">
      <summary>Retrieves or sets the current vertex shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Viewport">
      <summary>Retrieves or sets the viewport parameters for the current device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceLostException">
      <summary>The device has been lost but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceLostException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceLostException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceLostException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceLostException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceNotResetException">
      <summary>The device has been lost but can be reset at this time.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceNotResetException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceNotResetException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceNotResetException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceNotResetException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplayModeCollection">
      <summary>Manipulates a collection of <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" /> structures.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeCollection.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.DisplayModeCollection" />.</summary>
      <returns>Enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.DisplayModeCollection" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeCollection.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeCollection.MoveNext">
      <summary>Advances the enumerator to the next <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" />.</summary>
      <returns>Value that is true if the move to the next item was successful, or false if it was not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeCollection.Reset">
      <summary>Resets the current enumerator to point to the head of the queue.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeCollection.Count">
      <summary>Retrieves the number of <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" /> structures in <see cref="T:Microsoft.DirectX.Direct3D.DisplayModeCollection" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeCollection.Current">
      <summary>Retrieves the current <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" /> object in the queue.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeCollection.Item(Microsoft.DirectX.Direct3D.Format)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" /> structure with the specified <see cref="T:Microsoft.DirectX.Direct3D.Format" />.</summary>
      <param name="f">A <see cref="T:Microsoft.DirectX.Direct3D.Format" /> flag that indicates the format of the <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" /> to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException">
      <summary>Internal driver error. Applications should generally shut down when receiving this error.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException">
      <summary>The driver reports that the current method call is invalid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GraphicsException">
      <summary>Base exception type for graphics. Derives from <see cref="T:Microsoft.DirectX.DirectXException" />.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.GraphicsException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.GraphicsException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.GraphicsException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.GraphicsException" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.GetExceptionFromResultInternal(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Exception" /> object that represents the result code passed in.</summary>
      <param name="resultCode">Integer that represents the result code of the exception to retrieve.</param>
      <returns>An <see cref="T:System.Exception" /> object that represents the error that occurred.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IndexBuffer">
      <summary>Manipulates an index buffer resource.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.IndexBuffer.Created">
      <summary>Occurs after a device is reset and the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> is re-created.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.IndexBuffer.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9,System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9" /> interface pointer.</param>
      <param name="typeIndexType">Member of the <see cref="T:System.Type" /> that indicates the type of index data the buffer holds. This can be a value type or any type that contains only value types.</param>
      <param name="numberIndices">Maximum number of indices the buffer can hold.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the index buffer.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class into which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9" /> interface pointer.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the index buffer.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class into which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the index buffer.</param>
      <param name="sizeOfBufferInBytes">Size of the index buffer in bytes.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class into which to place the resource.</param>
      <param name="sixteenBitIndices">Set to true if the index buffer contains 16-bit indices. Set to false if the index buffer contains 32-bit indices.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="typeIndexType">Member of the <see cref="T:System.Type" /> that indicates the type of index data the buffer holds. This can be a value type or any type that contains only value types.</param>
      <param name="numberIndices">Maximum number of indices the buffer can hold.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the index buffer.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class into which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DIndexBuffer9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a pointer to the index buffer memory.</summary>
      <param name="offsetToLock">Offset into the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> parameters.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoOverwrite" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a pointer to the index buffer memory.</summary>
      <param name="offsetToLock">Offset into the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> parameters.</param>
      <param name="sizeToLock">Size of the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> parameters.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoOverwrite" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a range of index data and obtains a pointer to the index buffer memory.</summary>
      <param name="offsetToLock">Offset into the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock" /> parameters.</param>
      <param name="typeIndex">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoOverwrite" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />.</param>
      <param name="ranks">Array of 1 to 3 <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.raise_Created(System.Object,System.EventArgs)">
      <summary>Raises an <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" />.<see cref="E:Microsoft.DirectX.Direct3D.IndexBuffer.Created" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.IndexBuffer.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.SetData(System.Object,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks, sets, and unlocks a range of vertex data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to copy into the index buffer.</param>
      <param name="lockAtOffset">Offset to set in the index buffer. To set the entire buffer, set this parameter to 0.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> locking flags that describe the type of lock to perform when setting the buffer. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Unlock">
      <summary>Unlocks index data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.Description">
      <summary>Retrieves a description of the index buffer resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.SizeInBytes">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> data, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InterfaceGuid">
      <summary>Encapsulates various object globally unique identifiers (GUIDs) for use with the <see cref="M:Microsoft.DirectX.Direct3D.Surface.GetContainer(System.Guid)" /> and <see cref="M:Microsoft.DirectX.Direct3D.Volume.GetContainer(System.Guid)" /> methods.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.BaseTexture">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.CubeTexture">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Device">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.Device" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.IndexBuffer">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.PixelShader">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Resource">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.Resource" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.StateBlock">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Surface">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.Surface" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.SwapChain">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexBuffer">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexDeclaration">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexShader">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Volume">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.Volume" />globally unique identifier (GUID).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VolumeTexture">
      <summary>Specifies the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" />globally unique identifier (GUID).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidCallException">
      <summary>The method call is invalid. For example, a method's parameter might not be valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidCallException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidCallException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidCallException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidCallException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidDeviceException">
      <summary>The requested device type is not valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDeviceException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDeviceException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDeviceException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InvalidDeviceException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Light">
      <summary>Defines a set of lighting properties.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.#ctor(Microsoft.DirectX.PrivateImplementationDetails._D3DLIGHT9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Light" /> class.</summary>
      <param name="pLight">Unmanaged <see cref="T:Microsoft.DirectX.PrivateImplementationDetails._D3DLIGHT9" /> structure pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Light" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.FromLight(Microsoft.DirectX.Direct3D.Light)">
      <summary>Creates a new light based on an existing light.</summary>
      <param name="light">Existing light that is used to create the new light.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.Update">
      <summary>Updates the settings for the current <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Ambient">
      <summary>Retrieves or sets the ambient color emitted by the light.  This member is a <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.AmbientColor">
      <summary>Retrieves or sets the ambient color emitted by the light. This member is a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation0">
      <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation1">
      <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation2">
      <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Diffuse">
      <summary>Retrieves or sets the diffuse color emitted by the light.  This member is a <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.DiffuseColor">
      <summary>Retrieves or sets the diffuse color emitted by the light.  This member is a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Direction">
      <summary>Retrieves or sets the direction in which the light is pointing in world space, as specified by a <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Enabled">
      <summary>Retrieves or sets a Boolean value that enables or disables a set of lighting parameters within a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Falloff">
      <summary>Retrieves or sets the decrease in illumination between a spotlight's inner cone (the angle specified by <see cref="P:Microsoft.DirectX.Direct3D.Light.InnerConeAngle" />) and the outer edge of the outer cone (the angle specified by <see cref="P:Microsoft.DirectX.Direct3D.Light.OuterConeAngle" />).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.InnerConeAngle">
      <summary>Retrieves or sets the angle, in radians, of a spotlight's inner cone; that is, the fully illuminated spotlight cone.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.OuterConeAngle">
      <summary>Retrieves or sets the angle, in radians, that defines the outer edge of a spotlight's outer cone.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Position">
      <summary>Retrieves or sets the position of the light in world space, as specified by a <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Range">
      <summary>Retrieves or sets the distance beyond which the light has no effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Specular">
      <summary>Retrieves or sets the specular color emitted by the light.  This member is a <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.SpecularColor">
      <summary>Retrieves or sets the specular color emitted by the light.  This member is a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Type">
      <summary>Retrieves or sets the type of the light source.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.XDirection">
      <summary>Retrieves or sets an X-axis value that indicates the direction in which the light points.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.XPosition">
      <summary>Retrieves or sets an X-coordinate value that indicates the position of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.YDirection">
      <summary>Retrieves or sets a Y-axis value that indicates the direction of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.YPosition">
      <summary>Retrieves or sets a Y-coordinate value that indicates the position of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.ZDirection">
      <summary>Retrieves or sets a Z-axis value that indicates the direction of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.ZPosition">
      <summary>Retrieves or sets a Z-coordinate value that indicates the position of the light.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LightsCollection">
      <summary>Defines a collection of lights.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LightsCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.LightsCollection" />.</summary>
      <returns>An enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.LightsCollection" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LightsCollection.MoveNext">
      <summary>Advances the enumerator to the next light.</summary>
      <returns>Set to true if the move to the next item was sucessful; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LightsCollection.Reset">
      <summary>Resets the current enumerator to point to the head of the queue.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LightsCollection.Count">
      <summary>Retrieves the number of <see cref="T:Microsoft.DirectX.Direct3D.Light" /> objects in the <see cref="T:Microsoft.DirectX.Direct3D.LightsCollection" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LightsCollection.Current">
      <summary>Retrieves the current <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object in the <see cref="T:Microsoft.DirectX.Direct3D.LightsCollection" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LightsCollection.Item(System.Int32)">
      <summary>Retrieves a specific <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object within the <see cref="T:Microsoft.DirectX.Direct3D.LightsCollection" />.</summary>
      <param name="index">Index value of the light to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Manager">
      <summary>Provides information about the environment, and enumerates and retrieves device capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.DepthFormat,System.Int32@)">
      <summary>Determines whether a depth stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter to query. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <param name="adapterFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DepthFormat" /> enumeration that identifies the format of the depth stencil surface to be tested.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <returns>Value that is true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch" /> parameter for the HRESULT code returned. If a depth stencil format is not compatible with the render target in the display mode, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Determines whether a depth stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter to query. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <param name="adapterFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DepthFormat" /> enumeration that identifies the format of the depth stencil surface to be tested.</param>
      <returns>Value that is true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch" /> parameter for the HRESULT code returned. If a depth stencil format is not compatible with the render target in the display mode, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter to query. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <param name="adapterFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">Requested usage options for the surface. Usage options are any combination of <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration values (only a subset of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> values are valid for <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />). For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Usage" />.</param>
      <param name="resourceType">A <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> requested for use with the queried format.</param>
      <param name="checkFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the surfaces that can be used, as defined by <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />.</param>
      <returns>Value that is true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> parameter for the HRESULT code returned. If the format is not acceptable to the device for this usage, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />. If <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> equals or exceeds the number of display adapters in the system, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.DepthFormat,System.Int32@)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter to query. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <param name="adapterFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">Requested usage options for the surface. Usage options are any combination of <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration values (only a subset of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> values are valid for <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />). For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Usage" />.</param>
      <param name="resourceType">A <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> requested for use with the queried format.</param>
      <param name="checkFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the surfaces that can be used, as defined by <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <returns>Value that is true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> parameter for the HRESULT code returned. If the format is not acceptable to the device for this usage, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />. If <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> equals or exceeds the number of display adapters in the system, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.Format)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter to query. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <param name="adapterFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">Requested usage options for the surface. Usage options are any combination of <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration values (only a subset of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> values are valid for <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />). For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Usage" />.</param>
      <param name="resourceType">A <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> requested for use with the queried format.</param>
      <param name="checkFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the surfaces that can be used, as defined by <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />.</param>
      <returns>Value that is true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> parameter for the HRESULT code returned. If the format is not acceptable to the device for this usage, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />. If <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> equals or exceeds the number of display adapters in the system, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.Format,System.Int32@)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter to query. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <param name="adapterFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">Requested usage options for the surface. Usage options are any combination of <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration values (only a subset of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> values are valid for <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />). For more information, see <see cref="T:Microsoft.DirectX.Direct3D.Usage" />.</param>
      <param name="resourceType">A <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> requested for use with the queried format.</param>
      <param name="checkFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that identifies the format of the surfaces that can be used, as defined by <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" />.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <returns>Value that is true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> parameter for the HRESULT code returned. If the format is not acceptable to the device for this usage, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />. If <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> equals or exceeds the number of display adapters in the system, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Int32@)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="adapter">Display adapter ordinal number. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Device type. Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration.</param>
      <param name="sourceFormat">Source adapter format. Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration.</param>
      <param name="targetFormat">Target adapter format. Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <returns>Returns true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion" /> parameter for the HRESULT code returned.If the method fails, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />. If the hardware does not support conversion between the two formats, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="adapter">Display adapter ordinal number. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Device type. Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration.</param>
      <param name="sourceFormat">Source adapter format. Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration.</param>
      <param name="targetFormat">Target adapter format. Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration.</param>
      <returns>Returns true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion" /> parameter for the HRESULT code returned.If the method fails, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />. If the hardware does not support conversion between the two formats, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32@,System.Int32@)">
      <summary>Determines whether a multisampling technique is available on the current device.</summary>
      <param name="adapter">Display adapter ordinal number. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration.</param>
      <param name="surfaceFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that specifies the format of the surface to be multisampled. See Remarks.</param>
      <param name="windowed">Set to true to inquire about windowed multisampling. Set to false to inquire about full-screen multisampling.</param>
      <param name="multiSampleType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" /> enumeration that identifies the multisampling technique to test.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <param name="qualityLevels">Number of quality stops available for a given multisample type; can be null if it is not necessary to return the values.</param>
      <returns>Returns true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> parameter for the HRESULT code returned.If the method fails, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> is set to one of the following values: <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> if the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> or <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> parameters are invalid, <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" /> if the device does not support the queried multisampling technique, or <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidDevice" /> if <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> does not apply to the adapter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.MultiSampleType)">
      <summary>Determines whether a multisampling technique is available on the current device.</summary>
      <param name="adapter">Display adapter ordinal number. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration.</param>
      <param name="surfaceFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that specifies the format of the surface to be multisampled. See Remarks.</param>
      <param name="windowed">Set to true to inquire about windowed multisampling. Set to false to inquire about full-screen multisampling.</param>
      <param name="multiSampleType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" /> enumeration that identifies the multisampling technique to test.</param>
      <returns>Returns true if the method succeeds; false if it fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> parameter for the HRESULT code returned.If the method fails, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> is set to one of the following values: <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> if the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> or <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> parameters are invalid, <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" /> if the device does not support the queried multisampling technique, or <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidDevice" /> if <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" /> does not apply to the adapter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Boolean)">
      <summary>Specifies whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="adapter">Display adapter ordinal number. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="checkType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that indicates the device type to check.</param>
      <param name="displayFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that indicates the format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">Back buffer format. For more information about formats, see <see cref="T:Microsoft.DirectX.Direct3D.Format" />. This value must be one of the render target formats. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.DisplayMode" /> can be used to obtain the current format.For windowed applications, the back buffer format does not need to match the display mode format if the hardware supports color conversion. The set of possible back buffer formats is constrained, but the runtime allows any valid back buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel.Full-screen applications cannot perform color conversion.<see cref="F:Microsoft.DirectX.Direct3D.Format.Format.Unknown" /> is allowed for windowed mode.</param>
      <param name="windowed">Set to true if the device type will be used in windowed mode. Set to false if the device type will be used in full-screen.</param>
      <returns>Returns true if the method succeeds and the device can be used on this adapter; false if the method fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> parameter for the HRESULT code returned.If the method fails, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />, provided <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> equals or exceeds the number of display adapters in the system. <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> also is returned if <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> specified a device that does not exist.If the requested back buffer format is not supported, or if hardware acceleration is not available for the specified formats, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Boolean,System.Int32@)">
      <summary>Specifies whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="adapter">Display adapter ordinal number. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter. This method returns <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="checkType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that indicates the device type to check.</param>
      <param name="displayFormat">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that indicates the format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">Back buffer format. For more information about formats, see <see cref="T:Microsoft.DirectX.Direct3D.Format" />. This value must be one of the render target formats. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.DisplayMode" /> can be used to obtain the current format.For windowed applications, the back buffer format does not need to match the display mode format if the hardware supports color conversion. The set of possible back buffer formats is constrained, but the runtime allows any valid back buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel.Full-screen applications cannot perform color conversion.<see cref="F:Microsoft.DirectX.Direct3D.Format.Format.Unknown" /> is allowed for windowed mode.</param>
      <param name="windowed">Set to true if the device type will be used in windowed mode. Set to false if the device type will be used in full-screen.</param>
      <param name="result">HRESULT code passed back from the method.</param>
      <returns>Returns true if the method succeeds and the device can be used on this adapter; false if the method fails. Check the <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> parameter for the HRESULT code returned.If the method fails, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" />, provided <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> equals or exceeds the number of display adapters in the system. <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.InvalidCall" /> also is returned if <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> specified a device that does not exist.If the requested back buffer format is not supported, or if hardware acceleration is not available for the specified formats, <see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType" /> is set to <see cref="F:Microsoft.DirectX.Direct3D.ResultCode.ResultCode.NotAvailable" />.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.DisableD3DSpy">
      <summary>Blocks D3DSpy from monitoring an application.</summary>
      <returns>Returns true if D3DSpy is monitoring this application; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Manager" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GenerateD3DSpyBreak">
      <summary>Generates a breakpoint in D3DSpy when called within the application.</summary>
      <returns>Returns true if D3DSpy is monitoring this application; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetAdapterMonitor(System.Int32)">
      <summary>Returns the handle of the monitor associated with the Microsoft Direct3D object.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter.</param>
      <returns>Handle of the monitor associated with the Microsoft Direct3D object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetDeviceCaps(System.Int32,Microsoft.DirectX.Direct3D.DeviceType)">
      <summary>Retrieves information specific to a device.</summary>
      <param name="adapter">Ordinal number that denotes the display adapter. <see cref="T:Microsoft.DirectX.Direct3D.AdapterListCollection" />.<see cref="P:Microsoft.DirectX.Direct3D.AdapterListCollection.Default" /> is always the primary display adapter.</param>
      <param name="deviceType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> enumeration that identifies the device type.</param>
      <returns>If the method succeeds, the return value is a <see cref="T:Microsoft.DirectX.Direct3D.Caps" /> object that contains information that describes the device's capabilities.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.op_Equality(Microsoft.DirectX.Direct3D.Manager,Microsoft.DirectX.Direct3D.Manager)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Manager" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Manager" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.op_Inequality(Microsoft.DirectX.Direct3D.Manager,Microsoft.DirectX.Direct3D.Manager)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Manager" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Manager" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Manager.Adapters">
      <summary>Collection of adapters on the system.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MoreDataException">
      <summary>More data is available than the specified buffer size can hold.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MoreDataException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MoreDataException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MoreDataException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.MoreDataException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NotAvailableException">
      <summary>This device does not support the queried technique.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotAvailableException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotAvailableException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotAvailableException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotAvailableException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NotFoundException">
      <summary>The requested item was not found.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotFoundException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotFoundException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotFoundException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.NotFoundException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException">
      <summary>Microsoft Direct3D does not have enough display memory to perform the operation.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PixelShader">
      <summary>Encapsulates the functionality of a pixel shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PixelShader.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.PixelShader.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9" /> interface pointer.</param>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> class.</summary>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="functionToken">Integer array representing the pixel shader function tokens that specify the blending operations.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> class.</summary>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="functionToken">Reference to a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the pixel shader function tokens to use.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetFunction">
      <summary>Retrieves an array that contains the shader data.</summary>
      <returns>Array that contains the shader data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DPixelShader9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.op_Equality(Microsoft.DirectX.Direct3D.PixelShader,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.op_Inequality(Microsoft.DirectX.Direct3D.PixelShader,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.PixelShader.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.Device">
      <summary>Retrieves the Microsoft Direct3D device associated with a pixel shader object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentParameters">
      <summary>Describes the presentation parameters.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentParameters.DefaultPresentRate">
      <summary>Returns the default rate at which a swap chain's back buffers can be presented.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.Clone">
      <summary>Clones, or copies, a <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the copied device.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.#ctor(Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> class.</summary>
      <param name="original">A <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> object from which to create the new object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.AutoDepthStencilFormat">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.DepthFormat" /> of the depth stencil surface the device creates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferCount">
      <summary>Retrieves or sets the number of back buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferFormat">
      <summary>Retrieves or sets the format of the back buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferHeight">
      <summary>Retrieves or sets the height of a swap chain's back buffers, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferWidth">
      <summary>Retrieves or sets the width of a swap chain's back buffers, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow">
      <summary>Retrieves or sets the display window.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle">
      <summary>Retrieves or sets the display window.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.EnableAutoDepthStencil">
      <summary>Retrieves or sets a Boolean value that indicates whether Microsoft Direct3D manages depth buffers for an application.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.ForceNoMultiThreadedFlag">
      <summary>Retrieves or sets a Boolean value that indicates whether an application can use multithreading.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.FullScreenRefreshRateInHz">
      <summary>Retrieves or sets the rate at which the display adapter refreshes the screen.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.MultiSample">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.MultiSampleQuality">
      <summary>Retrieves or sets the multisample quality level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval">
      <summary>Retrieves or sets the maximum rate at which the swap chain's back buffers can be presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentFlag">
      <summary>Retrieves or sets the present flag.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.SwapEffect">
      <summary>Retrieves or sets the swap effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.Windowed">
      <summary>Boolean value that indicates whether an application is running in a windowed mode.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Query">
      <summary>Performs asynchronous queries on a driver.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Query.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Query.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9" /> interface pointer.</param>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> being queried.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.QueryType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> class.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> being queried.</param>
      <param name="queryType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.QueryType" /> enumeration that specifies the query type.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetData(System.Type,System.Boolean)">
      <summary>Retrieves the query information.</summary>
      <param name="returnDataType">Specifies the <see cref="T:System.Type" /> of the data to be queried.</param>
      <param name="flush">Set to true to flush the internally batched queries to the driver. Set to false to take no action.</param>
      <returns>An <see cref="T:System.Object" /> that represents the returned query data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetData(System.Type,System.Boolean,System.Boolean@)">
      <summary>Retrieves the query information.</summary>
      <param name="returnDataType">Specifies the <see cref="T:System.Type" /> of the data to be queried.</param>
      <param name="flush">Set to true to flush the internally batched queries to the driver. Set to false to take no action.</param>
      <param name="dataReturned">Set to true if data is returned immediately; otherwise, false.</param>
      <returns>An <see cref="T:System.Object" /> that represents the returned query data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DQuery9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Query" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Issue(Microsoft.DirectX.Direct3D.IssueFlags)">
      <summary>Issues a query.</summary>
      <param name="flags">Member of the <see cref="T:Microsoft.DirectX.Direct3D.IssueFlags" /> enumeration that specifies the type of state change for the query.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.op_Equality(Microsoft.DirectX.Direct3D.Query,Microsoft.DirectX.Direct3D.Query)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.op_Inequality(Microsoft.DirectX.Direct3D.Query,Microsoft.DirectX.Direct3D.Query)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Query.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Query" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> for the current query.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.QueryType">
      <summary>Retrieves the query type for the current query.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderStateManager">
      <summary>Defines device render states.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderStateManager.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AdaptiveTessellateW">
      <summary>Amount to adaptively tessellate in the w direction. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AdaptiveTessellateX">
      <summary>Amount to adaptively tessellate in the x direction. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AdaptiveTessellateY">
      <summary>Amount to adaptively tessellate in the y direction. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AdaptiveTessellateZ">
      <summary>Amount to adaptively tessellate in the z direction. The default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaBlendEnable">
      <summary>Retrieves or sets a value to enable alpha-blended transparency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaBlendOperation">
      <summary>Retrieves or sets a value to select the arithmetic operation applied to the separate for the alpha channel (also known as separate alpha blending) when the render state, <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.SeparateAlphaBlendEnabled" />, is set to true.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaDestinationBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the destination .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaFunction">
      <summary>Retrieves or sets the comparison function for the alpha test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaSourceBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the source .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaTestEnable">
      <summary>Retrieves or sets a render state that enables a per-pixel alpha test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Ambient">
      <summary>Retrieves or sets the ambient light color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AmbientColor">
      <summary>Retrieves or sets the ambient light color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AmbientMaterialSource">
      <summary>Retrieves or sets the ambient color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.AntiAliasedLineEnable">
      <summary>Retrieves or sets antialiasing of lines.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.BlendFactor">
      <summary>Retrieves or sets a <see cref="T:System.Drawing.Color" /> object to use for a constant blend factor during alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.BlendFactorColor">
      <summary>Retrieves or sets a <see cref="T:System.Drawing.Color" /> object to use for a constant blend factor during alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.BlendOperation">
      <summary>Retrieves or sets a value used to select the arithmetic operation to apply when the alpha blend render state, <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaBlendEnable" />, is set to true.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Clipping">
      <summary>Retrieves or sets a value to enable primitive clipping by Microsoft Direct3D.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorVertex">
      <summary>Retrieves or sets a value to enable or disable per-vertex color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable">
      <summary>Retrieves or sets a value that enables a per-channel write for the render target color buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable1">
      <summary>Retrieves or sets additional <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable" /> values for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable2">
      <summary>Retrieves or sets additional <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable" /> values for devices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable3">
      <summary>Retrieves or sets additional <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.ColorWriteEnable" /> values for devices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.CounterClockwiseStencilFail">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> or sets it to perform if the counterclockwise (CCW) stencil test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.CounterClockwiseStencilFunction">
      <summary>Retrieves or sets the comparison function used by the counterclockwise (CCW) stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.CounterClockwiseStencilPass">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> or sets it to perform, if both counterclockwise (CCW) stencil and z-tests pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.CounterClockwiseStencilZBufferFail">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> or sets it to perform if the counterclockwise (CCW) stencil test passes and the z-test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.CullMode">
      <summary>Specifies how back-facing triangles are culled, if at all.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.DebugMonitorTokenEnabled">
      <summary>Enables or disables the debug monitor token.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.DepthBias">
      <summary>Sets or retrieves the depth bias for polygons.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.DestinationBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the destination .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.DiffuseMaterialSource">
      <summary>Retrieves or sets the diffuse color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.DitherEnable">
      <summary>Enables or disables dithering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.EmissiveMaterialSource">
      <summary>Retrieves or sets the emissive color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.EnableAdaptiveTessellation">
      <summary>Enables or disables adaptive tessellation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FillMode">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.FillMode" /> enumeration that represents the fill mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogColor">
      <summary>Retrieves or sets the fog color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogColorValue">
      <summary>Retrieves or sets the fog color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogDensity">
      <summary>Retrieves or sets the fog density for pixel or vertex fog used in exponential fog modes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogEnable">
      <summary>Enables or disables fog blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogEnd">
      <summary>Retrieves or sets the depth at which pixel or vertex fog effects end for linear fog mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogStart">
      <summary>Retrieves or sets the depth at which pixel or vertex fog effects begin for linear fog mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogTableMode">
      <summary>Retrieves or sets the fog formula to use for pixel fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.FogVertexMode">
      <summary>Retrieves or sets the fog formula to use for vertex fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.IndexedVertexBlendEnable">
      <summary>Enables or disables indexed vertex blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.LastPixel">
      <summary>Enables or disables drawing of the last pixel in a line.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Lighting">
      <summary>Enables or disables Microsoft Direct3D lighting.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.LocalViewer">
      <summary>Specifies whether to use camera-relative specular highlights or orthogonal specular highlights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.MaxTessellationLevel">
      <summary>Retrieves or sets the maximum tessellation level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.MinTessellationLevel">
      <summary>Retrieves or sets the minimum tessellation level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.MultiSampleAntiAlias">
      <summary>Determines how individual samples are computed when using a multisample render target buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.MultiSampleMask">
      <summary>Retrieves or sets a render state that enables use of a multisample buffer as an accumulation buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.NormalDegree">
      <summary>Retrieves or sets the degree of interpolation (linear, cubic, quadratic, or quintic) using the N-patch normal.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.NormalizeNormals">
      <summary>Enables or disables automatic normalization of vertex normals.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PatchEdgeStyle">
      <summary>Retrieves or sets the tessellation mode for patch edges.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointScaleA">
      <summary>Controls the distance-based size attenuation for point primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointScaleB">
      <summary>Controls the distance-based size attenuation for point primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointScaleC">
      <summary>Controls the distance-based size attenuation for point primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointScaleEnable">
      <summary>Controls how the computation of size for point sprites is handled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointSize">
      <summary>Specifies the size to use for point size computation in cases in which point size is not specified for each vertex.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointSizeMax">
      <summary>Specifies the maximum size to which point sprites can be set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointSizeMin">
      <summary>Specifies the minimum size to which point sprites can be set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointSpriteEnable">
      <summary>Controls how point sprites are rendered.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.PositionDegree">
      <summary>Retrieves or sets the N-patch position interpolation degree.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.RangeFogEnable">
      <summary>Retrieves or sets enabling of range-based vertex fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ReferenceAlpha">
      <summary>Specifies a reference alpha value against which pixels are tested when alpha testing is enabled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ReferenceStencil">
      <summary>Specifies a reference value to use for the stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ScissorTestEnable">
      <summary>Enables or disables scissor testing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.SeparateAlphaBlendEnabled">
      <summary>Enables or disables the separate for the alpha channel.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ShadeMode">
      <summary>Contains one or more members of the <see cref="T:Microsoft.DirectX.Direct3D.ShadeMode" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.SlopeScaleDepthBias">
      <summary>Retrieves or sets a value used to determine how much bias can be applied to coplanar primitives to reduce z-fighting.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.SourceBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.SpecularEnable">
      <summary>Retrieves or sets a render state that enables specular highlights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.SpecularMaterialSource">
      <summary>Retrieves or sets the specular color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.SrgbWriteEnable">
      <summary>Retrieves or sets a render state that enables render-target writes to be gamma corrected to sRGB.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilEnable">
      <summary>Retrieves or sets stencil enabling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilFail">
      <summary>Retrieves or sets the stencil operation to perform if the stencil test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilFunction">
      <summary>Retrieves or sets the comparison function for the stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilMask">
      <summary>Retrieves or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilPass">
      <summary>Retrieves or sets the stencil operation to perform if both the stencil test and the depth test (z-test) pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilWriteMask">
      <summary>Retrieves or sets the write mask applied to values written into the stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.StencilZBufferFail">
      <summary>Retrieves or sets the stencil operation to perform if the stencil test passes and the depth test (z-test) fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.TextureFactor">
      <summary>Retrieves or sets the color used for multiple-texture blending with the <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.TFactor" /> texture blending argument or the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendFactorAlpha" /> texture blending operation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.TweenFactor">
      <summary>Retrieves or sets a floating-point value that controls the tween factor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.TwoSidedStencilMode">
      <summary>Enables or disables two-sided stenciling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.UseWBuffer">
      <summary>Enables or disables w-buffering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.VertexBlend">
      <summary>Retrieves or sets the number of matrices to use to perform geometry blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap0">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap1">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap10">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap11">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap12">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap13">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap14">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap15">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap2">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap3">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap4">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap5">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap6">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap7">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap8">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.Wrap9">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ZBufferEnable">
      <summary>Enables or disables depth buffering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ZBufferFunction">
      <summary>Retrieves or sets the comparison function for the z-buffer test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStateManager.ZBufferWriteEnable">
      <summary>Enables or disables writing to the depth buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Resource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.FreePrivateData(System.Guid)">
      <summary>Frees the specified private data associated with the current resource.</summary>
      <param name="guidData">Represents a globally unique identifier (GUID) that identifies the private data to free.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DResource9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetPrivateData(System.Guid)">
      <summary>Copies the private data associated with a resource to a buffer.</summary>
      <param name="guidData">Represents a globally unique identifier (GUID) that identifies the private data to retrieve.</param>
      <returns>Returns an array of <see cref="T:System.Byte" /> that contains the requested private data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.op_Equality(Microsoft.DirectX.Direct3D.Resource,Microsoft.DirectX.Direct3D.Resource)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.op_Inequality(Microsoft.DirectX.Direct3D.Resource,Microsoft.DirectX.Direct3D.Resource)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.PreLoad">
      <summary>Preloads a managed resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.SetPriority(System.Int32)">
      <summary>Assigns the resource-management priority for the current resource.</summary>
      <param name="priorityNew">New resource-management priority for the resource.</param>
      <returns>Previous priority value for the resource.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.SetPrivateData(System.Guid,System.Byte[])">
      <summary>Associates data with the resource that is intended for use by the application. Data is passed by value, and multiple sets of data can be associated with a single resource.</summary>
      <param name="guidData">A globally unique identifier (GUID) that identifies the private data to set.</param>
      <param name="privateData">A <see cref="T:System.Byte" /> array that contains the private data to associate with the resource.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Resource" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Device">
      <summary>Retrieves the device associated with a resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Priority">
      <summary>Retrieves or sets the priority for the current resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Type">
      <summary>Retrieves the type of a resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SamplerStateManager">
      <summary>Contains sampler states for the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SamplerStateManager.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.AddressU">
      <summary>Retrieves or sets the texture-address mode for the u-coordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.AddressV">
      <summary>Retrieves or sets the texture-address mode for the v-coordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.AddressW">
      <summary>Retrieves or sets the texture-address mode for the w-coordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.BorderColor">
      <summary>Retrieves or sets the border color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.BorderColorValue">
      <summary>Retrieves or sets the border color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.DMapOffset">
      <summary>Retrieves or sets the vertex offset in the presampled displacement map.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.ElementIndex">
      <summary>Retrieves or sets the element index to use when an element with multiple textures is assigned to the sampler.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.MagFilter">
      <summary>Retrieves or sets a magnification filter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.MaxAnisotropy">
      <summary>Retrieves or sets the maximum anisotropy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.MaxMipLevel">
      <summary>Retrieves or sets the level of detail (LOD) index of the largest map to use.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.MinFilter">
      <summary>Retrieves or sets a minification filter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.MipFilter">
      <summary>Retrieves or sets a mipmap filter to use during minification.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.MipMapLevelOfDetailBias">
      <summary>Retrieves or sets the mipmaplevel of detail (LOD) bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManager.SrgbTexture">
      <summary>Determines whether to use gamma correction.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SamplerStateManagerCollection">
      <summary>Collection of <see cref="T:Microsoft.DirectX.Direct3D.SamplerStateManager" /> objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStateManagerCollection.SamplerState(System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStateManager" /> object at the given <see cref="P:Microsoft.DirectX.Direct3D.SamplerStateManagerCollection.SamplerState(System.Int32)" />.</summary>
      <param name="index">Integer that represents the <see cref="T:Microsoft.DirectX.Direct3D.SamplerStateManager" /> object to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StateBlock">
      <summary>Encapsulates render states.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.StateBlock.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.StateBlock.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Apply">
      <summary>Applies the state block to the current device state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Capture">
      <summary>Captures a device's current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9" /> interface pointer.</param>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the current state block.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.StateBlockType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> class.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the current state block.</param>
      <param name="stateBlockType">Member of the <see cref="T:Microsoft.DirectX.Direct3D.StateBlockType" /> enumeration that specifies the state block type.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DStateBlock9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.op_Equality(Microsoft.DirectX.Direct3D.StateBlock,Microsoft.DirectX.Direct3D.StateBlock)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.op_Inequality(Microsoft.DirectX.Direct3D.StateBlock,Microsoft.DirectX.Direct3D.StateBlock)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.StateBlock.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.StateBlock" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with a state block.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Surface">
      <summary>Queries and prepares surfaces.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Surface.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Surface.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9" /> interface pointer.</param>
      <param name="device">Object reference of the device associated with the surface.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the surface.</param>
      <param name="data">Reference to a <see cref="T:System.IO.Stream" /> object that contains image data for the surface.</param>
      <param name="pool">A <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> object that defines the memory class of the surface.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the surface.</param>
      <param name="image">Reference to a <see cref="T:System.Drawing.Bitmap" /> object that contains the bitmap for the surface.</param>
      <param name="pool">A <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> object that defines the memory class of the surface.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.FromBitmap(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a surface from a Microsoft .NET bitmap object.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the surface.</param>
      <param name="image">Reference to a <see cref="T:System.Drawing.Bitmap" /> object that contains the bitmap for the surface.</param>
      <param name="pool">A <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> object that defines the memory class of the surface.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the newly created surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a surface from a Microsoft .NET stream object.</summary>
      <param name="device">Reference to the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> associated with the surface.</param>
      <param name="data">Reference to a <see cref="T:System.IO.Stream" /> object that contains image data for the surface.</param>
      <param name="pool">A <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> object that defines the memory class of the surface.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the newly created surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetContainer(System.Guid)">
      <summary>Provides access to the parent cube texture or texture (mipmap) object.</summary>
      <param name="interfaceId" />
      <returns>An <see cref="T:System.Object" /> that represents the newly created container.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetGraphics">
      <summary>Retrieves a device context.</summary>
      <returns>A <see cref="T:System.Drawing.Graphics" /> object that represents the device context for the surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DSurface9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> object that represents the rectangle to lock.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <param name="pitch">Integer that represents the returned pitch value of the locked region.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <param name="pitch">Integer that represents the returned pitch value of the locked region.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> object that represents the rectangle to lock.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that specifies the type of array to create.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> object that represents the rectangle to lock.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <param name="pitch">Integer that represents the returned pitch value of the locked region.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that specifies the type of array to create.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <param name="pitch">Integer that represents the returned pitch value of the locked region.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that specifies the type of array to create.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> object that represents the rectangle to lock.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that specifies the type of array to create.</param>
      <param name="flags">A <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> object that specifies the type of lock to apply.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Surface.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.ReleaseGraphics">
      <summary>Releases the device context obtained by calling <see cref="M:Microsoft.DirectX.Direct3D.Surface.GetGraphics" />.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.UnlockRectangle">
      <summary>Unlocks a rectangle on a surface.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.Description">
      <summary>Retrieves the description of a surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSurface9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SwapChain">
      <summary>Manipulates a swap chain.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SwapChain.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9,Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9" /> interface pointer.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the swap chain.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object that represents the device to associate with the swap chain.</param>
      <param name="presentationParameters">A <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> object that contains the presentation parameters for the new swap chain. See Remarks.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetBackBuffer(System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)">
      <summary>Retrieves a back buffer from the swap chain of a device.</summary>
      <param name="backBuffer">Index of the back buffer object to return. See Remarks.</param>
      <param name="typeBuffer">Because stereo view is not supported in Microsoft DirectX 9.0, the only valid value for this parameter is <see cref="F:Microsoft.DirectX.Direct3D.BackBufferType.Mono" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the returned back buffer surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetFrontBufferData(Microsoft.DirectX.Direct3D.Surface)">
      <summary>Generates a copy of the swap chain's front buffer and places it in a <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object provided by the application.</summary>
      <param name="frontBuffer">[in, out] A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that receives a copy of the swap chain's front buffer. The data is returned in successive rows with no intervening space, from the vertically highest row to the lowest.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DSwapChain9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.op_Equality(Microsoft.DirectX.Direct3D.SwapChain,Microsoft.DirectX.Direct3D.SwapChain)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.op_Inequality(Microsoft.DirectX.Direct3D.SwapChain,Microsoft.DirectX.Direct3D.SwapChain)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.IntPtr,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.IntPtr,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindow">A <see cref="T:System.Windows.Forms.Control" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindow">A <see cref="T:System.Windows.Forms.Control" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindow">A <see cref="T:System.Windows.Forms.Control" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindow">A <see cref="T:System.Windows.Forms.Control" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.IntPtr,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.IntPtr)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">A <see cref="T:System.Drawing.Rectangle" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="rectPresent">A <see cref="T:System.Drawing.Rectangle" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindow">A <see cref="T:System.Windows.Forms.Control" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <param name="sourceRectangle">Set to true if a <see cref="T:System.Drawing.Rectangle" /> is being passed to the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> parameter; otherwise, false.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindow">A <see cref="T:System.Windows.Forms.Control" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle" /> member is used.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <see cref="F:Microsoft.DirectX.Direct3D.Present.DoNotWait" />, <see cref="F:Microsoft.DirectX.Direct3D.Present.LinearContent" /> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.SwapChain.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.Device">
      <summary>Retrieves the device associated with a swap chain.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.PresentParameters">
      <summary>Retrieves the presentation parameters associated with a swap chain.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.RasterStatus">
      <summary>Returns information that describes the raster of the monitor on which the swap chain is presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Texture">
      <summary>Manipulates a texture resource.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Texture.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Texture.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.AddDirtyRectangle">
      <summary>Adds a dirty region to a texture resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.AddDirtyRectangle(System.Drawing.Rectangle)">
      <summary>Adds a dirty region to a texture resource.</summary>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the dirty region to add.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DTexture9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DTexture9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DTexture9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DTexture9,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DTexture9" /> interface pointer.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Texture" />.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Texture" />.</param>
      <param name="data">A <see cref="T:System.IO.Stream" /> object that contains the image data. The texture is created with the data in the stream.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> constants. It is good practice to match the usage parameter with the <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Texture" />.</param>
      <param name="image">A <see cref="T:System.Drawing.Bitmap" /> used to create the texture.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> constants. It is good practice to match the usage parameter with the <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Texture" />.</param>
      <param name="width">Width of the texture's top level, in pixels. The pixel dimensions of subsequent levels are the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of one pixel. Thus, if the division by 2 results in 0, 1 is taken instead.</param>
      <param name="height">Height of the texture's top level, in pixels. The pixel dimensions of subsequent levels are the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of one pixel. Thus, if the division by 2 results in 0, 1 is taken instead.</param>
      <param name="numLevels">Number of levels in the texture. If this is 0, Microsoft Direct3D generates all texture sublevels down to 1 by 1 pixels for hardware that supports mipmapped textures. Check the <see cref="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelCount" /> parameter to see the number of levels generated.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> constants. It is good practice to match the usage parameter with the <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the format of all levels in the texture.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.FromBitmap(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a texture resource from a bitmap.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Texture" />.</param>
      <param name="image">A <see cref="T:System.Drawing.Bitmap" /> used to create the texture.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> constants. It is good practice to match the usage parameter with the <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a texture resource from a stream object.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</param>
      <param name="data">A <see cref="T:System.IO.Stream" /> used to create the texture.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> constants. It is good practice to match the usage parameter with the <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the texture should be placed.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a level description of a texture resource.</summary>
      <param name="level">Level of the texture resource. This method returns a surface description for the level specified by this parameter.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.SurfaceDescription" /> structure that describes the returned level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DTexture9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetSurfaceLevel(System.Int32)">
      <summary>Retrieves the specified texture surface level.</summary>
      <param name="level">Level of the texture resource. This method returns a surface for the level specified by this parameter. The top-level surface is denoted by 0.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object that represents the returned surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="pitch">Pitch of the returning data.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">A  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.op_Equality(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.op_Inequality(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Texture.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.UnlockRectangle(System.Int32)">
      <summary>Unlocks a rectangle on a texture resource.</summary>
      <param name="level">Level of the texture resource to unlock.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Texture.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Texture.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DTexture9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureStateManager">
      <summary>Contains texture states for the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureStateManager.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaArgument0">
      <summary>Defines settings for the alpha channel selector operand for triadic (multiply, add, and linear interpolation) operations identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaArgument1">
      <summary>Defines the texture-stage state as the first alpha argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaArgument2">
      <summary>Defines the texture-stage state as the second alpha argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaOperation">
      <summary>Defines the texture-stage state as a texture alpha-blending operation identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.BumpEnvironmentLuminanceOffset">
      <summary>Defines a floating-point offset value for bump-map luminance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.BumpEnvironmentLuminanceScale">
      <summary>Defines a floating-point scale value for bump-map luminance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.BumpEnvironmentMaterial00">
      <summary>Defines the texture-stage state as a floating-point value for the [0][0] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.BumpEnvironmentMaterial01">
      <summary>Defines the texture-stage state as a floating-point value for the [0][1] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.BumpEnvironmentMaterial10">
      <summary>Defines the texture-stage state as a floating-point value for the [1][0] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.BumpEnvironmentMaterial11">
      <summary>Defines the texture-stage state as a floating-point value for the [1][1] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorArgument0">
      <summary>Defines settings for the third color operand for triadic (multiply, add, and linear interpolation) operations identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorArgument1">
      <summary>Defines the texture-stage state as the first color argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorArgument2">
      <summary>Defines the texture-stage state as the second color argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation">
      <summary>Defines the texture-stage state as a texture color-blending operation identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ConstantColor">
      <summary>Defines the per-stage constant color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ConstantColorValue">
      <summary>Defines the per-stage constant color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.ResultArgument">
      <summary>Selects the destination register for the result of the current stage identified by <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.TextureCoordinateIndex">
      <summary>Defines the index of the texture coordinate set to use with the current texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManager.TextureTransform">
      <summary>Controls the transformation of texture coordinates for the current texture stage.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureStateManagerCollection">
      <summary>Collection of <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManager" /> objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStateManagerCollection.TextureState(System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManager" /> object at the given <see cref="P:Microsoft.DirectX.Direct3D.TextureStateManagerCollection.TextureState(System.Int32)" />.</summary>
      <param name="index">Integer that represents the <see cref="T:Microsoft.DirectX.Direct3D.TextureStateManager" /> object to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TooManyOperationsException">
      <summary>The application is requesting more texture-filtering operations than the device supports.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyOperationsException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyOperationsException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyOperationsException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TooManyOperationsException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Transforms">
      <summary>Allows applications to specify and obtain matrix transformations; for example, the world, view, and transformation matrices used for Microsoft Direct3D object rendering.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.GetWorldMatrixByIndex(System.Int32)">
      <summary>Retrieves a world matrix transform by its index.</summary>
      <param name="index">Value between 0 and 255 that indicates the index of the world matrix to retrieve.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets the world matrix by its index.</summary>
      <param name="index">Value between 0 and 255 that indicates the index of the world matrix to set.</param>
      <param name="value">A <see cref="T:Microsoft.DirectX.Matrix" /> value to which the specified world matrix is set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Projection">
      <summary>Retrieves or sets the projection transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture0">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture0" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture1">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture1" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture2">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture2" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture3">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture3" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture4">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture4" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture5">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture5" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture6">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture6" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture7">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture7" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.View">
      <summary>Retrieves or sets the view transformation matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World">
      <summary>Retrieves or sets the first world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World1">
      <summary>Retrieves or sets the second world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World2">
      <summary>Retrieves or sets the third world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World3">
      <summary>Retrieves or sets the fourth world matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException">
      <summary>The device does not support a specified texture-blending argument for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException">
      <summary>The device does not support a specified texture-blending operation for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException">
      <summary>The device does not support a specified texture-blending argument for color values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException">
      <summary>The device does not support a specified texture-blending operation for color values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException">
      <summary>The device does not support the specified texture factor value. Not used; provided only to support older drivers.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException">
      <summary>The device does not support the specified texture filter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBuffer">
      <summary>Manipulates vertex buffer resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexBuffer.Created">
      <summary>Occurs after a device is reset and the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> is re-created.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexBuffer.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9,System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9" /> interface pointer.</param>
      <param name="tType" />
      <param name="iNumVerts" />
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the vertex buffer.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="vertexFormat">Combination of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="Pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9" /> interface pointer.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the vertex buffer.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="vertexFormat">Combination of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class in which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the vertex buffer.</param>
      <param name="sizeOfBufferInBytes">Size of the vertex buffer in bytes. If <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> is set to 0, <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> must be large enough to contain at least one vertex, but it need not be a multiple of the vertex size. If <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> is not set to 0, <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> is not validated. See Remarks.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="vertexFormat">Combination of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class in which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="typeVertexType">Member of the <see cref="T:System.Type" /> enumerated type that indicates the type of vertex data the buffer holds. This can be a value type or any type that contains only value types.</param>
      <param name="numVerts">Maximum number of vertices the buffer can hold.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the vertex buffer.</param>
      <param name="usage">Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> flags. It is good practice to match the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> parameter in the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor" /> constructor with the behavior flags in the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. See Remarks.</param>
      <param name="vertexFormat">Combination of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes a valid memory class in which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DVertexBuffer9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains the vertex buffer memory.</summary>
      <param name="offsetToLock">Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" />.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains the vertex buffer memory.</summary>
      <param name="offsetToLock">Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" />.</param>
      <param name="sizeToLock">Size of the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" />.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a range of vertex data and obtains the vertex buffer memory.</summary>
      <param name="offsetToLock">Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" /> and <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock" />.</param>
      <param name="typeVertex">A <see cref="T:System.Type" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.raise_Created(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" />.<see cref="E:Microsoft.DirectX.Direct3D.VertexBuffer.Created" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.VertexBuffer.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.SetData(System.Object,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks, sets, and unlocks a range of vertex data.</summary>
      <param name="data">An <see cref="T:System.Object" /> that contains the data to copy into the vertex buffer. This can be any value type or any type that contains only value types.</param>
      <param name="lockAtOffset">Offset in the vertex buffer to set. To set the entire buffer, set this parameter to 0.</param>
      <param name="flags">Zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> locking flags that describe the type of lock to perform when setting the buffer. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />, and <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Unlock">
      <summary>Unlocks vertex data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.Description">
      <summary>Retrieves a description of the vertex buffer resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.SizeInBytes">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> data, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexDeclaration">
      <summary>Encapsulates the vertex shader declaration.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9,Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9" /> interface pointer.</param>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" />.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" />.</param>
      <param name="vertexElements">Array of <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> flags that make up a vertex shader declaration. The array must end with the value in the <see cref="F:Microsoft.DirectX.Direct3D.VertexElement.VertexDeclarationEnd" /> field.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="device">The <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" />.</param>
      <param name="vertexElements">A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object containing <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> flags that make up a vertex shader declaration.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetDeclaration">
      <summary>Gets the vertex shader declaration.</summary>
      <returns>Array of vertex elements that make up a vertex shader declaration. The array ends with the value in the <see cref="F:Microsoft.DirectX.Direct3D.VertexElement.VertexDeclarationEnd" /> field.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DVertexDeclaration9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.op_Equality(Microsoft.DirectX.Direct3D.VertexDeclaration,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.op_Inequality(Microsoft.DirectX.Direct3D.VertexDeclaration,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to create the current vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexShader">
      <summary>Encapsulates the functionality of a vertex shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexShader.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VertexShader.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9" /> interface pointer.</param>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.GraphicsStream)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> class.</summary>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="functionToken">Reference to a <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that represents the vertex shader function tokens to use.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> class.</summary>
      <param name="device">Reference to an instance of a <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</param>
      <param name="functionToken">Integer array representing the vertex shader function tokens that specify the blending operations.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetFunction">
      <summary>Retrieves an array that contains shader data.</summary>
      <returns>Array that contains the shader data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DVertexShader9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.op_Equality(Microsoft.DirectX.Direct3D.VertexShader,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.op_Inequality(Microsoft.DirectX.Direct3D.VertexShader,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.VertexShader.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.Device">
      <summary>Retrieves the Microsoft Direct3D device associated with a vertex shader object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexTextureCoordinate">
      <summary>Constructs bit patterns that are used to identify texture coordinate formats in a flexible vertex format description.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size1(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-1 formats within a flexible vertex format description.</summary>
      <param name="coordIndex">Value that identifies the texture coordinate set to which the texture coordinate size (1-, 2-, 3-, or 4-dimensional) applies.</param>
      <returns>One or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size2">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-2 formats within a flexible vertex format description.</summary>
      <returns>One or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size3(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-3 formats within a flexible vertex format description.</summary>
      <param name="coordIndex">Value that identifies the texture coordinate set to which the texture coordinate size (1-, 2-, 3-, or 4-dimensional) applies.</param>
      <returns>One or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size4(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-4 formats within a flexible vertex format description.</summary>
      <param name="coordIndex">Value that identifies the texture coordinate set to which the texture coordinate size (1-, 2-, 3-, or 4-dimensional) applies.</param>
      <returns>One or more <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Volume">
      <summary>Manipulates volume resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Volume.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.Volume.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> class.</summary>
      <param name="pUnk">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9,Microsoft.DirectX.Direct3D.VolumeTexture)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9" /> interface pointer.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> associated with the volume.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.FreePrivateData(System.Guid)">
      <summary>Frees the specified private data associated with the current volume.</summary>
      <param name="guidData">A <see cref="T:System.Guid" /> that identifies the private data to free.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetContainer(System.Guid)">
      <summary>Provides access to the parent volume texture object, if the current surface is a child level of a volume texture.</summary>
      <param name="interfaceId" />
      <returns>An <see cref="T:System.Object" /> that represents the returned container.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DVolume9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetPrivateData(System.Guid)">
      <summary>Copies the private data associated with the volume to a provided buffer.</summary>
      <param name="guidData">A <see cref="T:System.Guid" /> that represents the identifier of the private data being requested.</param>
      <returns>A <see cref="T:System.Byte" /> array that contains the requested data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> object that represents the box to lock.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> object that describes the locked region.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> object that describes the locked region.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> object that represents the box to lock.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock">Value that specifies the <see cref="T:System.Type" /> of the lock.</param>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> object that represents the box to lock.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> object that describes the locked region.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Volume.LockBox" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock">Value that specifies the <see cref="T:System.Type" /> of the lock.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> object that describes the locked region.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Volume.LockBox" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock">Value that specifies the <see cref="T:System.Type" /> of the lock.</param>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> object that represents the box to lock.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Volume.LockBox" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock">Value that specifies the <see cref="T:System.Type" /> of the lock.</param>
      <param name="flags">Combination of zero or more <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" /> that describe the type of lock to perform. See Remarks.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returned array. The maximum number of <see cref="M:Microsoft.DirectX.Direct3D.Volume.LockBox" /> allowed is three.</param>
      <returns>An <see cref="T:System.Array" /> that represents the locked box region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.Volume.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.SetPrivateData(System.Guid,System.Byte[])">
      <summary>Associates data with the volume that is intended for use by the application, not by Microsoft Direct3D.</summary>
      <param name="guidData">A <see cref="T:System.Guid" /> that represents the identifier of the private data to set.</param>
      <param name="privateData">A <see cref="T:System.Byte" /> array that contains the private data for the current volume.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.UnlockBox">
      <summary>Unlocks a box on a volume resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.UpdateUnmanagedPointer(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9)">
      <summary>Updates the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object. This method supports the Microsoft .NET Framework infrastructure and is not intended to be used directly in your code.</summary>
      <param name="pInterface">Pointer to the <see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9" /> structure used to update the unmanaged pointer for this <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Description">
      <summary>Retrieves the description of a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Device">
      <summary>Retrieves the Microsoft Direct3D device associated with a sprite object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeTexture">
      <summary>Manipulates a volume texture resource.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VolumeTexture.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VolumeTexture.Dispose" /> method is called or when the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object is finalized and collected by the garbage collector of the Microsoft .NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.AddDirtyBox(Microsoft.DirectX.Direct3D.Box)">
      <summary>Adds a dirty region to a volume texture resource.</summary>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that specifies the dirty region to add. Omitting this parameter expands the dirty region to cover the entire volume texture.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.AddDirtyBox">
      <summary>Adds a dirty region to a volume texture resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class.</summary>
      <param name="pInterop">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9" /> interface pointer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(System.IntPtr)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class.</summary>
      <param name="unmanagedObject">Pointer to an unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9" /> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class.</summary>
      <param name="lp">Unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9" /> interface pointer.</param>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the volume texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class.</summary>
      <param name="device">A <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object to associate with the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object.</param>
      <param name="width">Width of the top level of the volume texture, in pixels. This value must be a power of two if the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMapPower2" /> member is set. See Remarks.</param>
      <param name="height">Height of the top level of the volume texture, in pixels. This value must be a power of two if the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMapPower2" /> member is set. See Remarks.</param>
      <param name="depth">Depth of the top level of the volume texture, in pixels. This value must be a power of two if the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMapPower2" /> member is set. See Remarks.</param>
      <param name="numLevels">Number of levels in the texture. If this value is 0, Microsoft Direct3D generates all texture sublevels down to 1x1 pixels for hardware that supports mipmapped volume textures. Check the <see cref="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelCount" /> parameter for the number of levels generated.</param>
      <param name="usage">Usage type for this <see cref="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor" />.</param>
      <param name="format">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumerated type that describes the format of all levels in the volume texture.</param>
      <param name="pool">Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumerated type that describes the memory class into which the volume texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.Dispose">
      <summary>Immediately releases the unmanaged resources used by the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.Finalize">
      <summary>Allows the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a level description of a volume texture resource.</summary>
      <param name="level">Value that identifies a level of the volume texture resource.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.VolumeDescription" /> structure that describes the returned volume texture level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetObjectByValue(System.Int32)">
      <summary>This member supports the infrastructure for Microsoft DirectX 9.0 for Managed Code and is not intended to be used directly from your code.</summary>
      <param name="uniqueKey">Object identifier.</param>
      <returns>Pointer to the unmanaged Component Object Model (COM) interface, IDirect3DVolumeTexture9, which allows unmanaged COM clients to create an instance of the managed <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class. Not supported.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetVolumeLevel(System.Int32)">
      <summary>Retrieves the specified volume texture level.</summary>
      <param name="level">Value that identifies a level of the volume texture resource.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> object that represents the returned volume level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> structure that describes the locked region.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> structure that describes the locked region.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <returns>A <see cref="T:Microsoft.DirectX.GraphicsStream" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> structure that describes the locked region.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="lockedVolume">A <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> structure that describes the locked region.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">A <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">A <see cref="T:System.Type" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.Discard" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate" />, <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock" />, and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly" />. For a description of the flags, see <see cref="T:Microsoft.DirectX.Direct3D.LockFlags" />.</param>
      <param name="ranks">Array of one to three <see cref="T:System.Int32" /> values that indicate the dimensions of the returning <see cref="T:System.Array" />.</param>
      <returns>An <see cref="T:System.Array" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.op_Equality(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.VolumeTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.op_Inequality(Microsoft.DirectX.Direct3D.VolumeTexture,Microsoft.DirectX.Direct3D.VolumeTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.DirectX.Direct3D.VolumeTexture.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be this object.</param>
      <param name="i2">Arguments to pass to the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.UnlockBox(System.Int32)">
      <summary>Unlocks a box on a volume texture resource.</summary>
      <param name="level">Value that specifies a  level of the volume texture resource to unlock.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTexture.Disposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeTexture.UnmanagedComPointer">
      <summary>Returns the unmanaged Component Object Model (COM)<see cref="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9" /> interface pointer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WasStillDrawingException">
      <summary>The device was still drawing.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException">
      <summary>The pixel format of the texture surface is not valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException" /> class.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds all of the data needed to serialize or deserialize the object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that describes the source and destination serialized stream.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
      <param name="inner">An <see cref="T:System.Exception" /> object that represents errors that occur during application execution.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException" /> class.</summary>
      <param name="message">String that contains the error message to display.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BackBufferType">
      <summary>Defines constants that identify the type of back buffers in a swap chain.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.">
      <summary>Nonstereo swap chain (one or more nonstereo back buffers).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BasisType">
      <summary>Defines the basis type of a high-order patch surface.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.">
      <summary>An interpolating basis defines the surface so that it passes through all of the specified input vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.">
      <summary>Input vertices are treated as control points of a B-spline surface. In general, the generated surface does not contain the specified control vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.">
      <summary>Input vertices are treated as a series of Bezier patches. The number of vertices specified must be divisible by 3 + 1; portions of the mesh beyond this criterion are not rendered. Full continuity is assumed between sub-patches in the interior of the surface rendered by each call. Only the vertices at the corners of each sub-patch are guaranteed to lie on the resulting surface.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Blend">
      <summary>Defines the supported . (The RGBA values of the source and destination are indicated by the subscripts s and d.)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (0, 0, 0, 0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Inverted constant color blending factor used by the frame-buffer blender. This blend mode is supported only if the <see cref="T:Microsoft.DirectX.Direct3D.BlendCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor" /> property is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if the <see cref="T:Microsoft.DirectX.Direct3D.BlendCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor" /> property is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As), and destination blend factor is (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only if the <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.SourceBlend" /> property is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Obsolete. To achieve the same effect, set the source and destination blend factors to <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha" /> and <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha" /> in separate calls.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (f, f, f, 1); f = min(A, 1 - Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (Rd, Gd, Bd, Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (Ad, Ad, Ad, Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (As, As, As, As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (Rs, Gs, Bs, As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.">
      <summary>Blend factor is (1, 1, 1, 1).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BlendOperation">
      <summary>Defines the supported blend operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.">
      <summary>Result is the destination subtracted from the source. Result = Source - Destination</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.">
      <summary>Result is the maximum of the source and destination. Result = MAX(Source, Destination)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.">
      <summary>Result is the minimum of the source and destination. Result = MIN(Source, Destination)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.">
      <summary>Result is the source subtracted from the destination. Result = Destination - Source</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.">
      <summary>Result is the destination added to the source. Result = Source + Destination</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClearFlags">
      <summary>Specifies the buffer to use when calling the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.">
      <summary>Specifies a render target.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.">
      <summary>Specifies a stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.">
      <summary>Specifies a z-buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipStatusFlags">
      <summary>Defines the current clip status.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the back plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the front plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>Combination of all clip flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the bottom plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the top plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the right plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.">
      <summary>All vertices are clipped by the left plane of the viewing frustum.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorSource">
      <summary>Defines the location at which a color or color component must be accessed for lighting calculations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.">
      <summary>Use the specular vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.">
      <summary>Use the diffuse vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.">
      <summary>Use the color from the current material.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorWriteEnable">
      <summary>Defines values that are used to specify a channel in the <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" /> class type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.">
      <summary>Alpha channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.">
      <summary>Blue channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.">
      <summary>Green channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.">
      <summary>Red channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.">
      <summary>All channels of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.">
      <summary>The red, green, and blue channels of a buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Compare">
      <summary>Defines the supported compare functions in the <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" /> class type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Always pass the test.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Always fail the test.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Accept the new pixel if its value is greater than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Accept the new pixel if its value does not equal the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Accept the new pixel if its value is greater than the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Accept the new pixel if its value is less than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Accept the new pixel if its value is equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.">
      <summary>Accept the new pixel if its value is less than the value of the current pixel.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CreateFlags">
      <summary>Defines the flags to use when creating a device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Indicates to the Microsoft Direct3D runtime not to alter the focus window in any way. Use with caution! The burden of supporting focus management events (ALT-TAB, and so on) falls on the application, and appropriate responses (switching display mode, and so on) should be coded.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Specifies that resources be managed by Microsoft Direct3D instead of the driver. Microsoft Direct3D calls will fail for resource errors such as insufficient video memory.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>The application requests that the device drive all heads that the master adapter owns (this flag is illegal on nonmaster adapters). If the flag is set, the presentation parameters passed to <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> should be an array of <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> that contains exactly <see cref="P:Microsoft.DirectX.Direct3D.Caps.NumberOfAdaptersInGroup" /> elements. The runtime assigns each element to each head in <see cref="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinalInGroup" /> numeric order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Specifies that resources be managed by Microsoft Direct3D instead of the driver. Microsoft Direct3D calls will not fail for resource errors such as insufficient video memory.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Specifies mixed vertex processing (both software and hardware).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Specifies hardware vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Specifies software vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Specifies that Microsoft Direct3D not support Get calls for anything that can be stored in a state block. Also instructs Microsoft Direct3D to withhold emulation services for vertex processing, which means that if the device does not support vertex processing, the application can use only post-transformed vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Indicates that the application requested multithread safety in Microsoft Direct3D. This causes Microsoft Direct3D to check its global critical section more frequently, which can degrade performance. Starting in the Microsoft DirectX 9.0 SDK Update (Summer 2003), this enumerated value is always specified unless the <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.ForceNoMultiThreadedFlag" /> is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.">
      <summary>Indicates that the application needs either floating-point unit (FPU) exceptions or double-precision FPU exceptions enabled. By default, Microsoft Direct3D uses single precision.Because Microsoft Direct3D sets the FPU state every time it is called, setting this flag reduces Microsoft Direct3D performance.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeMapFace">
      <summary>Defines the faces of a cube map in the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.">
      <summary>Negative z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.">
      <summary>Positive z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.">
      <summary>Negative y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.">
      <summary>Positive y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.">
      <summary>Negative x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.">
      <summary>Positive x-face of the cube map.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Cull">
      <summary>Defines the supported culling modes, which specify how back faces are culled during geometry rendering.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.">
      <summary>Cull back faces with counterclockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.">
      <summary>Cull back faces with clockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.">
      <summary>Do not cull back faces.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationMethod">
      <summary>Defines the declaration methods for a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Looks up a pre-sampled displacement map. The input type must be set to <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Unused" />, and the stream index and stream offset must be set to 0. The output type for this operation is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1" />. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Looks up a displacement map. The input type can be <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float2" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4" />. Only the .x and .y components are used for the texture map lookup. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1" />. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Copies out the u and v values at a point on the rectangle or triangle patch. This results in a 2-D float. The input type must be set to <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Unused" />; the output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float2" />. The input stream and offset also are unused, but must be set to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Computes the normal at a point on the rectangle or triangle patch as the cross product of the two tangents. The input type can be any of the <see cref="T:Microsoft.DirectX.Direct3D.DeclarationType" /> float values, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Color" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4" />. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Computes the tangent at a point on the rectangle or triangle patch in the v direction. The input type can be <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Color" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4" />. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Computes the tangent at a point on the rectangle or triangle patch in the u direction. The input type can be <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Color" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4" />. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.">
      <summary>Default value. The tessellator copies the vertex data (or the spline data if it is operating on a patch) without performing additional calculations on it. The input and output types can be any value. When the tessellator is used, this element is interpolated; otherwise, vertex data is copied into the input register.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationType">
      <summary>Defines declaration types for a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Four 16-bit floating-point values expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Two 16-bit floating-point values expanded to (value, value, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>3-D signed 10 10 10 format, normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>3-D unsigned 10 10 10 format, expanded to (value, value, value, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Normalized 4-D unsigned short, expanded to (First byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Normalized, 2-D unsigned short, expanded to (First byte/65535.0, second byte/65535.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Normalized, 4-D signed short, expanded to (First byte/32767.0, second byte/32767.0, third byte/32767.0, fourth byte/32767.0). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Normalized, 2-D signed short, expanded to (First byte/32767.0, second byte/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Each of 4 bytes is normalized by dividing to 255.0. This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>4-D signed short, expanded to (value, value, value, value).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>2-D signed short, expanded to (value, value, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>4-D unsigned byte.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>4-D float, expanded to (float, float, float, float).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>3-D float, expanded to (float, float, float, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>2-D float, expanded to (float, float, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>1-D float, expanded to (float, 0, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>Type field in the declaration is unused. This is designed for use with <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.UV" /> and <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUpPresampled" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.">
      <summary>4-D packed unsigned bytes, mapped to 0 to 1 range. Input is in <see cref="T:System.Int32" /> format (ARGB) expanded to (R, G, B, A).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationUsage">
      <summary>Defines declaration usage for a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex data contains depth data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex data contains sampler data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Sample" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the displacement value to look up. This flag can be used only with <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUpPresampled" /> or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUp" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex data contains fog data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Fog" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies a fog blend value to use after pixel shading is finished. This flag applies to pixel shaders prior to version ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex data contains transformed position data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PositionTransformed" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the transformed position. When a declaration that contains this flag is set, the pipeline does not perform vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Single positive floating-point value. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TessellateFactor" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies a tessellation factor used in the tessellation unit to control the rate of tessellation. For more information about the data type, see <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex binormal data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex tangent data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Texture coordinate data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TextureCoordinate" />, n) specifies texture coordinates in fixed function vertex processing and in pixel shaders prior to ps_3_0. These coordinates can be used to pass user-defined data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Blending indices data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendIndices" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies matrix indices for fixed function vertex processing using indexed paletted skinning.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Blending weight data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendWeight" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the blend weights in fixed function vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex data contains diffuse or specular color. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Color" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the diffuse color in the fixed function vertex shader and in pixel shaders prior to ps_3_0. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Color" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 1) specifies the specular color in the fixed function vertex shader and in pixel shaders prior to ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Point size data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PointSize" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Vertex normal data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies vertex normals for fixed function vertex processing and the N-patch tessellator. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 1) specifies vertex normals for fixed function vertex processing for skinning.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.">
      <summary>Position data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Position" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0 ) specifies the nontransformed position in fixed function vertex processing and the N-patch tessellator. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Position" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 1) specifies the nontransformed position in the fixed function vertex shader for skinning.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DegreeType">
      <summary>Defines the degree of the variables in an equation that describes a curve.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.">
      <summary>Curve is described by variables of fourth order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.">
      <summary>Curve is described by variables of third order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.">
      <summary>Curve is described by variables of second order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.">
      <summary>Curve is described by variables of first order.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DepthFormat">
      <summary>Defines depth buffer formats.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>Format is unknown.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A lockable format in which the depth value is represented as a standard IEEE floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 16-bit luminance format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A nonlockable format that contains 24 bits of depth (in a 24-bit floating-point format - 20E4) and 8 bits of stencil.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 16-bit z-buffer bit depth in which 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 32-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceType">
      <summary>Specifies a device type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.">
      <summary>A null version of the reference rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.">
      <summary>A pluggable software device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.">
      <summary>Microsoft Direct3D features are implemented in software; however, the reference rasterizer uses special CPU instructions whenever possible.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.">
      <summary>Hardware rasterization. Shading is done with software, hardware, or mixed transform and lighting.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplacementMap">
      <summary>Identifies a texture sampler stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.">
      <summary>Texture sampler stage 3.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.">
      <summary>Texture sampler stage 2.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.">
      <summary>Texture sampler stage 1.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.">
      <summary>Texture sampler stage 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.">
      <summary>Internal constant used by the texture sampler in the tessellator.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FillMode">
      <summary>Defines constants that describe the fill mode.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.">
      <summary>Fill solids.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.">
      <summary>Fill wireframes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.">
      <summary>Fill points.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FogMode">
      <summary>Defines constants that describe the fog mode.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.">
      <summary>Fog effect intensifies in a linear manner between the start and end points, according to the following formula. </summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.">
      <summary>Fog effect intensifies exponentially with the square of the distance, according to the following formula. </summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.">
      <summary>Fog effect intensifies exponentially, according to the following formula. </summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.">
      <summary>No fog effect.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Format">
      <summary>Defines various types of surface formats. For a more complete discussion, see <see cref="N:SurfaceFormats" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Nonlockable format that contains 24 bits of depth (in a 24-bit floating-point format - 20e4) and 8 bits of stencil.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Lockable format in which the depth value is represented as a standard IEEE floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 2-bit z-buffer bit depth that uses 24 bits for the depth channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>16-bit luminance only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit z-buffer bit depth that reserves 15 bits for the depth channel and 1 bit for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit packed RGB format analogous to YUY2 (Y0U0, Y1V0, Y2U2, etc.). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the high 8 bits) and 8 bits of red (in the low 8 bits). The second pixel contains 8 bits of green (in the high 8 bits) and 8 bits of blue (in the low 8 bits). Together, the two pixels share the red and blue components, and each has a unique green component (G0R0, G1B0, G2R2, etc.). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed function pixel shader, the hardware should normalize to the range of 0.f to 1.f and treat it as the YUY2 texture. Hardware that exposes this format must have <see cref="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue" /> set to a value capable of handling that range.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit packed RGB format analogous to UYVY (U0Y0, V0Y1, U2Y2, etc.). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the low 8 bits) and 8 bits of red (in the high 8 bits). The second pixel contains 8 bits of green (in the low 8 bits) and 8 bits of blue (in the high 8 bits). Together, the two pixels share the red and blue components, and each has a unique green component (R0G0, B0G1, R2G2, etc.). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed function pixel shader, the hardware should normalize to the range of 0.f to 1.f and treat it as the YUY2 texture. Hardware that exposes this format must have <see cref="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue" /> set to a value capable of handling that range.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit normal compression format. The texture sampler computes the C channel from the signed most significant byte and least significant byte values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Floating-point surface format that uses 32 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Floating-point surface format that uses 32 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Floating-point surface format that uses 32 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 64-bit float format that uses 16 bits per channel (alpha, blue, green, red).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Floating-point surface format that uses 16 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Floating-point surface format that uses 16 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>MET1 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 64-bit bump-map format that uses 16 bits for each component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Vertex buffer surface.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>DXT5 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>DXT4 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>DXT3 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>DXT2 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>DXT1 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>YUY2 format (PC98 compliance).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>UYVY format (PC98 compliance).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit bump-map format that uses 2 bits for alpha and 10 bits each for w, v, and u data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit bump-map format that uses 16 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit bump-map format that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit bump-map format with luminance that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit bump-map format with luminance that uses 6 bits for luminance and 5 bits each for v and u data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit bump-map format that uses 8 bits each for u and v data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>An 8-bit format that uses 4 bits each for alpha and luminance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit format that uses 8 bits each for alpha and luminance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>An 8-bit format with luminance only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>An 8-bit format, color indexed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>An 8-bit format, color indexed with 8 bits of alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 64-bit pixel format that uses 16 bits per component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit pixel format that uses 10 bits each for red, green, and blue, and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit pixel format that uses 16 bits each for green and red.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit RGB pixel format that reserves 8 bits for each color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit ARGB pixel format, with alpha, that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit pixel format that uses 10 bits for each color and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit RGB pixel format that uses 4 bits per color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit ARGB texture format that uses 8 bits for alpha, 3 bits each for red and green, and 2 bits for blue.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>8-bit alpha only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>An 8-bit RGB texture format that uses 3 bits for red, 3 bits for green, and 2 bits for blue.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit ARGB pixel format that uses 4 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit pixel format that reserves 5 bits for each color and 1 bit for alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit pixel format that reserves 5 bits for each color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 16-bit RGB pixel format that uses 5 bits for red, 6 bits for green, and 5 bits for blue.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit RGB pixel format that reserves 8 bits for each color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 32-bit ARGB pixel format, with alpha, that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>A 24-bit RGB pixel format that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.">
      <summary>Unknown surface format.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IssueFlags">
      <summary>Defines issue flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IssueFlags.">
      <summary>Specifies that the runtime issue the end of a query.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IssueFlags.">
      <summary>Specifies that the runtime issue the beginning of a query.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LightType">
      <summary>Defines the light type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.">
      <summary>Light is a directional light source. It is equivalent to using a point light source at an infinite distance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.">
      <summary>Light is a spotlight source. It is similar to a point light, except that the area of illumination is limited to a cone. This light type has a direction and several other parameters that determine the shape of the cone it produces. For more information, see the <see cref="T:Microsoft.DirectX.Direct3D.Light" /> class.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.">
      <summary>Light is a point source. The light has a position in space and radiates light in all directions.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LockFlags">
      <summary>Defines the type of lock to perform.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>The application overwrites every location within the region being locked, using a write-only operation. This is a valid option when using dynamic textures, dynamic vertex buffers, and dynamic index buffers. For vertex and index buffers, the application discards the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall. For textures, the application overwrites every location within the region being locked, using a write-only operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>The application is allowed to gain back CPU cycles if the driver cannot lock the surface immediately. When this is the case, the lock call throws <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" />. This flag can be used only when calling <see cref="T:Microsoft.DirectX.Direct3D.Surface" />.<see cref="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle" /> on surfaces created using <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)" />, <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" />, or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" />. It also can be used with a back buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>By default, a lock on a resource adds a dirty region to that resource. This flag prevents any changes to the dirty state of the resource. Applications should use this flag when they have additional information about the set of regions changed during the lock operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>By default, a video memory lock reserves a system-wide critical section, guaranteeing that no display mode changes will occur for the duration of the lock. This flag prevents the system-wide critical section from being held while the lock is on. While the lock operation is time-consuming, it enables the system to perform other duties, such as moving the mouse cursor. This flag is useful for locks of long duration; for example, locking the back buffer for software rendering that otherwise would slow the system.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>The application is guaranteed not to overwrite any data in the vertex and index buffers. This flag allows the driver to return immediately and continue rendering, using this vertex buffer. If the flag is not used, the driver must finish rendering before returning from locking.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>The application does not write to the buffer. This flag enables resources stored in non-native formats to save the recompression step when unlocking.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.">
      <summary>Use no locks.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MultiSampleType">
      <summary>Defines the levels of full-scene multisampling that the device can apply.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 16 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 15 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 14 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 13 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 12 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 11 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables 10 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables nine levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables eight levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables seven levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables six levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables five levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables four levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables three levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables two levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Enables the multisample quality value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.">
      <summary>Specifies no full-scene multisampling, and enables swap effects other than <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.SwapEffect.Discard" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchEdge">
      <summary>Defines whether the current tessellation mode is discrete or continuous.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchEdge.">
      <summary>Continuous edge style. Tessellation is specified as float values, which can be varied smoothly to reduce popping artifacts.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchEdge.">
      <summary>Discrete edge style. Tessellation can be specified as float values, but they will be truncated to integers.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Pool">
      <summary>Defines the memory class that holds buffers for a resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.">
      <summary>Resources are placed in system RAM and do not need to be re-created when a device is lost. These resources are not bound by device size or format restrictions; therefore, they cannot be accessed by the Microsoft Direct3D device or set as textures or render targets. They can, however, always be created, locked, and copied.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.">
      <summary>Resources consume system RAM but do not reduce pageable RAM. System memory is not typically accessible by the 3-D device. These resources do not need to be re-created when a device is lost. They can be locked and also used as the source for a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)" /> operation to a memory resource created with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.">
      <summary>Resources are copied automatically to device-accessible memory as needed. Managed resources are backed by system memory and do not need to be re-created when a device is lost. For more information, see <see cref="N:ManagingResources" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.">
      <summary>Resources are placed in the memory pool most appropriate for the set of usages requested for the given resource. This is usually video memory, including both local video memory and accelerated graphics port memory. The <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> pool is separate from <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> and <see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" />, and it specifies that the resource be placed in the preferred memory for device access. Note that <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> never indicates that either <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> or <see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" /> should be chosen as the memory pool type for this resource. Textures placed in the <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> pool cannot be locked unless they are dynamic textures or private four-character code (FOURCC) driver formats. Accessing unlockable textures requires the use of functions such as <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)" />. <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> is probably a better choice than <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> for most applications. Some textures can be locked; for example, those created in driver proprietary pixel formats that are unknown to the Microsoft Direct3D runtime. Swap-chain back buffers, render targets, vertex buffers, and index buffers can be locked. When a device is lost, resources created using <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> must be disposed of before calling <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])" />. Microsoft DirectX 9.0 for Managed Code automatically handles disposal of resources that need it, provided the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> property is set to true (the default setting). For more information, see <see cref="N:LostDevices" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Present">
      <summary>Defines flags that allow the application to request that the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" />.<see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> return immediately when the driver reports that it cannot schedule a presentation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.">
      <summary>Performs gamma correction from linear space to sRGB for windowed swap chains. This flag takes effect only when the driver exposes <see cref="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsLinearToSrgbPresentation" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.">
      <summary>Performs the presentation operation without waiting. If the hardware is busy processing or waiting for a vertical sync interval, the method throws <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.">
      <summary>Returns the maximum number of back buffers supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentFlag">
      <summary>Defines flags that control a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.">
      <summary>Informs the driver that the back buffers contain video data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.">
      <summary>Clips a windowed <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" />blit into the window client area, within the monitor screen area of the video adapter that created the Microsoft Direct3D device. This flag works only on Microsoft Windows 2000 and Windows XP.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.">
      <summary>Enables z-buffer discarding if set when the device or swap chain is created. When this flag is set, the contents of the depth stencil buffer are invalid after either <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" /> are called. Discarding z-buffer data can increase performance and is dependent on the driver. The debug runtime enforces discarding by clearing the z-buffer to some constant value after calling either <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" /> with a different depth surface. Discarding z-buffer data is illegal for all lockable formats, <see cref="F:Microsoft.DirectX.Direct3D.DepthFormat.D16Lockable" />, and <see cref="T:Microsoft.DirectX.Direct3D.DepthFormat" />. Using <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> to specify a lockable format and z-buffer discarding will result in failure. For more information about formats, see <see cref="T:Microsoft.DirectX.Direct3D.Format" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.">
      <summary>Gives the application the ability to lock the back buffer directly. Note that back buffers are not lockable unless the application specifies <see cref="F:Microsoft.DirectX.Direct3D.PresentFlag.LockableBackBuffer" /> when calling <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])" />. Lockable back buffers incur a performance cost on some graphics hardware configurations. Performing a lock operation (or using <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" /> to write on the lockable back buffer) decreases performance on many cards. In this case, consider using textured triangles to move data to the back buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.">
      <summary>Use no presentation flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentInterval">
      <summary>Defines flags that describe the relationship between the adapter refresh rate and the rate at which <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are completed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.">
      <summary>The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.">
      <summary>The driver waits for the vertical retrace period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than every fourth screen refresh. Check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.">
      <summary>The driver waits for the vertical retrace period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than every third screen refresh. Check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.">
      <summary>The driver waits for the vertical retrace period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than every second screen refresh. Check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.">
      <summary>The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than the screen refresh rate; the runtime completes one <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.">
      <summary>Equivalent to setting <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.One" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrimitiveType">
      <summary>Defines the primitives supported by Microsoft Direct3D.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.">
      <summary>Renders the vertices as a triangle fan.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.">
      <summary>Renders the vertices as a triangle strip. The back face culling flag is flipped automatically on even-numbered triangles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.">
      <summary>Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back face culling is affected by the current winding-order render state.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.">
      <summary>Renders the vertices as a single polyline. Calls that use this primitive type fail if the count is less than two.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.">
      <summary>Renders the vertices as a list of isolated straight line segments. Calls that use this primitive type fail if the count is less than two or is odd.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.">
      <summary>Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.QueryType">
      <summary>Defines the query type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for any asynchronous events issued from application programming interface (API) calls.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for the cache hit rate performance measurement for textures and indexed vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries throughput measurement comparisons for help in understanding the performance of an application.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for the percentage of time spent processing pixel shader data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for the percentage of time spent processing vertex shader data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for the percentage of time spent processing data in the driver.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for the percentage of time spent processing pipeline data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>This query result is true if the values from <see cref="F:Microsoft.DirectX.Direct3D.QueryType.TimeStamp" /> queries cannot be guarenteed to be continuous throughout the duration of the <see cref="F:Microsoft.DirectX.Direct3D.QueryType.TimeStampDisjoint" /> query. Otherwise, the query result is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>This query notifies an application if the counter frequency has changed from the <see cref="F:Microsoft.DirectX.Direct3D.QueryType.TimeStamp" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Returns a 64-bit timestamp.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for the number of pixels that pass z-testing. These pixels are for primitives drawn between <see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.Begin" /> and <see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" />. This option enables an application to check the occlusion result against zero. Zero is fully occluded, which means the pixels are not visible from the current camera position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries vertex statistics. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.VertexStats" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries for driver hints about data layout for vertex caching.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.">
      <summary>Queries the resource manager. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.ResourceManager" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderStates">
      <summary>Defines device render states.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Controls the distance-based size attenuation for point primitives. The default value is 1.0f.This render state is active only when <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.PointScaleEnable" /> is set to true. The range for this value is greater than or equal to 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Controls how point sprites are rendered. When set to true, texture coordinates of point sprites are set so that full textures are mapped on each point. When set to false, the vertex texture coordinates are used for the entire point.The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Controls how point sprites are rendered. When set to true, texture coordinates of point sprites are set so that full textures are mapped on each point. When set to false, the vertex texture coordinates are used for the entire point.The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the minimum size to which point sprites can be set. The default value is 1.0f. The range for this value is greater than or equal to 0.0f.Point sprites are clamped to the specified size during rendering. Setting the size to less than 1.0 results in points dropping out, if the point does not cover a pixel center and antialiasing is disabled.Points also will drop out if the size is less than 1.0, if they are being rendered with reduced intensity, and if antialiasing is enabled.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Emissive color source for lighting calculations. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.ColorSource" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.ColorSource.ColorSource.Material" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Ambient color source for lighting calculations. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.ColorSource" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.ColorSource.ColorSource.Material" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specular color source for lighting calculations. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.ColorSource" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.ColorSource.ColorSource.Color2" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Diffuse color source for lighting calculations. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.ColorSource" /> enumerated type. The default value is <see cref="F:Microsoft.DirectX.Direct3D.ColorSource.ColorSource.Color1" />. The value for this render state is used only if <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorVertex" /> is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables automatic normalization of vertex normals. Set to true to enable normalization of vertex normals, or false to disable it. The default value is false.Enabling this feature causes the system to normalize the vertex normals for vertices after transforming them to camera space, an operation that can slow down the system.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies whether to use camera-relative specular highlights or orthogonal specular highlights. Set to true to enable camera-relative specular highlights, or false to use orthogonal specular highlights. The default value is true. Applications that use orthogonal projection should specify false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables per-vertex color. Set to true to enable per-vertex color, or false to disable it. The default value is true.Enabling per-vertex color allows the system to include the color defined for individual vertices in its lighting calculations. For more information, see the following topics.<see cref="F:Microsoft.DirectX.Direct3D.RenderStates.AmbientMaterialSource" /><see cref="F:Microsoft.DirectX.Direct3D.RenderStates.DiffuseMaterialSource" /><see cref="F:Microsoft.DirectX.Direct3D.RenderStates.EmissiveMaterialSource" /><see cref="F:Microsoft.DirectX.Direct3D.RenderStates.SpecularMaterialSource" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The fog formula to use for vertex fog. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.FogMode" /> enumeration. The default fog mode is <see cref="F:Microsoft.DirectX.Direct3D.FogMode.FogMode.None" />. See <see cref="N:Fog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Ambient light color. This value is a <see cref="T:System.Drawing.Color" /> object that specifies the ambient color value. The default value is 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables Microsoft Direct3D lighting. Set to true to enable Microsoft Direct3D lighting, or false to disable it. The default value is true.Only vertices that include a vertex normal are properly lit; vertices that do not contain a vertex normal employ a dot product of 0 in all lighting calculations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables primitive clipping by Microsoft Direct3D. Set to true to enable primitive clipping, or false to disable it. The default value is true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Texture-wrapping behavior for multiple sets of texture coordinates.Valid values for this render state can be any combination of <see cref="F:Microsoft.DirectX.Direct3D.WrapCoordinates.WrapCoordinates.Zero" /> (or <see cref="F:Microsoft.DirectX.Direct3D.Wrap.Wrap.U" />), <see cref="F:Microsoft.DirectX.Direct3D.WrapCoordinates.WrapCoordinates.One" /> (or <see cref="F:Microsoft.DirectX.Direct3D.Wrap.Wrap.V" />), <see cref="F:Microsoft.DirectX.Direct3D.WrapCoordinates.WrapCoordinates.Two" /> (or <see cref="F:Microsoft.DirectX.Direct3D.Wrap.Wrap.W" />), and <see cref="F:Microsoft.DirectX.Direct3D.WrapCoordinates.WrapCoordinates.Three" />. These cause the system to wrap in the direction of the first, second, third, and fourth dimensions, sometimes referred to as the s, t, r, and q directions, for a given texture.The default value for this render state is 0 (wrapping disabled in all directions).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the color used for multiple-texture blending with the <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.TFactor" /> texture blending argument or the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendFactorAlpha" /> texture blending operation. The default value is 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the write mask applied to values written into the stencil buffer. The default mask is 0xFFFFFFFF.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the stencil mask to apply to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is 0xFFFFFFFF.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies a reference value to use for the stencil test. The default value is 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the comparison function to use for the stencil test. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.Compare" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.Compare.Compare.Always" />.The comparison function is used to compare the reference value to a stencil buffer entry. This comparison applies only to the bits in the reference value and stencil buffer entry that are set in the stencil mask (by <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.StencilMask" />).If the comparison is true, the stencil test passes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the stencil operation to perform if both the stencil test and the depth test (z-test) pass. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.StencilOperation.StencilOperation.Keep" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the stencil operation to perform if the stencil test passes and the depth test (z-test) fails. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.StencilOperation.StencilOperation.Keep" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the stencil operation to perform if the stencil test fails. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.StencilOperation.StencilOperation.Keep" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables stenciling. Set to true to enable stenciling, or false to disable it. The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables range-based vertex fog. Set to true to enable range-based vertex fog, or false to use depth-based fog. The default value is false.In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene. All fog methods work as usual, except that they use range instead of depth in the computations. See <see cref="N:Fog" />.Range is the correct factor to use for fog computations, but depth is commonly used instead because it is generally already available, and range is resource-intensive to compute. Using depth to calculate fog has the undesirable effect of making the fogginess of peripheral objects change as the viewer's eye moves; in this case, the depth changes and the range remains constant. Because no hardware currently supports per-pixel range-based fog, range correction is offered only for <see cref="N:VertexFog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Fog density for pixel or vertex fog used in exponential fog modes. Valid fog density values range from 0.0 through 1.0. The default value is 1.0. See <see cref="N:Fog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The depth at which pixel or vertex fog effects end for linear fog mode. The default value is 1.0f.Depth is specified in world space for vertex fog, and in either device space [0.0, 1.0] or world space for pixel fog. For pixel fog, these values are in device space when the system uses z for fog calculations, or in world space when the system uses eye-relative fog (w-fog). See <see cref="N:Fog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The depth at which pixel or vertex fog effects begin for linear fog mode. The default value is 0.0f.Depth is specified in world space for vertex fog, and in either device space [0.0, 1.0] or world space for pixel fog. For pixel fog, these values are in device space when the system uses z for fog calculations, or in world space when the system uses eye-relative fog (w-fog). See <see cref="N:Fog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The fog formula to use for pixel fog. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.FogMode" /> enumeration. The default fog mode is <see cref="F:Microsoft.DirectX.Direct3D.FogMode.FogMode.None" />. See <see cref="N:Fog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables specular highlights. Set to true to enable specular highlights, or false to disable them. The default value is false.Specular highlights are calculated as though every vertex in the object being lit is at the object's origin. This gives the expected results as long as the object is modeled around the origin and the distance from the light to the object is relatively large. In other cases, the results are undefined.When this state is set to true, the specular color is added to the base color after the texture cascade but before alpha blending.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables fog blending. Set to true to enable fog blending, or false to disable it. The default value is false. See <see cref="N:Fog" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Set to true to enable alpha-blended transparency, or false to disable it.The default value is false. The type of alpha blending is determined by the <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.SourceBlend" /> and <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.DestinationBlend" /> render states.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables dither. Set to true to enable dithering, or false to disable it. The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>A member of the <see cref="T:Microsoft.DirectX.Direct3D.Compare" /> enumeration that represents the alpha comparison function.The default value is <see cref="F:Microsoft.DirectX.Direct3D.Compare.Compare.Always" />.The <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.AlphaFunction" /> member enables an application to accept or reject a pixel based on its alpha value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies a reference alpha value against which pixels are tested when alpha testing is enabled. The default value is 0. Values can range from 0x00000000 to 0x000000FF.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the comparison function for the z-buffer test. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.Compare" /> enumeration.The depth value of the pixel is compared to the depth-buffer value. If the depth value of the pixel passes the comparison function, the pixel is written.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies how back-facing triangles are culled, if at all. Set to a member of the <see cref="T:Microsoft.DirectX.Direct3D.Cull" /> enumeration that specifies the culling mode. The default value is <see cref="F:Microsoft.DirectX.Direct3D.Cull.Cull.CounterClockwise" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the destination . The default value is <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.Zero" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the source . The default value is <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.One" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables drawing of the last pixel in a line. Set to true to enable drawing of the last pixel in a line, or false to prevent it. The default value is true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables a per-pixel alpha test. Set to true to enable per-pixel alpha testing, or false to disable it.If the test passes, the pixel is processed by the frame buffer. Otherwise, all frame-buffer processing is skipped for the pixel.The test is done by comparing the incoming alpha value with the reference alpha value, using the comparison function provided by <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.AlphaFunction" />. The reference alpha value is determined by the value set for <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ReferenceAlpha" />.The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Set to true to enable writing to the depth buffer, or false to disable it.The default value is true.This member enables an application to prevent the system from updating the depth buffer with new depth values.If false, depth comparisons are still made according to the render state <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ZBufferFunction" />, assuming that depth buffering is taking place, but depth values are not written to the buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Value used to select the arithmetic operation applied to separate alpha blend when the render state, <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />, is set to true.Valid values are defined by the <see cref="T:Microsoft.DirectX.Direct3D.BlendOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.BlendOperation.BlendOperation.Add" />.If the <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsBlendOperation" /> device capability is not supported, <see cref="F:Microsoft.DirectX.Direct3D.BlendOperation.BlendOperation.Add" /> is performed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>A member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the destination .This value is ignored unless <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> is true.The default value is <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.Zero" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>A member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the source .This value is ignored unless <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> is true.The default value is <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.One" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables the separate for the alpha channel. Set to true to enable separate alpha blend, or false disable it. The default value is false.When set to false, the render targetblending factors and operations applied to alpha are forced to be the same as those defined for color. This mode is effectively hardwired to false on implementations that do not set <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsSeparateAlphaBlend" />.The type of separate alpha blending is determined by <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.SourceBlendAlpha" /> and <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.DestinationBlendAlpha" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Sets or retrieves the depth bias for polygons.The <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.DepthBias" /> value is an integer in the range of 0 through 16 which causes polygons that are physically coplanar to appear separate. Polygons with a high z-bias value appear in front of polygons with a low value, without requiring sorting for drawing order. For example, polygons with a value of 1 appear in front of polygons with a value of 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables render-target writes to be gamma corrected to sRGB. Set to true to enable sRGB writes, or false to disable them. The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>A <see cref="T:System.Drawing.Color" /> object used for a constant blend factor during alpha blending.<see cref="F:Microsoft.DirectX.Direct3D.RenderStates.BlendFactor" /> member is available if <see cref="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor" /> is set in <see cref="P:Microsoft.DirectX.Direct3D.Caps.SourceBlendCaps" /> or <see cref="P:Microsoft.DirectX.Direct3D.Caps.DestinationBlendCaps" /> for the device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Additional <see cref="T:Microsoft.DirectX.Direct3D.ColorWriteEnable" /> values for a device. See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable" />.<see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable3" /> is available if <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsIndependentWriteMasks" /> is set in <see cref="P:Microsoft.DirectX.Direct3D.Caps.PrimitiveMiscCaps" /> for the device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Additional <see cref="T:Microsoft.DirectX.Direct3D.ColorWriteEnable" /> values for a device. See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable" />.<see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable2" /> is available if <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsIndependentWriteMasks" /> is set in <see cref="P:Microsoft.DirectX.Direct3D.Caps.PrimitiveMiscCaps" /> for the device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Additional <see cref="T:Microsoft.DirectX.Direct3D.ColorWriteEnable" /> values for a device. See <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable" />.<see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable1" /> is available if <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsIndependentWriteMasks" /> is set in <see cref="P:Microsoft.DirectX.Direct3D.Caps.PrimitiveMiscCaps" /> for the device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The comparison function used by the counterclockwise (CCW) stencil test. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.Compare" /> enumeration.The test passes if ((ref &amp; mask) stencil_compare_function (stencil &amp; mask)) == true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> to perform if both counterclockwise (CCW) stencil and z-tests pass. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.StencilOperation.StencilOperation.Keep" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> to perform if the counterclockwise (CCW) stencil test passes and the z-test fails. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.StencilOperation.StencilOperation.Keep" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> to perform if the counterclockwise (CCW) stencil test fails. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.StencilOperation.StencilOperation.Keep" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables two-sided stenciling. Set to true to enable two-sided stenciling, or false to disable it.The application should set <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.CullMode" /> to <see cref="F:Microsoft.DirectX.Direct3D.Cull.Cull.None" /> to enable two-sided stencil mode. If the triangle winding order is clockwise, the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> operations are used. If the winding order is counterclockwise, the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> operations are used. See <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables adaptive tessellation. Set to true to enable adaptive tessellation, or false to disable it. The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Amount to adaptively tessellate in the w direction. The default value is 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Amount to adaptively tessellate in the z direction. The default value is 1.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Amount to adaptively tessellate in the y direction. The default value is 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Amount to adaptively tessellate in the x direction. The default value is 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The maximum tessellation level. The default value is 1.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The minimum tessellation level. The default value is 1.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Set to true to enable antialiasing of lines, or false to disable it. The default value is false.The <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.AntialiasedLineEnable" /> member applies to triangles drawn in wireframe mode as well as line-drawing primitive types.When rendering to a multisample render target, this render state is ignored, and all lines are rendered aliased. For antialiased line rendering in multisample render targets, use a <see cref="T:Microsoft.DirectX.Direct3D.Line" /> object, which generates textured polygons.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Used to determine how much bias can be applied to coplanar primitives to reduce z-fighting. The default value is 0.bias = (max * SlopeScaleDepthBias) + DepthBiaswhere max is the maximum depth slope of the triangle being rendered. See <see cref="N:DepthBuffers" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables scissor testing. Set to true to enable scissor testing, or false to disable it. The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The degree of interpolation (linear, cubic, quadratic, or quintic) using the N-patch normal. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.DegreeType" /> enumeration. The default render state is <see cref="F:Microsoft.DirectX.Direct3D.DegreeType.DegreeType.Linear" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The N-patch position interpolation degree. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.DegreeType" /> enumeration that specifies the degree. The default value is <see cref="F:Microsoft.DirectX.Direct3D.DegreeType.DegreeType.Cubic" />.The <see cref="F:Microsoft.DirectX.Direct3D.DegreeType.DegreeType.Linear" /> value also can be used.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>A value used to select the arithmetic operation to apply when the alpha blend render state, <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.AlphaBlendEnable" /> is set to true.Valid values are defined by the <see cref="T:Microsoft.DirectX.Direct3D.BlendOperation" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.BlendOperation.BlendOperation.Add" />.If the <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsBlendOperation" /> device capability is not supported, <see cref="F:Microsoft.DirectX.Direct3D.BlendOperation.BlendOperation.Add" /> is performed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies a floating-point value that controls the tween factor. The default value is 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables a per-channel write for the render target color buffer. Valid values for this render state can be any combination of <see cref="T:Microsoft.DirectX.Direct3D.ColorWriteEnable" /> enumeration members.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables indexed vertex blending. Set to true to enable indexed vertex blending, or false to disable it. The default value is false.When indexed vertex blending is disabled and vertex blending is enabled through <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.VertexBlend" />, it is equivalent to having matrix indices 0, 1, 2, and 3 in every vertex. If indexed vertex blending is enabled (set to true), the user must pass matrix indices with every vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the maximum size to which point sprites can be set. The default value is 64.0f. The value must be less than or equal to <see cref="P:Microsoft.DirectX.Direct3D.Caps.MaxPointSize" /> and greater than or equal to <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.PointSizeMin" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables the debug monitor token. Set to true to enable the debug monitor, or false to disable it. Should be set only for debugging the monitor and is useful for debug builds only.The default value for the debug monitor is true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>The tessellation mode for patch edges. Valid value are from the <see cref="T:Microsoft.DirectX.Direct3D.PatchEdge" /> enumeration. The default render state is <see cref="F:Microsoft.DirectX.Direct3D.PatchEdge.PatchEdge.Discrete" />.Using the <see cref="F:Microsoft.DirectX.Direct3D.PatchEdge.PatchEdge.Continuous" /> tessellation mode helps reduce rendering artifacts.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables use of a multisample buffer as an accumulation buffer. The default value is 0xFFFFFFFF.This render state allows multipass rendering of geometry, in which each pass updates a subset of samples. The state has no effect when rendering to a single sample buffer.Each bit in the <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.MultisampleMask" />, starting at the least significant bit (LSB), controls modification of one of the samples in a multisample render target. Thus, for an 8-sample render target, the low byte contains the eight write enables for each of the eight samples. This property enables use of a multisample buffer as an accumulation buffer. If there are n multisamples and k enabled samples, the resulting intensity of the rendered image should be k/n. Each component RGB of every pixel is factored by k/n. See <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Determines how individual samples are computed when using a multisample render target buffer.When set to true, the multiple samples are computed so that full-scene antialiasing is performed by sampling at different sample positions for each multiple sample.When set to false, the multiple samples are all written with the same sample value, sampled at the pixel center, which allows non-antialiased rendering to a multisample buffer. The default value is true. This render state has no effect when rendering to a single sample buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Controls the distance-based size attenuation for point primitives. The default value is 1.0f.This render state is active only when <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.PointScaleEnable" /> is set to true. The range for this value is greater than or equal to 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Controls the distance-based size attenuation for point primitives. The default value is 1.0f.This render state is active only when <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.PointScaleEnable" /> is set to true. The range for this value is greater than or equal to 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables user-defined clipping planes. Valid values are any DWORD in which the status of each bit (set or not set) toggles the activation state of a corresponding user-defined clipping plane. The default value is 0.The least significant bit (bit 0) controls the first clipping plane at index 0, and subsequent bits control the activation of clipping planes at higher indexes. If a bit is set, the system applies the appropriate clipping plane during scene rendering.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the number of matrices to use to perform geometry blending. Valid values are members of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBlend" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.VertexBlend.VertexBlend.Disable" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Retrieves or sets the fog color as a <see cref="T:System.Drawing.Color" /> object.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the shade mode to use for rendering. Valid values are from the <see cref="T:Microsoft.DirectX.Direct3D.ShadeMode" /> enumeration. The default value is <see cref="F:Microsoft.DirectX.Direct3D.ShadeMode.ShadeMode.Gouraud" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Enables or disables depth buffering. Set to true to enable depth buffering, or false to disable it. The default value is true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>Specifies the size to use for point size computation in cases in which point size is not specified for each vertex. The default value is 1.0f.This value is not used when the vertex contains a point size. The value is defined in screen space units if <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.PointScaleEnable" /> is set to false; otherwise, it is defined in world space units. The range for the value is greater than or equal to 0.0f.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderStates.">
      <summary>A value from the <see cref="T:Microsoft.DirectX.Direct3D.FillMode" /> enumeration that represents the fill mode to apply. The default value is <see cref="F:Microsoft.DirectX.Direct3D.FillMode.FillMode.Solid" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderTargetsMax">
      <summary>Defines the maximum number of simultaneous render targets supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderTargetsMax.">
      <summary>Allows four simultaneous render targets.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceType">
      <summary>Defines resource types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Index buffer resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Vertex buffer resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Cube texture resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Volume texture resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Volume resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Surface resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.">
      <summary>Texture resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResultCode">
      <summary>Defines result codes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Method call is invalid; for example, a method's parameter might not be a valid pointer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Requested device type is not valid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support the queried technique.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device has been lost but can be reset at this time.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device has been lost but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support the specified texture filter.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support the specified texture factor value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Current texture filters cannot be used together.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Application is requesting more texture-filtering operations than the device supports.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support a specified texture-blending argument for the alpha channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support a specified texture-blending operation for the alpha channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support a specified texture-blending argument for color values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Device does not support a specified texture-blending operation for color values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Pixel format of the texture surface is not valid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.">
      <summary>Operation was successful.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SamplerStageStates">
      <summary>Defines the sampler state types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Vertex offset in the presampled displacement map. This is a constant used by the tessellator, its default value is zero.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Element index to use when an element with multiple textures is assigned to the sampler.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Determines whether to use gamma correction. Set to true to enable gamma correction. The default value is false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>The level of detail (LOD) index of the largest map to use. Index values range from 0 to (n-1) where 0 is the largest map. The default value is zero.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Mipmaplevel of detail (LOD) bias. The default value is zero.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Border color represented as a member of the <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Texture-address mode for the w coordinate. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.TextureAddress.Wrap" />. See <see cref="T:Microsoft.DirectX.Direct3D.TextureAddress" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Texture-address mode for the v coordinate. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.TextureAddress.Wrap" />. See <see cref="T:Microsoft.DirectX.Direct3D.TextureAddress" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Texture-address mode for the u coordinate. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.TextureAddress.Wrap" />. See <see cref="T:Microsoft.DirectX.Direct3D.TextureAddress" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Minification filter. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.TextureFilter.None" />. See <see cref="T:Microsoft.DirectX.Direct3D.TextureFilter" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Magnification filter. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.TextureFilter.None" />. See <see cref="T:Microsoft.DirectX.Direct3D.TextureFilter" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Maximum anisotropy value. The default value is zero.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SamplerStageStates.">
      <summary>Mipmap filter to use during minification. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.TextureFilter.None" />. See <see cref="T:Microsoft.DirectX.Direct3D.TextureFilter" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShadeMode">
      <summary>Defines constants that describe the supported shading modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.">
      <summary>Gouraud shading mode. The color and specular components of the face are determined by a linear interpolation between all three of the triangle's vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.">
      <summary>Flat shading mode. The color and specular component of the first vertex in the triangle are used to determine the color and specular component of the face. These colors remain constant across the triangle; that is, they are not interpolated. The specular alpha is interpolated.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StateBlockType">
      <summary>Defines logical groups of device states.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.">
      <summary>Captures all of the current lights, the current vertex shader and its constants, and the texture stage states specified by <see cref="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex" /> and <see cref="T:Microsoft.DirectX.Direct3D.TextureTransform" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.">
      <summary>Captures the current pixel shader and its constants.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.">
      <summary>Captures all device states.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StencilOperation">
      <summary>Defines the supported stencil operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Sets the stencil-buffer entry to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Decrements the stencil-buffer entry, wrapping to the maximum value if the new value is less than 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Increments the stencil-buffer entry, wrapping to 0 if the new value exceeds the maximum value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Inverts the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Decrements the stencil-buffer entry, clamping to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Increments the stencil-buffer entry, clamping to the maximum value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Does not update the stencil-buffer entry. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.">
      <summary>Replaces the stencil-buffer entry with a reference value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SwapEffect">
      <summary>Defines swap effects.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.">
      <summary>When a swap chain is created with a swap effect of <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" /> or <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />, the runtime guarantees that a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation will not affect the content of any of the back buffers. However, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain. An application can use the <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> swap effect to avoid these overheads and to enable the display driver to choose the most efficient presentation technique for the swap chain.<see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> is also the only swap effect that can be used when specifying a value other than <see cref="F:Microsoft.DirectX.Direct3D.MultiSampleType.None" /> for <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" />. Like a swap chain that uses <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" />, a swap chain that uses <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> might include more than one back buffer, any of which can be accessed using <see cref="M:Microsoft.DirectX.Direct3D.Device.GetBackBuffer(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)" /> or <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.GetBackBuffer(System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)" />. The swap chain is essentially a queue where 0 always indexes the back buffer that will be displayed by the next <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation and from which buffers are discarded once they have been displayed. An application that uses this swap effect should update an entire back buffer before invoking a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation that displays it. The debug version of the runtime overwrites the contents of discarded back buffers with random data, to enable developers to verify that their applications are updating the entire back buffer surface correctly. For a full-screen swap chain, the presentation rate is determined by the value assigned to <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" /> when the device or swap chain is created. Unless this value is <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate" />, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the presentation is implemented by means of copy operations, and always occurs immediately.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.">
      <summary>This swap effect can be specified only for a swap chain that comprises a single back buffer. Whether the swap chain is windowed or full-screen, the runtime guarantees the semantics implied by a copy-based <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation; specifically, that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation would. For a windowed swap chain, a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation causes the back buffer content to be copied immediately to the client area of the target window. No attempt is made to synchronize the copy with the vertical retrace period of the display adapter, so tearing effects may be observed. For a full-screen swap chain, the runtime uses a combination of flip and copy operations, which are supported by hidden back buffers if necessary, to accomplish the <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate" /> flag is the only exception. (For more information, see <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" />.) In this case, a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.">
      <summary>The swap chain might include multiple back buffers and is essentially a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer. When <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> is invoked, the queue is rotated so that the front buffer becomes the back buffer (n - 1), while the back buffer 0 becomes the new front buffer. For a full-screen swap chain, the presentation rate is determined by the value assigned to the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" /> when the device or swap chain is created. Unless this value is <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate" />, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the flipping is implemented by means of copy operations, and the presentation always occurs immediately.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureAddress">
      <summary>Defines constants that describe the supported texture-addressing modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.Mirror" /> and <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.Clamp" />. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.MirrorOnce" /> texture-addressing mode is not necessary, but the data is symmetrical around the one axis.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.Wrap" />, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.">
      <summary>Tiles the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times. No mirroring is performed.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureArgument">
      <summary>Defines the supported texture arguments.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Select a constant from a texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Replicate the alpha value to the color components. During sampling, <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.AlphaReplicate" /> acts as a read modifier.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Take the complement, or 1.0 - x. This is a read modifier.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Specifies a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.Temp" /> is supported if the <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0). Permissions are read/write.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Specifies the texture factor set in the <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.TextureFactor" /> property. Permissions are read-only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Contains the texture color for the current texture stage. Permissions are read-only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Mask value for all arguments; not used when setting texture arguments.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Specifies the specular color interpolated from vertex components during Gouraud shading. If the vertex does not contain a specular color, the default color is 0xFFFFFFFF. Permissions are read-only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.">
      <summary>Specifies the diffuse color interpolated from vertex components during Gouraud shading. If the vertex does not contain a diffuse color, the default color is 0xFFFFFFFF. Permissions are read-only.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex">
      <summary>Defines the supported texture coordinate index values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.">
      <summary>Uses the specified texture coordinates for sphere mapping.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.">
      <summary>Uses the reflection vector, transformed to camera space, as the input texture coordinate for the current stage's texture transformation. The reflection vector is computed from the input vertex position and normal vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.">
      <summary>Uses the vertex position, transformed to camera space, as the input texture coordinates for the current stage's texture transformation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.">
      <summary>Uses the vertex normal, transformed to camera space, as the input texture coordinates for the current stage's texture transformation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.">
      <summary>Uses the specified texture coordinates contained in the vertex format. This value resolves to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureFilter">
      <summary>Defines texture filtering modes for a texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.">
      <summary>A 4-sample Gaussian filter used as a texture magnification or minification filter.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.">
      <summary>A 4-sample tent filter used as a texture magnification or minification filter.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.">
      <summary>Anisotropic texture filtering used as a texture magnification or minification filter. This type of filtering compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.">
      <summary>Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2x2 area of texels surrounding the desired pixel is used. The texture filter used between mipmap levels is trilinear mipmap interpolation, in which the rasterizer performs linear interpolation on pixel color, using the texels of the two nearest mipmap textures.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.">
      <summary>Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter used between mipmap levels is based on the nearest point; that is, the rasterizer uses the color from the texel of the nearest mipmap texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.">
      <summary>Mipmapping disabled. The rasterizer uses the magnification filter instead.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureOperation">
      <summary>Defines per-stage texture-blending operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Subtracts the components of the second argument from those of the first argument. SRGBA = Arg1 - Arg2</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs linear interpolation between the second and third source arguments by a proportion specified in the first source argument. SRGBA = (Arg1) * Arg2 + (1- Arg1) * Arg3.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs a multiply-accumulate operation, in which it multiplies the last two arguments, adds them to the remaining input/source argument, and places that into the result. SRGBA = Arg1 + Arg2 *Arg3</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Modulates the components of each argument as signed components, adds their products, and replicates the sum to all color channels, including alpha. This operation is supported for color and alpha operations. SRGBA = (Arg1R * Arg2R + Arg1G * Arg2G + Arg1B * Arg2B)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs per-pixel bump mapping, using the environment map in the next texture stage with luminance. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" />).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs bump mapping on each pixel, using the environment map in the next texture stage without luminance. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" />).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateColorAddAlpha" />, but uses the inverse of the color of the first argument. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" />). SRGBA = (1 - Arg1RGB) * Arg2RGB + Arg1A</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateAlphaAddColor" />, but uses the inverse of the alpha of the first argument. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" />). SRGBA = (1 - Arg1A) * Arg2RGB + Arg1RGB</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Modulates the arguments, then adds the alpha of the first argument. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" />). SRGBA = Arg1RGB * Arg2RGB + Arg1A</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Modulates the color of the second argument using the alpha of the first argument, then adds the result to argument one. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" />). SRGBA = Arg1RGB + Arg1A * Arg2RGB</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>This flag is set in stage n, the output of which is arg1. If stage n + 1 contains a texture, any <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.Current" /> value in stage n + 1 is premultiplied by that texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs linear blending on the current texture stage, using the alpha taken from the previous texture stage. SRGBA = Arg1 * (Alpha) + Arg2 * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs linear blending on the current texture stage that uses a premultiplied alpha. SRGBA = Arg1 + Arg2 * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs linear blending on the current texture stage, using a scalar alpha set with the <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.TextureFactor" /> property. SRGBA = Arg1 * (Alpha) + Arg2 * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs linear blending on the current texture stage, using the interpolated alpha from each vertex. SRGBA = Arg1 * (Alpha) + Arg2 * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Performs linear blending on the current texture stage, using the interpolated alpha from each vertex. SRGBA = Arg1 * (Alpha) + Arg2 * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Adds the first and second arguments, then subtracts their product from the sum. SRGBA = Arg1 + Arg2 - Arg1 * Arg2</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Adds the components of the arguments with a -0.5 bias and shifts the products 1 bit to the left. SRGBA = (Arg1 + Arg2 - 0.5) &lt;&lt; 1</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Adds the components of the arguments with a -0.5 bias, making the effective range of values -0.5 through 0.5. SRGBA = Arg1 + Arg2 -0.5</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Adds the components of the arguments. SRGBA = Arg1 + Arg2</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Multiplies the components of the arguments, then shifts the products 2 bits to the left (effectively multiplying them by 4) for brightening. SRGBA = (Arg1 * Arg2) &lt;&lt; 2</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Multiplies the components of the arguments, then shifts the products 1 bit to the left (effectively multiplying them by 2) for brightening. SRGBA = (Arg1 * Arg2) &lt;&lt; 1</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Multiplies the components of the arguments. SRGBA = Arg1 * Arg2</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Uses this texture stage's second color or alpha argument, unmodified, as the output. This operation affects the color argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" /> property, and the alpha argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaOperation" /> property. SRGBA = Arg2</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Uses this texture stage's first color or alpha argument, unmodified, as the output. This operation affects the color argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ColorOperation" /> property, and the alpha argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaOperation" /> property. SRGBA = Arg1</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.">
      <summary>Disables output from the texture stage and all stages with a higher index. To disable texture mapping, set this flag as the color operation for the first texture stage (stage 0). Alpha operations cannot be disabled when color operations are enabled. Setting the alpha operation to <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.Disable" /> when color blending is enabled causes undefined behavior.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureStageStates">
      <summary>Defines texture stage states.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Selects the destination register for the result of the current stage identified by <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" />.This value can be set to <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" /> (the default value) or to <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" />, which is a single temporary register that can be read into subsequent stages as an input argument. The final color passed to the fog blender and frame buffer is taken from <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" />, so the last active texture stage state must be set to <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" />. This setting is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines settings for the alpha channel selector operand for triadic (multiply, add, and linear interpolation) operations identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.<see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.AlphaArgument0" /> is supported if the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperationCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsMultiplyAdd" /> or <see cref="T:Microsoft.DirectX.Direct3D.TextureOperationCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsLerp" /> device capabilities are present. The default argument is <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" />.To select a temporary register color for read or write, specify <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" />, which is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default argument is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines settings for the third color operand for triadic (multiply, add, and linear interpolation) operations identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.This setting is supported if the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperationCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsMultiplyAdd" /> or <see cref="T:Microsoft.DirectX.Direct3D.TextureOperationCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsLerp" /> device capabilities are present. The default argument is <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" />.Specify <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> to select a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Controls the transformation of texture coordinates for the current texture stage. The default value is <see cref="F:Microsoft.DirectX.Direct3D.TextureTransform.TextureTransform.Disable" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines a floating-point offset value for bump-map luminance. The default value is 0.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines a floating-point scale value for bump-map luminance. The default value is 0.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as a floating-point value for the [1][1] coefficient in a bump-mapping matrix. The valid range of values for bump-mapping matrix coefficients is greater than or equal to -8.0 and less than 8.0. This range, expressed in mathematical notation, is (-8.0,8.0). The default value is 0.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as a floating-point value for the [1][0] coefficient in a bump-mapping matrix. The valid range of values for bump-mapping matrix coefficients is greater than or equal to -8.0 and less than 8.0. This range, expressed in mathematical notation, is (-8.0,8.0). The default value is 0.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as a floating-point value for the [0][1] coefficient in a bump-mapping matrix. The valid range of values for bump-mapping matrix coefficients is greater than or equal to -8.0 and less than 8.0. This range, expressed in mathematical notation, is (-8.0,8.0). The default value is 0.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as a floating-point value for the [0][0] coefficient in a bump-mapping matrix. The valid range of values for bump-mapping matrix coefficients is greater than or equal to -8.0 and less than 8.0. This range, expressed in mathematical notation, is (-8.0,8.0). The default value is 0.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as the second alpha argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.The default argument is <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" />. Specify <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> to select a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the per-stage constant color. To determine whether the current device supports a per-stage constant color, use the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsPerStageConstant" /> property. The <see cref="P:Microsoft.DirectX.Direct3D.TextureStateManager.ConstantColor" /> property is used by <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Constant" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the index of the texture coordinate set to use with the current texture stage. Up to eight sets of texture coordinates per vertex can be specified. If a vertex does not include a set of texture coordinates at the specified index, the system reverts to the u and v coordinates (0, 0) by default.When rendering with vertex shaders, each stage's texture coordinate index must be set to its default value. The default index for each stage is equal to the stage index. Set this state to the zero-based index of the coordinate set for each vertex that this texture stage uses.Additionally, applications can include <see cref="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex" /> values as part of a logical OR with the index being set, to request that Microsoft DirectX automatically generate the input texture coordinates for a texture transformation.The system uses the index strictly to determine texture wrapping mode when using a <see cref="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex" /> value other than <see cref="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.PassThru" />, which resolves to zero. These flags are most useful when performing environment mapping.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as the first alpha argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.The default argument is <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.TextureColor" />. If no texture is set for this stage, the default argument is <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Diffuse" />. Specify <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> to select a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as a texture alpha-blending operation identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" /> enumeration.The default value for the first texture stage (stage 0) is <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.SelectArg1" />, and for all other stages is <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Disable" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as the second color argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.The default argument is <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Current" />. Specify <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> to select a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as the first color argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.The default argument is <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" />. Specify <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> to select a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.Temp" /> is supported if the <see cref="T:Microsoft.DirectX.Direct3D.MiscCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureStageStates.">
      <summary>Defines the texture-stage state as a texture color-blending operation identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" /> enumeration.The default value for the first texture stage (stage 0) is <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Modulate" />, and for all other stages is <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Disable" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureTransform">
      <summary>Defines texture-stage state values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.">
      <summary>All texture coordinates are divided by the last element before being passed to the rasterizer. For example, if this flag is specified with the <see cref="F:Microsoft.DirectX.Direct3D.TextureTransform.Count3" /> flag, the first and second texture coordinates are divided by the third coordinate before being passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.">
      <summary>4-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.">
      <summary>3-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.">
      <summary>2-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.">
      <summary>1-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.">
      <summary>Texture coordinates are passed directly to the rasterizer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TransformType">
      <summary>Defines constants that describe transformation state values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set as the projection transformation matrix. The default value is the identity matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.">
      <summary>Identifies the transformation matrix being set as the view transformation matrix. The default value is the identity matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Usage">
      <summary>Defines supported usage types for the current resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Specifies no usage type for the current resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource to verify support for texture wrapping and mip-mapping.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource to verify support for vertex shader texture sampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource to verify support for post pixel shader blending. If <see cref="T:Microsoft.DirectX.Direct3D.Manager" />.<see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> fails with <see cref="F:Microsoft.DirectX.Direct3D.Usage.QueryPostPixelShaderBlending" />, post pixel blending operations are not supported. These operations include alpha test, pixel fog, render-target blending, color write enable, and dither.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource to determine whether a texture supports gamma correction during a write operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource format to determine whether it supports texture filter types other than <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.Point" /> (which is always supported).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource to determine whether a texture supports gamma correction during a read operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource about a legacy bump map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Queries the resource to determine whether it will be a displacement map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Specifies that the resource automatically generate mipmaps. Automatic mipmap generation is not supported for volume textures and depth stencil surfaces/textures. This usage is not valid for resources in system memory (<see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" />).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Indicates that the vertex buffer requires dynamic memory use, which is useful for drivers because it enables them to determine where to place the buffer. In general, static vertex buffers are placed in video memory and dynamic vertex buffers are placed in accelerated graphics port (AGP) memory. Note that there is no separate static use. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> is not specified, the vertex buffer is made static.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Indicates when the vertex buffer will be used for drawing N-patches.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Indicates when the vertex buffer will be used for drawing high-order primitives.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Indicates when the vertex buffer will be used for drawing points.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Indicates that the vertex buffer content will never require clipping. When rendering with buffers that have this flag set, the <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.Clipping" /> property must be set to false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Specifies that vertex processing be done in software. If this flag is not used, vertex processing is done in hardware. <see cref="F:Microsoft.DirectX.Direct3D.Usage.SoftwareProcessing" /> is used with <see cref="T:Microsoft.DirectX.Direct3D.Manager" />.<see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> to determine whether a particular texture format can be used as a vertex texture during software vertex processing. If it can, the texture must be created with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Scratch" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Informs the system that the application writes only to the vertex buffer. Using this flag enables the driver to choose the best memory location, which results in efficient write operations and rendering. Attempts to read from a vertex buffer created with this capability will fail. Buffers that are created with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> and that do not specify <see cref="F:Microsoft.DirectX.Direct3D.Usage.WriteOnly" /> might experience significant drops in performance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Specifies that the resource will be a depth stencil buffer. <see cref="F:Microsoft.DirectX.Direct3D.Usage.DepthStencil" /> can be used only with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.">
      <summary>Specifies that the resource will be a render target. <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> can be used only with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBlend">
      <summary>Defines enumerated values used to control the number of matrices that the system applies when performing multimatrix vertex blending.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.">
      <summary>Uses a single matrix with a weight of 1.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.">
      <summary>Uses the value assigned to <see cref="T:Microsoft.DirectX.Direct3D.RenderStateManager" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.TweenFactor" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.">
      <summary>Enables vertex blending between the four matrices set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index values for the transformation states are 0, 1, 2, and 3. These matrices also can be set using the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" />, <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World1" />, <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World2" />, and <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World3" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.">
      <summary>Enables vertex blending between the three matrices set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index values for the transformation states are 0, 1, and 2. These matrices also can be set using the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" />, <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World1" />, and <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World2" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.">
      <summary>Enables vertex blending between the two matrices set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index values for the transformation states are 0 and 1. These matrices also can be set using the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" /> and <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World1" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.">
      <summary>Disables vertex blending and applies only the world matrix (set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index value for the transformation state is 0, or with the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" /> property).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexFormats">
      <summary>Describes values that define a vertex format used to describe the contents of vertices that are stored interleaved in a single data stream.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format includes a vertex normal vector. This value cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Transformed" /> value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Last beta field in the vertex position data will be of type <see cref="T:System.Int32" />. The data in the beta fields are used with matrix palette skinning to specify matrix indices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Last beta field in the vertex position data will be of type UBYTE4. The data in the beta fields are used with matrix palette skinning to specify matrix indices. The vertex format is declared as <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend5" /> | <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaUByte4" />. Both weights and MatrixIndices are included in beta[], where <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaUByte4" /> directs the compiler to interpret the last uint (beta[5]) as type UBYTE4. The last beta is determined by <see cref="T:Microsoft.DirectX.Direct3D.VertexBlend" />, not by the number of betas in the position format. For example, if <see cref="T:Microsoft.DirectX.Direct3D.VertexBlend" /> is <see cref="F:Microsoft.DirectX.Direct3D.VertexBlend.TwoWeights" />, and the position format is as specified above, the last beta will be beta[2] and will be used as a uint with 4-byte indices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Number of bits by which to shift an integer value that identifies the number of texture coordinates for a vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Mask value for texture flag bits.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format includes a specular color component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format includes a diffuse color component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format is specified in point size. This size is expressed in camera space units for vertices that are not transformed and lit, and in device-space units for vertices that are transformed and lit.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format includes a vertex normal vector. This value cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Transformed" /> flag.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format contains transformed and clipped x, y, z, w data. <see cref="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices" /> does not invoke the clipper, but instead outputs data in clip coordinates. This constant is designed for, and can only be used with, the programmable vertex pipeline.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, Microsoft Direct3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, Microsoft Direct3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, Microsoft Direct3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, Microsoft Direct3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, Microsoft Direct3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Vertex format includes the position of a transformed vertex. This flag cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Position" /> or <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Normal" /> flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Mask for position bits.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>Mask for position bits.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.">
      <summary>No vertex format.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Wrap">
      <summary>Defines texture wrapping.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.">
      <summary>W texture wrapping (wrapping in the direction of the third dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.">
      <summary>V texture wrapping (wrapping in the direction of the second dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.">
      <summary>U texture wrapping (wrapping in the direction of the first dimension).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WrapCoordinates">
      <summary>Defines supported wrap coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.">
      <summary>U texture wrapping (wrapping in the direction of the first dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.">
      <summary>Texture wrapping in the direction of the fourth dimension.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.">
      <summary>W texture wrapping (wrapping in the direction of the third dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.">
      <summary>V texture wrapping (wrapping in the direction of the second dimension).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterDetails">
      <summary>Contains information that identifies the adapter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterDetails.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.AdapterDetails" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterDetails.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.Description">
      <summary>Retrieves a string used for presentation to the user.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceId">
      <summary>Retrieves a value that is used to help identify a particular chip set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceIdentifier">
      <summary>Retrieves a globally unique identifier (GUID) object that can be used to check changes in the driver and chip set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceName">
      <summary>Retrieves a string that contains the device name for a Microsoft Windows Graphics Device Interface (GDI).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DriverName">
      <summary>Retrieves a string that is used to present the driver name to the user.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DriverVersion">
      <summary>Retrieves a value that identifies the version of the Microsoft Direct3D driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.Revision">
      <summary>Retrieves a value used to help identify the revision level of a particular chip set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.SubSystemId">
      <summary>Retrieves a value used to identify the subsystem.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.VendorId">
      <summary>Retrieves a value used to identify the manufacturer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.WhqlLevel">
      <summary>Retrieves a value that is used to determine the Microsoft Windows Hardware Quality Labs (WHQL) validation level for the driver and device pair.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AddressCaps">
      <summary>Contains the texture addressing capabilities for <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AddressCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsBorder">
      <summary>Retrieves a value that determines whether the device supports the setting of coordinates outside the range [0.0, 1.0] to the border color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsClamp">
      <summary>Retrieves a value that indicates whether the device supports the clamping of textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsIndependentUV">
      <summary>Retrieves a value that indicates whether the device can separate the texture-addressing modes of the texture's u and v coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsMirror">
      <summary>Retrieves a value that indicates whether a device can mirror textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsMirrorOnce">
      <summary>Retrieves a value that indicates whether a device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsWrap">
      <summary>Retrieves a value that indicates whether a device can wrap textures to addresses.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BandwidthTimings">
      <summary>Provides throughput measurement comparisons for help in understanding the performance of an application.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BandwidthTimings.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BandwidthTimings" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BandwidthTimings.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BandwidthTimings.FillRateUtilizedPercent">
      <summary>Retrieves the pixel fill throughput percentage. This is the number of pixels that are filled compared to the theoretical pixel fill.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BandwidthTimings.FrontEndUploadMemoryUtilizedPercent">
      <summary>Retrieves the bandwidth or maximum data transfer rate for uploading data from the host graphics processing unit (GPU) to the CPU.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BandwidthTimings.MaxBandwidthUtilized">
      <summary>Retrieves the bandwidth or maximum data transfer rate from the host CPU to the graphics processing unit (GPU). This is typically the bandwidth of the Peripheral Component Interconnect (PCI) or accelerated graphics port (AGP) bus which connects the CPU and the graphics processing unit (GPU).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BandwidthTimings.TriangleSetupRateUtilizedPercent">
      <summary>Retrieves the triangle set-up throughput percentage. This is the number of triangles that are set-up for rasterization compared to the theoretical maximum triangle set-up rate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BandwidthTimings.VertexRateUtilizedPercent">
      <summary>Retrieves the vertex throughput percentage. This is the number of vertices processed compared to the theoretical maximum vertex processing rate. A high percentage is the target.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BehaviorFlags">
      <summary>Contains a set of properties that indicate the global behavior of a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor(Microsoft.DirectX.Direct3D.CreateFlags[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BehaviorFlags" /> structure.</summary>
      <param name="newBehavior">Array of <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> that indicate the initial values with which to set the <see cref="T:Microsoft.DirectX.Direct3D.BehaviorFlags" /> properties.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor(Microsoft.DirectX.Direct3D.CreateFlags)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BehaviorFlags" /> structure.</summary>
      <param name="initialBehavior">A combination of <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> that indicate the initial values with which to set the <see cref="T:Microsoft.DirectX.Direct3D.BehaviorFlags" /> properties.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.BehaviorFlags" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.AdapterGroupDevice">
      <summary>Retrieves a value that indicates whether the device should drive all of the heads that the master adapter owns.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.DisableDriverManagement">
      <summary>Retrieves a value that indicates whether Microsoft Direct3D, rather than the driver, manages resources.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.FpuPreserve">
      <summary>Retrieves a value that indicates whether floating-point unit (FPU) exceptions or double-precision FPU exceptions are enabled in an application.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.HardwareVertexProcessing">
      <summary>Retrieves a value that indicates whether hardware vertex processing is enabled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.MixedVertexProcessing">
      <summary>Retrieves a value that indicates whether mixed vertex processing (for both software and hardware) is enabled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.MultiThreaded">
      <summary>Retrieves a value that indicates whether Microsoft Direct3D is set to be multithread safe.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.PureDevice">
      <summary>Retrieves a value that indicates whether Microsoft Direct3D supports Get calls for anything that can be stored in a state block. This value also indicates whether Microsoft Direct3D is withholding emulation services for vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.SoftwareVertexProcessing">
      <summary>Retrieves a value that specifies whether software vertex processing is being used.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.Value">
      <summary>Retrieves or sets one or more <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> values.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BlendCaps">
      <summary>Indicates the supported capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BlendCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.BlendFactor" /> and <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvBlendFactor" /> constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothInverseSourceAlpha">
      <summary>Indicates that the driver supports a in which the source blend factor is (1 - As, 1 - As, 1 - As, 1 - As), the destination blend factor is (As, As, As, As), and the destination blend selection is overridden.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothSourceAlpha">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha" /> and <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha" /> blend modes. The <see cref="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothSourceAlpha" /> blend mode is obsolete. To achieve the same effect, set the source and destination blend factors to <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.SourceAlpha" /> and <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.InvSourceAlpha" /> in separate calls.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsDestinationAlpha">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.DestinationAlpha" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsDestinationColor">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.DestinationColor" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseDestinationAlpha">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvDestinationAlpha" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseDestinationColor">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvDestinationColor" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseSourceAlpha">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseSourceColor">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvSourceColor" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsOne">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.One" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceAlpha">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceAlphaSat">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceAlphaSat" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceColor">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceColor" /> blend mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsZero">
      <summary>Indicates that the driver supports the <see cref="F:Microsoft.DirectX.Direct3D.Blend.Zero" /> blend mode.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Box">
      <summary>Defines a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Box.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Box" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Box.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Back">
      <summary>Retrieves or sets the position of the back of a box on the z-axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Bottom">
      <summary>Retrieves or sets the position of the bottom of a box on the y-axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Front">
      <summary>Retrieves or sets the position of the front of a box on the z-axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Left">
      <summary>Retrieves or sets the position of the left side of a box on the x-axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Right">
      <summary>Retrieves or sets the position of the right side of a box on the x-axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Top">
      <summary>Retrieves or sets the position of the top of a box on the y-axis.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CacheUtilization">
      <summary>Measures the cache hit rate performance for textures and indexed vertices.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CacheUtilization.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CacheUtilization" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CacheUtilization.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CacheUtilization.PostTransformVertexCacheHitRate">
      <summary>Retrieves the hit rate for finding transformed vertices in the vertex cache.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CacheUtilization.TextureCacheHitRate">
      <summary>Retrieves the hit rate for finding a texture in the texture cache.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Caps">
      <summary>Represents the capabilities of the hardware exposed through the Microsoft Direct3D object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Caps.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Caps" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Caps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinal">
      <summary>Retrieves a number that represents the ordinal of the adapter on which the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> was created.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinalInGroup">
      <summary>Retrieves a number that indicates the order in which heads are referenced by the application programming object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AlphaCompareCaps">
      <summary>Retrieves an object that contains all alpha-test comparison capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.CubeTextureFilterCaps">
      <summary>Retrieves texture-filtering capabilities for a <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.CursorCaps">
      <summary>Retrieves an object that indicates the available hardware support for cursors.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeclTypes">
      <summary>Retrieves an object that describes the vertex data types a device supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DestinationBlendCaps">
      <summary>Retrieves an object that indicates a device's destination blending capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeviceCaps">
      <summary>Retrieves an object that identifies a device's capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeviceType">
      <summary>Retrieves an object that identifies the type of resources used for processing vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DriverCaps">
      <summary>Retrieves an object that identifies driver-specific capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ExtentsAdjust">
      <summary>Retrieves a value that indicates the number of pixels to adjust the extents rectangle outward to accommodate antialiasing kernels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandBottom">
      <summary>Retrieves a value that indicates the screen-space coordinate of the bottom guard band clipping region.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandLeft">
      <summary>Retrieves a value that indicates the screen-space coordinate of the left guard band clipping region.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandRight">
      <summary>Retrieves a value that indicates the screen-space coordinate of the right guard band clipping region.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandTop">
      <summary>Retrieves a value that indicates the screen-space coordinate of the top guard band clipping region.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.LineCaps">
      <summary>Retrieves an object that defines the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MasterAdapterOrdinal">
      <summary>Retrieves a value that indicates which device is the master for the current subordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxActiveLights">
      <summary>Retrieves the maximum number of lights that can be active simultaneously.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxAnisotropy">
      <summary>Retrieves a value that indicates the maximum valid value for anisotropic filtering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxNPatchTessellationLevel">
      <summary>Retrieves a value that indicates the maximum number of N-patch subdivision levels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPixelShader30InstructionSlots">
      <summary>Retrieves a value that indicates the maximum number of vertex shader instruction slots supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPointSize">
      <summary>Retrieves the maximum size of a point primitive.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount">
      <summary>Retrieves the maximum number of primitives for each <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)" /> call.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxSimultaneousTextures">
      <summary>Retrieves the maximum number of textures that can simultaneously be bound to the texture-blending stages.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxStreams">
      <summary>Indicates the maximum number of concurrent data streams for <see cref="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxStreamStride">
      <summary>Retrieves the maximum stride for <see cref="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureAspectRatio">
      <summary>Retrieves the maximum texture aspect ratio supported by the hardware.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureBlendStages">
      <summary>Retrieves the maximum number of texture-blending stages supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureHeight">
      <summary>Retrieves the maximum texture height for the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureRepeat">
      <summary>Retrieves the maximum range of the integer bits for post-normalized texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureWidth">
      <summary>Retrieves the maximum texture width for the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxUserClipPlanes">
      <summary>Retrieves the maximum number of user-defined clipping planes supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexBlendMatrices">
      <summary>Retrieves the maximum number of matrices that the current device can apply when performing multimatrix vertex blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexBlendMatrixIndex">
      <summary>Retrieves the maximum matrix index that can be indexed into using pre-vertex indices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexIndex">
      <summary>Retrieves the maximum size of indices supported for hardware vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexShader30InstructionSlots">
      <summary>Retrieves the maximum number of vertex shader instruction slots supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexShaderConst">
      <summary>Retrieves the number of vertex shader registers that are reserved for constants.
	</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexW">
      <summary>Retrieves the maximum w-based depth value that a device supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent">
      <summary>Retrieves the maximum value for any of the three dimensions (width, height, and depth) of a volume texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.NumberOfAdaptersInGroup">
      <summary>Retrieves the number of adapters in the current adapter group.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.NumberSimultaneousRts">
      <summary>Retrieves the number of simultaneous render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue">
      <summary>Retrieves the maximum value of a pixel shader arithmetic component.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShaderCaps">
      <summary>Retrieves a structure that contains the supported pixel shader capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShaderVersion">
      <summary>Retrieves an object that reports the main and subordinate pixel shader versions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals">
      <summary>Retrieves a set of values that represent the available presentation swap intervals.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PrimitiveMiscCaps">
      <summary>Retrieves miscellaneous driver primitive capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.RasterCaps">
      <summary>Retrieves information about raster drawing capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ShadeCaps">
      <summary>Retrieves shading operation capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.SourceBlendCaps">
      <summary>Retrieves the source-blending capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.StencilCaps">
      <summary>Retrieves an object that indicates the supported stencil buffer operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.StretchRectangleFilterCaps">
      <summary>Retrieves a structure that describes the operations supported by <see cref="M:Microsoft.DirectX.Direct3D.Device.StretchRectangle(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.TextureFilter)" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureAddressCaps">
      <summary>Retrieves a structure that contains texture-addressing capabilities for <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureCaps">
      <summary>Retrieves a structure that contains miscellaneous texture-mapping capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureFilterCaps">
      <summary>Retrieves a structure that contains texture-filtering capabilities for <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureOperationCaps">
      <summary>Retrieves a structure that describes supported texture operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexFormatCaps">
      <summary>Retrieves a structure that describes supported vertex format capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexProcessingCaps">
      <summary>Retrieves a structure that contains supported vertex processing capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexShaderCaps">
      <summary>Retrieves a structure that contains supported vertex shader capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexShaderVersion">
      <summary>Retrieves a structure that indicates the main and subordinate vertex shader versions supported by a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexTextureFilterCaps">
      <summary>Retrieves a structure that indicates which types of vertex shader texture filters are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VolumeTextureAddressCaps">
      <summary>Retrieves a structure that indicates the supported texture-addressing capabilities for <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VolumeTextureFilterCaps">
      <summary>Retrieves a structure that indicates the texture-filtering capabilities of <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ZCompareCaps">
      <summary>Retrieves a structure that contains the supported z-buffer comparison capabilities.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipStatus">
      <summary>Describes the current clip status.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipStatus.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ClipStatus" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipStatus.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection">
      <summary>Retrieves or sets a value that is the bitwise intersection of all current clip status flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion">
      <summary>Retrieves or sets a value that is the bitwise union of all current clip status flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorValue">
      <summary>Stores the red, green, blue, and alpha channel values that together define a specific color.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
      <param name="r">An integer value that represents the level of red in the color.</param>
      <param name="g">An integer value that represents the level of green in the color.</param>
      <param name="b">An integer value that represents the level of blue in the color.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
      <param name="r">An integer value that represents the level of red in the color.</param>
      <param name="g">An integer value that represents the level of green in the color.</param>
      <param name="b">An integer value that represents the level of blue in the color.</param>
      <param name="a">An integer value that represents the alpha channel value of the color.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
      <param name="r">A <see cref="T:System.Single" /> value that represents the level of red in the color.</param>
      <param name="g">A <see cref="T:System.Single" /> value that represents the level of green in the color.</param>
      <param name="b">A <see cref="T:System.Single" /> value that represents the level of blue in the color.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
      <param name="r">A <see cref="T:System.Single" /> value that represents the level of red in the color.</param>
      <param name="g">A <see cref="T:System.Single" /> value that represents the level of green in the color.</param>
      <param name="b">A <see cref="T:System.Single" /> value that represents the level of blue in the color.</param>
      <param name="a">A <see cref="T:System.Single" /> value that represents the alpha channel value of the color.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.FillD3DColor(Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE)">
      <summary>Fills a <see cref="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE" /> structure with the color values of the current instance.</summary>
      <param name="pColor">A <see cref="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE" /> structure to contain the current color values.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.FromArgb(System.Int32)">
      <summary>Initializes and returns an instance of a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure using an <see cref="T:System.Int32" /> value.</summary>
      <param name="color">An <see cref="T:System.Int32" /> value that is used to initialize a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure whose properties are initialized to the <see cref="M:Microsoft.DirectX.Direct3D.ColorValue.FromArgb(System.Int32)" /> value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.FromColor(System.Drawing.Color)">
      <summary>Initializes and returns an instance of a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure using a <see cref="T:System.Drawing.Color" /> value.</summary>
      <param name="color">A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> used to initialize a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure whose properties are initialized to the <see cref="M:Microsoft.DirectX.Direct3D.ColorValue.FromColor(System.Drawing.Color)" /> value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.FromD3DColor(Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE)">
      <summary>Initializes and returns an instance of a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure using an <see cref="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE" /> value.</summary>
      <param name="color">A <see cref="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE" /> used to initialize a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</param>
      <returns>A <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure whose properties are initialized to the <see cref="M:Microsoft.DirectX.Direct3D.ColorValue.FromD3DColor(Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE)" /> value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.ToArgb">
      <summary>Returns an <see cref="T:System.Int32" /> value that represents the color value of the current instance.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the color value of the current instance.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Alpha">
      <summary>Retrieves or sets the alpha channel value of the current color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Blue">
      <summary>Retrieves or sets the blue value of the current color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Green">
      <summary>Retrieves or sets the green value of the current color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Red">
      <summary>Retrieves or sets the red value of the current color.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ComparisonCaps">
      <summary>Retrieves comparison capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ComparisonCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsAlways">
      <summary>Retrieves a value that indicates whether always passing the comparison test is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsEqual">
      <summary>Retrieves a value that indicates whether comparison tests in which the new value equals the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsGreater">
      <summary>Retrieves a value that indicates whether comparison tests in which the new value is greater than the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsGreaterEqual">
      <summary>Retrieves a value that indicates whether comparison tests in which the new value is greater than or equal to the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsLess">
      <summary>Retrieves a value that indicates whether comparison tests in which the new value is less than the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsLessEqual">
      <summary>Retrieves a value that indicates whether comparison tests in which the new value is less than or equal to the current value are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsNever">
      <summary>Retrieves a value that indicates whether never passing the comparison test is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsNotEqual">
      <summary>Retrieves a value that indicates whether comparison tests in which the new value does not equal the current value are supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CursorCaps">
      <summary>Indicates the hardware support that is available for cursors.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CursorCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CursorCaps.SupportsColor">
      <summary>Retrieves a value that indicates that a full-color cursor is supported in hardware.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CursorCaps.SupportsLowResolution">
      <summary>Retrieves a value that indicates that a full-color cursor is supported in both high-resolution and low-resolution modes.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored">
      <summary>Describes a custom vertex format structure that contains position and color information.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Color">
      <summary>Retrieves or sets the vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.#ctor(Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the position.</param>
      <param name="c">Integer that represents the diffuse color value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.#ctor(System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="c">Integer that represents the diffuse color value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured">
      <summary>Describes a custom vertex format structure that contains position, color, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Color">
      <summary>Retrieves or sets the vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Tu">
      <summary>Retrieves or sets the u component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Tv">
      <summary>Retrieves or sets the v component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor(Microsoft.DirectX.Vector3,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the position.</param>
      <param name="c">Integer that represents the vertex color value.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="c">Integer that represents the vertex color value.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal">
      <summary>Describes a custom vertex format structure that contains position and normal data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Nx">
      <summary>Retrieves or sets the nx component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Ny">
      <summary>Retrieves or sets the ny component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Nz">
      <summary>Retrieves or sets the nz component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal" /> class.</summary>
      <param name="pos">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex position.</param>
      <param name="nor">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex normal data.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="nxvalue">Floating-point value that represents the nx coordinate of the vertex normal.</param>
      <param name="nyvalue">Floating-point value that represents the ny coordinate of the vertex normal.</param>
      <param name="nzvalue">Floating-point value that represents the nz coordinate of the vertex normal.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Normal">
      <summary>Retrieves or sets the vertex normal data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored">
      <summary>Describes a custom vertex format structure that contains position, color, and normal data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Color">
      <summary>Retrieves or sets the vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Nx">
      <summary>Retrieves or sets the nx component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Ny">
      <summary>Retrieves or sets the ny component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Nz">
      <summary>Retrieves or sets the nz component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored" /> class.</summary>
      <param name="pos">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex position.</param>
      <param name="nor">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex normal data.</param>
      <param name="c">Integer that represents the vertex color value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="nxvalue">Floating-point value that represents the nx coordinate of the vertex normal.</param>
      <param name="nyvalue">Floating-point value that represents the ny coordinate of the vertex normal.</param>
      <param name="nzvalue">Floating-point value that represents the nz coordinate of the vertex normal.</param>
      <param name="c">Integer that represents the vertex color value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Normal">
      <summary>Retrieves or sets the vertex normal data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured">
      <summary>Describes a custom vertex format structure that contains position, normal data, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Nx">
      <summary>Retrieves or sets the nx component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Ny">
      <summary>Retrieves or sets the ny component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Nz">
      <summary>Retrieves or sets the nz component of the vertex normal.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Tu">
      <summary>Retrieves or sets the u component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Tv">
      <summary>Retrieves or sets the v component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured" /> class.</summary>
      <param name="pos">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex position.</param>
      <param name="nor">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex normal data.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="nxvalue">Floating-point value that represents the nx coordinate of the vertex normal.</param>
      <param name="nyvalue">Floating-point value that represents the ny coordinate of the vertex normal.</param>
      <param name="nzvalue">Floating-point value that represents the nz coordinate of the vertex normal.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Normal">
      <summary>Retrieves or sets the vertex normal data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly">
      <summary>Describes a custom vertex format structure that contains only position data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.#ctor(Microsoft.DirectX.Vector3)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex position.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured">
      <summary>Describes a custom vertex format structure that contains position and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Tu">
      <summary>Retrieves or sets the u component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Tv">
      <summary>Retrieves or sets the v component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor(Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured" /> class.</summary>
      <param name="pos">A <see cref="T:Microsoft.DirectX.Vector3" /> object that contains the vertex position.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Position">
      <summary>Retrieves or sets the vertex position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.Transformed">
      <summary>Describes a custom vertex format structure that contains transformed vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Rhw">
      <summary>Retrieves or sets the reciprocal homogeneous w (RHW) component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.#ctor(Microsoft.DirectX.Vector4)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.Transformed" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector4" /> object that contains the position.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.Transformed" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="rhwvalue">Floating-point value that represents the reciprocal homogeneous w (RHW) component of the transformed vertex.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Position">
      <summary>Retrieves or sets the transformed position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.Transformed" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored">
      <summary>Describes a custom vertex format structure that contains transformed vertices and color information.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Color">
      <summary>Retrieves or sets the vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Rhw">
      <summary>Retrieves or sets the reciprocal homogeneous w (RHW) component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.#ctor(Microsoft.DirectX.Vector4,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector4" /> object that contains the position.</param>
      <param name="c">Integer that represents the vertex color value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="rhwvalue">Floating-point value that represents the reciprocal homogeneous w (RHW) component of the transformed vertex.</param>
      <param name="c">Integer that represents the vertex color value.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Position">
      <summary>Retrieves or sets the transformed position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured">
      <summary>Describes a custom vertex format structure that contains transformed vertices, color, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Color">
      <summary>Retrieves or sets the vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Rhw">
      <summary>Retrieves or sets the reciprocal homogeneous w (RHW) component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Tu">
      <summary>Retrieves or sets the u component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Tv">
      <summary>Retrieves or sets the v component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor(Microsoft.DirectX.Vector4,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector4" /> object that contains the position.</param>
      <param name="c">Integer that represents the vertex color value.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="rhwvalue">Floating-point value that represents the reciprocal homogeneous w (RHW) component of the transformed vertex.</param>
      <param name="c">Integer that represents the vertex color value.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Position">
      <summary>Retrieves or sets the transformed position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured">
      <summary>Describes a custom vertex format structure that contains transformed vertices and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Format">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> for the current custom vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Rhw">
      <summary>Retrieves or sets the reciprocal homogeneous w (RHW) component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Tu">
      <summary>Retrieves or sets the u component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Tv">
      <summary>Retrieves or sets the v component of the texture coordinate.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.X">
      <summary>Retrieves or sets the x component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Y">
      <summary>Retrieves or sets the y component of the position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Z">
      <summary>Retrieves or sets the z component of the position.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor(Microsoft.DirectX.Vector4,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured" /> class.</summary>
      <param name="value">A <see cref="T:Microsoft.DirectX.Vector4" /> object that contains the position.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured" /> class.</summary>
      <param name="xvalue">Floating-point value that represents the x coordinate of the position.</param>
      <param name="yvalue">Floating-point value that represents the y coordinate of the position.</param>
      <param name="zvalue">Floating-point value that represents the z coordinate of the position.</param>
      <param name="rhwvalue">Floating-point value that represents the reciprocal homogeneous w (RHW) component of the transformed vertex.</param>
      <param name="u">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor" /> component of the texture coordinate.</param>
      <param name="v">Floating-point value that represents the <see cref="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor" /> component of the texture coordinate.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Position">
      <summary>Retrieves or sets the transformed position.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.StrideSize">
      <summary>Retrieves the size of the <see cref="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured" /> structure.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationTypeCaps">
      <summary>Indicates the type of data formats that are supported in a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsDec3N">
      <summary>Indicates that a 3-dimension signed 10 10 10 format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsFloat16Four">
      <summary>Indicates that a 4-dimension 16-bit floating-point numbers format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsFloat16Two">
      <summary>Indicates that a 2-dimension 16-bit floating-point numbers format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsShort2N">
      <summary>Indicates that a normalized, 2-D signed short format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsShort4N">
      <summary>Indicates that a normalized, 4-D signed short format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUByte4">
      <summary>Indicates that a 4-dimension unsigned byte format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUByte4N">
      <summary>Indicates that a normalized, 4-dimension unsigned byte format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUDec3">
      <summary>Indicates that a 3-dimension unsigned 10 10 10 format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUShort2N">
      <summary>Indicates that a normalized, 2-dimension unsigned short format is supported for vertex declarations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUShort4N">
      <summary>Indicates that a normalized 4-D unsigned short format is supported for vertex declarations.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceCaps">
      <summary>Retrieves device-specific information about a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanDrawSystemToNonLocal">
      <summary>Indicates whether the device supports copying from system memory textures to nonlocal video memory textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanRenderAfterFlip">
      <summary>Indicates whether the device supports queue-rendering commands after a page flip.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanStretchRectangleFromTextures">
      <summary>Indicates whether the device supports <see cref="M:Microsoft.DirectX.Direct3D.Device.StretchRectangle(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.TextureFilter)" /> using a texture as the source.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsAdaptiveTessellateNPatch">
      <summary>Indicates whether the device supports adaptive tessellation of N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsAdaptiveTessellateRtPatch">
      <summary>Indicates whether the device supports adaptive tessellation of RT-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDMapNPatch">
      <summary>Indicates whether the device supports displacement maps for N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitives2">
      <summary>Indicates whether the device supports DrawPrimitives2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitives2Ex">
      <summary>Indicates whether the device supports extended DrawPrimitives2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitivesTransformedVertex">
      <summary>Indicates whether the device exports a hardware abstraction layer (HAL) that is aware of <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsExecuteSystemMemory">
      <summary>Indicates whether the device uses executable buffers from system memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsExecuteVideoMemory">
      <summary>Indicates whether the device uses executable buffers from video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsHardwareRasterization">
      <summary>Indicates whether the device has hardware acceleration for scene rasterization.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsHardwareTransformAndLight">
      <summary>Indicates whether the device supports transformation and lighting in hardware.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsNPatches">
      <summary>Indicates whether the device supports N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsPreSampledDMapNPatch">
      <summary>Indicates whether the device supports presampled displacement maps for N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsPureDevice">
      <summary>Indicates whether the device supports rasterization, transformations, lighting, and shading in hardware.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsQuinticRtPatches">
      <summary>Indicates whether the device supports quintic cubic Bezier curves and B-splines.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsRtPatches">
      <summary>Indicates whether the device supports rectangular and triangular patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsRtPatchHandleZero">
      <summary>Indicates whether the hardware architecture does not require caching of any information and whether uncached (handle-zero) patches are drawn as efficiently as cached ones.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsSeparateTextureMemories">
      <summary>Indicates whether the device is texturing from separate memory pools.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsStreamOffset">
      <summary>Indicates whether the device supports stream offsets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureNonLocalVideoMemory">
      <summary>Indicates whether the device can retrieve textures from nonlocal video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureSystemMemory">
      <summary>Indicates whether the device can retrieve textures from system memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureVideoMemory">
      <summary>Indicates whether the device can retrieve textures from device memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTransformedVertexSystemMemory">
      <summary>Indicates whether the device uses buffers from system memory for transformed and lit vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTransformedVertexVideoMemory">
      <summary>Indicates whether the device uses buffers from video memory for transformed and lit vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.VertexElementScanSharesStreamOffset">
      <summary>Indicates whether multiple vertex elements share the same offset in a stream.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceCreationParameters">
      <summary>Describes the creation parameters for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCreationParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DeviceCreationParameters" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCreationParameters.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.AdapterOrdinal">
      <summary>Retrieves an ordinal number that denotes the display adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.Behavior">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.Direct3D.BehaviorFlags" /> structure with properties that indicate the global behavior of a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.DeviceType">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.Direct3D.DeviceType" /> instance that denotes the amount of emulated functionality for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.FocusWindow">
      <summary>Retrieves the window to which focus belongs for the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.FocusWindowHandle">
      <summary>Retrieves a pointer to the window to which focus belongs for the current device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplayMode">
      <summary>Describes the display mode.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.DisplayMode" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayMode.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Format">
      <summary>Retrieves or sets the surface format of the display mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Height">
      <summary>Retrieves or sets the screen height, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.RefreshRate">
      <summary>Retrieves or sets the refresh rate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Width">
      <summary>Retrieves or sets the screen width, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverCaps">
      <summary>Indicates driver-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanAutoGenerateMipMap">
      <summary>Indicates that the driver is capable of automatically generating mipmaps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanCalibrateGamma">
      <summary>Indicates that the system has a calibrator installed that can automatically adjust the gamma ramp so that the result is identical on all systems that have a calibrator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanManageResource">
      <summary>Indicates that the driver is capable of managing resources.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.ReadScanLine">
      <summary>Indicates that the display hardware is capable of returning the current scan line.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsAlphaFullscreenFlipOrDiscard">
      <summary>Indicates that the device can respect <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.AlphaBlendEnable" /> in full-screen mode while using the <see cref="T:Microsoft.DirectX.Direct3D.SwapEffect" /> or <see cref="T:Microsoft.DirectX.Direct3D.SwapEffect" /> swap effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsCopyToSystemMemory">
      <summary>Indicates that the device can accelerate a memory copy from local video memory to system memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsCopyToVideoMemory">
      <summary>Indicates that the device can accelerate a memory copy from system memory to local video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsDynamicTextures">
      <summary>Indicates whether the driver supports dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsFullscreenGamma">
      <summary>Indicates whether the driver supports dynamic gamma-ramp adjustment in full-screen mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsLinearToSrgbPresentation">
      <summary>Indicates whether the device can perform gamma correction from a windowed back buffer (that contains linear content) to an sRGB desktop.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FilterCaps">
      <summary>Indicates texture filter capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FilterCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyAnisotropic">
      <summary>Indicates that the device supports per-stage anisotropic filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyGaussianQuad">
      <summary>Indicates that the device supports per-stage Guassian quad filtering for textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyLinear">
      <summary>Indicates that the device supports per-stage bilinear interpolation filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyPoint">
      <summary>Indicates that the device supports per-stage point-sample filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyPyramidalQuad">
      <summary>Indicates that the device supports per-stage pyramidal quad filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyAnisotropic">
      <summary>Indicates that the device supports per-stage anisotropic filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyGaussianQuad">
      <summary>Indicates that the device supports per-stage Guassian quad filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyLinear">
      <summary>Indicates that the device supports per-stage bilinear interpolation filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyPoint">
      <summary>Indicates that the device supports per-stage point-sample filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyPyramidalQuad">
      <summary>Indicates that the device supports per-stage pyramidal quad filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMipMapLinear">
      <summary>Indicates that the device supports per-stage trilinear interpolation filtering for mipmaps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMipMapPoint">
      <summary>Indicates that the device supports per-stage point-sample filtering for mipmaps.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FormatList">
      <summary>Contains a list of formats supported by the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FormatList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.FormatList" /> class.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GammaRamp">
      <summary>Contains red, green, and blue ramp data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.GammaRamp" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetBlue">
      <summary>Retrieves the blue component of the gamma ramp.</summary>
      <returns>A 256-element integer array that represents the blue component.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetGreen">
      <summary>Retrieves the green component of the gamma ramp.</summary>
      <returns>A 256-element integer array that represents the green component.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetRed">
      <summary>Retrieves the red component of the gamma ramp.</summary>
      <returns>A 256-element integer array that represents the red component.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetBlue(System.Int16[])">
      <summary>Sets the blue component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the blue component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetGreen(System.Int16[])">
      <summary>Sets the green component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the green component.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetRed(System.Int16[])">
      <summary>Sets the red component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the red component.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IndexBufferDescription">
      <summary>Describes an index buffer.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBufferDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBufferDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBufferDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Is16BitIndices">
      <summary>Determines whether the index buffer has 16-bit indices or 32-bit indices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Pool">
      <summary>Retrieves a value that specifies the class of memory allocated for the current index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Size">
      <summary>Retrieves the size of the index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Type">
      <summary>Retrieves a value that identifies the current resource as an index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Usage">
      <summary>Retrieves values that specify usage for the current resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InterfaceTimings">
      <summary>Provides percentage of time processing data in the driver. These statistics may help identify cases when the driver is waiting for other resources.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InterfaceTimings.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.InterfaceTimings" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InterfaceTimings.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.InterfaceTimings.WaitingForGpuExclusiveResourceTimePercent">
      <summary>Retrieves the percentage of time the driver spent waiting for a resource that cannot be pipelined (that is, operated in parallel).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.InterfaceTimings.WaitingForGpuOtherTimePercent">
      <summary>Retrieves the percentage of time the driver spent waiting for other graphics processing unit (GPU) processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.InterfaceTimings.WaitingForGpuToAcceptMoreCommandsTimePercent">
      <summary>Retrieves the percentage of time the driver spent waiting for the graphics processing unit (GPU) to finish processing some commands before the driver could send more. This indicates the driver has run out of room to send commands to the graphics processing unit (GPU).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.InterfaceTimings.WaitingForGpuToStayWithinLatencyTimePercent">
      <summary>Retrieves the percentage of time the driver spent waiting for the graphics processing unit (GPU) latency to reduce to less than 3 rendering frames.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.InterfaceTimings.WaitingForGpuToUseApplicationResourceTimePercent">
      <summary>Retrieves the percentage of time the driver spent waiting for the graphics processing unit (GPU) to finish using a locked resource (and <see cref="F:Microsoft.DirectX.Direct3D.LockFlags.DoNotWait" /> wasn't specified).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LineCaps">
      <summary>Defines the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LineCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsAlphaCompare">
      <summary>Specifies whether the device supports alpha-test comparisons.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsAntiAlias">
      <summary>Specifies whether the device supports antialiased lines.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsBlend">
      <summary>Specifies whether the device supports source blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsFog">
      <summary>Specifies whether the device supports fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsTextureMapping">
      <summary>Specifies whether the device supports texture mapping.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsZBufferTest">
      <summary>Specifies whether the device supports z-buffer comparisons.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LinePattern">
      <summary>Describes a line pattern.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LinePattern.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LinePattern" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LinePattern.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LinePattern.Linepattern">
      <summary>Retrieves or sets bits that specify the line pattern.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LinePattern.RepeatFactor">
      <summary>Retrieves or sets the number of times to repeat each series of ones and zeros specified in the <see cref="P:Microsoft.DirectX.Direct3D.LinePattern.Linepattern" /> property.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LockedBox">
      <summary>Describes a locked box (volume).</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LockedBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.LockedBox" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LockedBox.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LockedBox.RowPitch">
      <summary>Retrieves or sets the byte offset from the left edge of one row to the left edge of the next row.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LockedBox.SlicePitch">
      <summary>Retrieves or sets the byte offset from the top left of one slice to the top left of the next-deepest slice.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Material">
      <summary>Specifies material properties.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Material" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.op_Equality(Microsoft.DirectX.Direct3D.Material,Microsoft.DirectX.Direct3D.Material)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Material" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Material" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are the same; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.op_Inequality(Microsoft.DirectX.Direct3D.Material,Microsoft.DirectX.Direct3D.Material)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left">The <see cref="T:Microsoft.DirectX.Direct3D.Material" /> object to the left of the equality operator.</param>
      <param name="right">The <see cref="T:Microsoft.DirectX.Direct3D.Material" /> object to the right of the equality operator.</param>
      <returns>Returns true if the objects are different; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Ambient">
      <summary>Retrieves or sets a value that specifies the ambient color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.AmbientColor">
      <summary>Retrieves or sets the ambient <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Diffuse">
      <summary>Retrieves or sets a value that specifies the diffuse color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.DiffuseColor">
      <summary>Retrieves or sets the diffuse <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Emissive">
      <summary>Retrieves or sets a value that specifies the emissive color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.EmissiveColor">
      <summary>Retrieves or sets the emissive <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Specular">
      <summary>Retrieves or sets a value that specifies the specular color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.SpecularColor">
      <summary>Retrieves or sets the specular <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.SpecularSharpness">
      <summary>Retrieves or sets a value that specifies the sharpness of specular highlights.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MiscCaps">
      <summary>Contains miscellaneous driver primitive capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MiscCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.HasFogVertexClamped">
      <summary>Specifies whether the device clamps the fog blend factor per vertex.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.IsNullReference">
      <summary>Specifies whether the device is a reference device that does not render.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsBlendOperation">
      <summary>Specifies whether the device supports alpha blend operations other than <see cref="F:Microsoft.DirectX.Direct3D.BlendOperation.BlendOperation.Add" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsClipPlaneScaledPoints">
      <summary>Specifies whether the device correctly clips scaled points (that is, those whose size is greater than 1.0) to user-defined clipping planes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsClipTransformedVertices">
      <summary>Specifies whether the device clips post-transformed vertex primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsColorWrite">
      <summary>Specifies whether the device supports per-channel writes for the render target color buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullClockwise">
      <summary>Specifies whether the driver supports clockwise triangle culling through <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.CullMode" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullCounterClockwise">
      <summary>Specifies whether the driver supports counterclockwise triangle culling through <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.CullMode" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullNone">
      <summary>Specifies whether the driver does not perform triangle culling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsFogAndSpecularAlpha">
      <summary>Specifies whether the device supports separate fog and specular alpha.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsIndependentWriteMasks">
      <summary>Specifies whether the device supports independent write masks for multiple element textures or multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMaskZ">
      <summary>Specifies whether the device can enable and disable modification of the depth buffer on pixel operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMultipleRenderTargetsIndependentBitDepths">
      <summary>Specifies whether the device supports independent bit depths for multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMultipleRenderTargetsPostPixelShaderBlending">
      <summary>Specifies whether the device supports multiple render targets after pixel shader blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsPerStageConstant">
      <summary>Specifies whether the device supports per-stage constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsSeparateAlphaBlend">
      <summary>Specifies whether the device supports separate alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp">
      <summary>Specifies whether the device supports <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> for temporary registers.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PaletteEntry">
      <summary>Specifies the color and usage of an entry in a logical palette.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PaletteEntry" /> class.</summary>
      <param name="red">Red intensity value for the palette entry.</param>
      <param name="green">Green intensity value for the palette entry.</param>
      <param name="blue">Blue intensity value for the palette entry.</param>
      <param name="flags">Alpha intensity value for the palette entry.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Blue">
      <summary>Retrieves or sets the blue intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Flags">
      <summary>Retrieves or sets the alpha intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Green">
      <summary>Retrieves or sets the green intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Red">
      <summary>Retrieves or sets the red intensity value for the palette entry.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PipelineTimings">
      <summary>Provides percentage of time spent processing data in the pipeline.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PipelineTimings.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PipelineTimings" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PipelineTimings.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PipelineTimings.GpuIdleTimePercent">
      <summary>Retrieves the percentage of time not processing anything.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PipelineTimings.OtherGpuProcessingTimePercent">
      <summary>Retrieves the percentage of time spent doing other processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PipelineTimings.PixelProcessingTimePercent">
      <summary>Retrieves the percentage of time spent running pixel shaders.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PipelineTimings.VertexProcessingTimePercent">
      <summary>Retrieves the percentage of time spent running vertex shaders.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PixelShaderCaps">
      <summary>Contains pixel shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break, breakc, and ifc).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxNumberInstructionSlots">
      <summary>Specifies the maximum number of instruction slots the driver supports.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers the driver supports.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxStaticFlowControlDepth">
      <summary>Specifies the maximum nesting depth of loop/rep and call/callnz bool instructions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break, breakc, and ifc).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinNumberInstructionSlots">
      <summary>Specifies the minimum number of instruction slots the driver supports.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinStaticFlowControlDepth">
      <summary>Specifies the minimum nesting depth of loop/rep and call/callnz bool instructions.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShaderCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.DynamicFlowControlDepth">
      <summary>Retrieves a value that represents the depth of the dynamic flow-control instruction nesting.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.NumberInstructionSlots">
      <summary>Retrieves the number of instruction slots the device supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.NumberTemps">
      <summary>Retrieves the number of temporary registers the device supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.StaticFlowControlDepth">
      <summary>Retrieves the depth of nesting of the loop/rep and call/callnz bool instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsArbitrarySwizzle">
      <summary>Determines whether arbitrary swizzle is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsGradientInstructions">
      <summary>Determines whether gradient instructions are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsNoDependentReadLimit">
      <summary>Determines whether there are no dependent read limits.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsNoTextureInstructionLimit">
      <summary>Determines whether there are no limits on texture instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsPredication">
      <summary>Determines whether instruction predication as defined in the predication section is supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RasterCaps">
      <summary>Contains information about raster drawing capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsAnisotropy">
      <summary>Determines whether the device supports anisotropic filtering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsColorPerspective">
      <summary>Determines whether the device iterates color perspective correctly.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsDepthBias">
      <summary>Determines whether the device supports legacy depth bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsDither">
      <summary>Determines whether the device supports dithering to improve color resolution.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogRange">
      <summary>Determines whether the device supports supports range-based fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogTable">
      <summary>Determines whether the device supports using a fog table.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogVertex">
      <summary>Determines whether the device supports vertex fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsMipMapLevelOfDetailBias">
      <summary>Determines whether the device supports level of detail (LOD) bias adjustments.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsMultisampleToggle">
      <summary>Determines whether the device supports toggling multisampling on and off between <see cref="M:Microsoft.DirectX.Direct3D.Device.BeginScene" /> and <see cref="M:Microsoft.DirectX.Direct3D.Device.EndScene" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsScissorTest">
      <summary>Determines whether the device supports scissor testing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsSlopeScaleDepthBias">
      <summary>Determines whether the device supports performing true slope scale-based depth bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsWBuffer">
      <summary>Determines whether the device supports depth buffering using the w-buffer (w-buffering).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsWFog">
      <summary>Determines whether the device supports w-based fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZBufferLessHsr">
      <summary>Determines whether a device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring a depth buffer to be allocated.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZBufferTest">
      <summary>Determines whether the device can perform z-test operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZFog">
      <summary>Determines whether the device supports z-based fog.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RasterStatus">
      <summary>Describes the raster status.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterStatus.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RasterStatus" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterStatus.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterStatus.InVBlank">
      <summary>Retrieves or sets the status of the vertical blank period.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterStatus.ScanLine">
      <summary>Retrieves or sets a value that roughly corresponds to the current scan line painted by the raster.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation">
      <summary>Describes a rectangular high-order patch.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RectanglePatchInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RectanglePatchInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.BasisType">
      <summary>Retrieves or sets a value of the <see cref="T:Microsoft.DirectX.Direct3D.BasisType" /> enumeration that defines the basis type for the rectangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Degree">
      <summary>Retrieves or sets a value of the <see cref="T:Microsoft.DirectX.Direct3D.DegreeType" /> enumeration that defines the degree for the rectangular patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Height">
      <summary>Retrieves or sets the height of each vertex, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.StartVertexOffsetHeight">
      <summary>Retrieves or sets the starting vertex offset height, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.StartVertexOffsetWidth">
      <summary>Retrieves or sets the starting vertex offset width, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Stride">
      <summary>Retrieves or sets the width of the imaginary two-dimensional vertex array, which occupies the same space as the vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Width">
      <summary>Retrieves or sets the width of each vertex, in number of vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceManager">
      <summary>Contains resource manager usage statistics.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceManager.GetStatistics">
      <summary>Retrieves an array of resource usage statistics.</summary>
      <returns>Array of <see cref="T:Microsoft.DirectX.Direct3D.ResourceStats" /> structures that contain the usage statistics of the resource manager.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceManager.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceStats">
      <summary>Contains information about the resource manager.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceStats.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceStats" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceStats.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.ApproximateBytesDownloaded">
      <summary>Retrieves the approximate number of bytes downloaded by the resource manager.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.LastObjectPriority">
      <summary>Retrieves the priority value of the last object evicted.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberEvicts">
      <summary>Retrieves the number of objects evicted.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberObjectsCreatedInVideoMemory">
      <summary>Retrieves the number of objects created in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberObjectsUsed">
      <summary>Retrieves the number of objects set to the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberObjectsUsedInVideoMemory">
      <summary>Retrieves the number of objects set to the device that are already in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.Thrashing">
      <summary>Retrieves a value that indicates whether thrashing is occurring.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.TotalManaged">
      <summary>Retrieves the total number of managed objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.TotalManagedBytes">
      <summary>Retrieves the total number of bytes used by the managed objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.WorkingSet">
      <summary>Retrieves the number of objects in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.WorkingSetBytes">
      <summary>Retrieves the number of bytes in video memory.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShadeCaps">
      <summary>Defines shading operation capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShadeCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsAlphaGouraudBlend">
      <summary>Specifies whether the device supports an alpha component for Gouraud-blended transparency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsColorGouraudRgb">
      <summary>Specifies whether the device supports colored Gouraud shading in the RGB color model.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsFogGouraud">
      <summary>Specifies whether the device supports fog in the Gouraud shading mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsSpecularGouraudRgb">
      <summary>Specifies whether the device supports Gouraud shading of specular highlights.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StageTimings">
      <summary>Provides percentage of time spent processing shader data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StageTimings.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.StageTimings" /> structure.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StageTimings.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StageTimings.ComputationProcessingPercent">
      <summary>Retrieves the percentage of time processing (moving data around in registers or doing mathematical operations).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StageTimings.MemoryProcessingPercent">
      <summary>Retrieves the percentage of time in the shader spent on memory accesses.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StencilCaps">
      <summary>Contains flags that specify supported stencil-buffer operations.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StencilCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsDecrement">
      <summary>Specifies whether the stencil buffer entry can be decremented, wrapping to the maximum value if the new value is less than zero.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsDecrementSaturation">
      <summary>Specifies whether the stencil buffer entry can be decremented, clamping to zero.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsIncrement">
      <summary>Specifies whether the stencil buffer entry can be incremented, wrapping to zero if the new value exceeds the maximum value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsIncrementSaturation">
      <summary>Specifies whether the stencil buffer entry can be incremented, clamping to the maximum value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsInvert">
      <summary>Specifies whether the bits in the stencil buffer entry can be inverted.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsKeep">
      <summary>Specifies whether to keep the stencil buffer entry unmodified or allow it to be updated.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsReplace">
      <summary>Specifies whether to replace the stencil buffer entry with a reference value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsTwoSided">
      <summary>Specifies whether the device supports two-sided stenciling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsZero">
      <summary>Specifies whether the device supports setting the stencil buffer entry to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SurfaceDescription">
      <summary>Describes a surface.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SurfaceDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Format">
      <summary>Retrieves or sets a value of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that describes the surface format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Height">
      <summary>Retrieves or sets the height of the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.MultiSampleQuality">
      <summary>Retrieves or sets the multisample quality level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.MultiSampleType">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" /> enumeration that specifies the levels of full-scene multisampling supported by the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Pool">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumeration that specifies the class of memory allocated for the current surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Type">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> enumeration that identifies the current resource as a surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Usage">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration that specifies the usage type of the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Width">
      <summary>Retrieves or sets the width of the surface.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureCaps">
      <summary>Contains miscellaneous texture-mapping capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsAlpha">
      <summary>Specifies whether alpha in texture pixels is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsAlphaPalette">
      <summary>Specifies whether the device can draw alpha from texture palettes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsCubeMap">
      <summary>Specifies whether cube textures are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsCubeMapPower2">
      <summary>Specifies whether the device requires that cube texture maps have dimensions specified as powers of two.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipCubeMap">
      <summary>Specifies whether the device supports mipmapped cube textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipMap">
      <summary>Specifies whether the device supports mipmapped textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipVolumeMap">
      <summary>Specifies whether the device supports mipmapped volume textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsNonPower2Conditional">
      <summary>Specifies whether the device conditionally supports the use of 2-D textures with dimensions that are not powers of two.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsNoProjectedBumpEnvironment">
      <summary>Specifies whether the device does not support a projected bump-environment lookup operation in programmable and fixed-function shaders.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsPerspective">
      <summary>Specifies whether perspective correction texturing is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsPower2">
      <summary>Specifies whether the device supports all textures having widths and heights that are specified as powers of two.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsProjected">
      <summary>Specifies whether <see cref="F:Microsoft.DirectX.Direct3D.TextureTransform.TextureTransform.Projected" /> is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsSquareOnly">
      <summary>Specifies whether all textures must be square.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsTextureRepeatNotScaledBySize">
      <summary>Specifies whether texture indices are not scaled by the texture size prior to interpolation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMap">
      <summary>Specifies whether the device supports volume textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMapPower2">
      <summary>Specifies whether the device requires that volume texture maps have dimensions that are specified as powers of two.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureOperationCaps">
      <summary>Contains values that describe the texture operations that the current device supports.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureOperationCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAdd">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Add" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSigned">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.AddSigned" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSigned2X">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.AddSigned2X" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSmooth">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.AddSmooth" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendCurrentAlpha">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendCurrentAlpha" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendDiffuseAlpha">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendDiffuseAlpha" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendFactorAlpha">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendFactorAlpha" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendTextureAlpha">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendTextureAlpha" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendTextureAlphaPM">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendTextureAlphaPM" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBumpEnvironmentMap">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BumpEnvironmentMap" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBumpEnvironmentMapLuminance">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BumpEnvironmentMapLuminance" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsDisable">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Disable" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsDotProduct3">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.DotProduct3" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsLerp">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Lerp" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Modulate" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate2X">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Modulate2X" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate4X">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Modulate4X" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateAlphaAddColor">
      <summary>Specifies whether the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateColorAddAlpha">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.ModulateColorAddAlpha" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateInvAlphaAddColor">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.ModulateInvAlphaAddColor" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateInvColorAddAlpha">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.ModulateInvColorAddAlpha" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsMultiplyAdd">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.MultiplyAdd" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsPreModulate">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.PreModulate" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSelectArgument1">
      <summary>Specifies whether the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSelectArgument2">
      <summary>Specifies whether the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" />texture blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSubtract">
      <summary>Specifies whether the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.Subtract" />texture blending operation is supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation">
      <summary>Describes a triangular high-order patch.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrianglePatchInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrianglePatchInformation.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.BasisType">
      <summary>Retrieves or sets a value that defines the basis type for the triangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.Degree">
      <summary>Retrieves or sets a value that defines the degree type for the triangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.NumberVertices">
      <summary>Retrieves or sets the number of vertices for the triangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.StartVertexOffset">
      <summary>Retrieves or sets the starting vertex offset, in number of vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ValidateDeviceParams">
      <summary>Describes the number of passes and the result code returned from a <see cref="M:Microsoft.DirectX.Direct3D.Device.ValidateDevice" /> call.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ValidateDeviceParams.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.ValidateDeviceParams" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ValidateDeviceParams.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ValidateDeviceParams.Passes">
      <summary>Retrieves the number of rendering passes needed to complete the desired effect through multipass rendering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ValidateDeviceParams.Result">
      <summary>Retrieves the result code of a validation.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBufferDescription">
      <summary>Describes a vertex buffer.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBufferDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBufferDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBufferDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Format">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.Format" /> enumeration that describes the surface format of the vertex buffer data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Pool">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumeration that specifies the class of memory allocated for the current vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Size">
      <summary>Retrieves or sets the size of the vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Type">
      <summary>Retrieves or sets a member of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> enumeration that identifies the current resource as a vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Usage">
      <summary>Retrieves or sets a combination of <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration values.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.VertexFormat">
      <summary>Retrieves or sets a combination of <see cref="T:Microsoft.DirectX.Direct3D.VertexFormats" /> enumeration values that describe the vertex format of the vertices in the current buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexCache">
      <summary>Defines vertex cache optimization hints.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexCache" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexCache.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.CacheSize">
      <summary>Retrieves the cache size, which is used as a target for optimization.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.MagicNumber">
      <summary>Retrieves a value that is used by internal optimization methods to determine when to restart strips.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.OptimizationMethod">
      <summary>Retrieves the optimization method.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.Pattern">
      <summary>Retrieves the bit pattern of the vertex cache.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexElement.VertexDeclarationEnd">
      <summary>Retrieves a <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> structure that is considered to be the end of vertex shader declaration.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexElement.#ctor(System.Int16,System.Int16,Microsoft.DirectX.Direct3D.DeclarationType,Microsoft.DirectX.Direct3D.DeclarationMethod,Microsoft.DirectX.Direct3D.DeclarationUsage,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" /> class.</summary>
      <param name="stream">Stream number (or index) to use.</param>
      <param name="offset">Offset (if any) from the beginning of the stream to the beginning of the vertex data.</param>
      <param name="declType">A <see cref="T:Microsoft.DirectX.Direct3D.DeclarationType" /> enumeration value specifying one of several predefined types that define the vertex data size.</param>
      <param name="declMethod">A <see cref="T:Microsoft.DirectX.Direct3D.DeclarationMethod" /> enumeration value that specifies the tessellator processing method. These methods determine how the tessellator interprets/operates on the vertex data.</param>
      <param name="declUsage">A <see cref="T:Microsoft.DirectX.Direct3D.DeclarationUsage" /> enumeration value that defines the intended use of the vertex data.</param>
      <param name="usageIndex">Modifies the usage data to allow the user to specify multiple usage types.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexElement.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationMethod">
      <summary>Retrieves or sets the tessellator processing method.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationType">
      <summary>Retrieves or sets the data type that defines the data size for the vertex element.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationUsage">
      <summary>Retrieves or sets one or more usage values that define the intended use of the vertex data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.Offset">
      <summary>Retrieves or sets the offset (if any) from the beginning of the stream to the beginning of the vertex data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.Stream">
      <summary>Retrieves or sets the stream number (or index) to use.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexFormatCaps">
      <summary>Specifies the flexible vertex format (FVF) capabilities supported by a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexFormatCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsDoNotStripElements">
      <summary>Specifies whether a device supports keeping vertex elements or stripping them if they are not needed for rendering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsPointSize">
      <summary>Specifies whether the vertex point size is determined by <see cref="P:Microsoft.DirectX.Direct3D.RenderStateManager.PointSize" /> or the vertex data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsTextureCoordinateCountMask">
      <summary>Specifies whether the device supports the texture coordinate count mask.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexProcessingCaps">
      <summary>Describes vertex processing capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexProcessingCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsDirectionalLights">
      <summary>Specifies whether directional lights are supported on a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsLocalViewer">
      <summary>Specifies whether a device supports the local viewer mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsMaterialSource">
      <summary>Specifies whether a device can perform Microsoft DirectX 7.0 colormaterialsource operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsNoTextureGenerationNonLocalViewer">
      <summary>Specifies whether a device supports texture generation in non-local viewer mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsPositionalLights">
      <summary>Specifies whether positional lights, including point and spot, are supported on a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTextureGeneration">
      <summary>Specifies whether a device supports texture generation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTextureGenerationSphereMap">
      <summary>Specifies whether a device supports texture generation for sphere maps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTweening">
      <summary>Specifies whether a device supports vertex tweening.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexShaderCaps">
      <summary>Describes vertex shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break, breakc, ifc).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxStaticFlowControlDepth">
      <summary>Specifies the maximum nesting depth of loop/rep and call/callnz bool instructions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break, breakc, ifc).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinStaticFlowControlDepth">
      <summary>Specifies the minimum nesting depth of loop/rep and call/callnz bool instructions.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShaderCaps.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.DynamicFlowControlDepth">
      <summary>Retrieves a value that represents the depth of the dynamic flow control instruction nesting.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.NumberTemps">
      <summary>Retrieves the number of temporary registers supported by the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.StaticFlowControlDepth">
      <summary>Retrieves the depth of nesting of the loop/rep and call/callnz bool instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.SupportsPredication">
      <summary>Determines whether instruction predication as defined in the predication section is supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexStats">
      <summary>Reports the number of triangles that have been processed and clipped by the runtime's software vertex processing.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexStats.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexStats" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexStats.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexStats.NumberExtraClippingTriangles">
      <summary>Retrieves the number of new triangles generated by clipping.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexStats.NumberRenderedTriangles">
      <summary>Retrieves the total number of triangles that are not clipped in the current frame.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Viewport">
      <summary>Defines the window dimensions of a render target surface onto which a 3-D volume projects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Viewport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Viewport" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Viewport.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Height">
      <summary>Retrieves or sets the height dimension of the viewport on the render target surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.MaxZ">
      <summary>Retrieves or sets the maximum value of the clip volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.MinZ">
      <summary>Retrieves or sets the minimum value of the clip volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Width">
      <summary>Retrieves or sets the width dimension of the viewport on the render target surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.X">
      <summary>Retrieves or sets the pixel coordinate of the upper-left corner of the viewport on the render target surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Y">
      <summary>Retrieves or sets the pixel coordinate of the upper-left corner of the viewport on the render target surface.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeDescription">
      <summary>Describes a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeDescription" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeDescription.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Depth">
      <summary>Retrieves or sets the depth of the volume, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Format">
      <summary>Retrieves or sets the desired surface format of a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Height">
      <summary>Retrieves or sets the height of the volume in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Pool">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> value that specifies the class of memory allocated for the current volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Type">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> value that identifies the current resource as a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Usage">
      <summary>Not used at this time. This member's value should always be 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Width">
      <summary>Retrieves or sets the width of a volume in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXCOLOR">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXFLOAT16">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXMATRIX">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXPLANE">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXQUATERNION">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXVECTOR2">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXVECTOR2_16F">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXVECTOR3">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXVECTOR3_16F">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXVECTOR4">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.D3DXVECTOR4_16F">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HBITMAP__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HDC__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HICON__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HINSTANCE__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HMONITOR__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.HWND__">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.ID3DXFont">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3D9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DBaseTexture9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DCubeTexture9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DIndexBuffer9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DPixelShader9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DQuery9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DResource9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DStateBlock9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DSwapChain9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexBuffer9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexDeclaration9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVertexShader9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolume9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.IDirect3DVolumeTexture9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagBITMAP">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagBITMAPINFO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagPALETTEENTRY">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagPOINT">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails.tagRECT">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DADAPTER_IDENTIFIER9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DBOX">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCAPS9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCLIPSTATUS9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DCOLORVALUE">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DDEVICE_CREATION_PARAMETERS">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DDEVINFO_RESOURCEMANAGER">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DGAMMARAMP">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DINDEXBUFFER_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DLIGHT9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DLOCKED_BOX">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DLOCKED_RECT">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DMATERIAL9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DMATRIX">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DPRESENT_PARAMETERS_">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DPSHADERCAPS2_0">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DRASTER_STATUS">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DRECT">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DRECTPATCH_INFO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DSURFACE_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DTRIPATCH_INFO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DVECTOR">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DVERTEXBUFFER_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DVERTEXELEMENT9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DVIEWPORT9">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DVOLUME_DESC">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DVSHADERCAPS2_0">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXFONT_DESCA">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._D3DXMATRIXA16">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._ICONINFO">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Microsoft.DirectX.PrivateImplementationDetails._RGNDATA">
      <summary>Allows the managed application programming interface (API) to have access to the unmanaged portions of the Microsoft DirectXapplication programming interface (API). This is not intended to be used directly from your code.</summary>
    </member>
  </members>
</doc>