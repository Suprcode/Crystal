// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.MirDatabase;

namespace Server.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20190128093835_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("GameShopItem", b =>
                {
                    b.Property<int>("GIndex")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Class");

                    b.Property<uint>("Count");

                    b.Property<uint>("CreditPrice");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deal");

                    b.Property<uint>("GoldPrice");

                    b.Property<int>("ItemIndex");

                    b.Property<int>("Stock");

                    b.Property<bool>("TopItem");

                    b.Property<bool>("iStock");

                    b.HasKey("GIndex");

                    b.ToTable("GameShopItems");
                });

            modelBuilder.Entity("ItemInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Accuracy");

                    b.Property<byte>("Agility");

                    b.Property<byte>("AttackSpeed");

                    b.Property<byte>("BagWeight");

                    b.Property<short>("Bind");

                    b.Property<bool>("CanAwakening");

                    b.Property<bool>("CanFastRun");

                    b.Property<bool>("CanMine");

                    b.Property<bool>("ClassBased");

                    b.Property<byte>("CriticalDamage");

                    b.Property<byte>("CriticalRate");

                    b.Property<ushort>("Durability");

                    b.Property<byte>("Effect");

                    b.Property<byte>("Freezing");

                    b.Property<bool>("GlobalDropNotify");

                    b.Property<byte>("Grade");

                    b.Property<ushort>("HP");

                    b.Property<byte>("HPrate");

                    b.Property<byte>("HandWeight");

                    b.Property<byte>("HealthRecovery");

                    b.Property<byte>("Holy");

                    b.Property<byte>("HpDrainRate");

                    b.Property<ushort>("Image");

                    b.Property<bool>("LevelBased");

                    b.Property<byte>("Light");

                    b.Property<byte>("Luck");

                    b.Property<ushort>("MP");

                    b.Property<byte>("MPrate");

                    b.Property<byte>("MagicResist");

                    b.Property<byte>("MaxAC");

                    b.Property<byte>("MaxAcRate");

                    b.Property<byte>("MaxDC");

                    b.Property<byte>("MaxMAC");

                    b.Property<byte>("MaxMC");

                    b.Property<byte>("MaxMacRate");

                    b.Property<byte>("MaxSC");

                    b.Property<byte>("MinAC");

                    b.Property<byte>("MinDC");

                    b.Property<byte>("MinMAC");

                    b.Property<byte>("MinMC");

                    b.Property<byte>("MinSC");

                    b.Property<string>("Name");

                    b.Property<bool>("NeedIdentify");

                    b.Property<byte>("PoisonAttack");

                    b.Property<byte>("PoisonRecovery");

                    b.Property<byte>("PoisonResist");

                    b.Property<uint>("Price");

                    b.Property<byte>("RandomStatsId");

                    b.Property<byte>("Reflect");

                    b.Property<byte>("RequiredAmount");

                    b.Property<byte>("RequiredClass");

                    b.Property<byte>("RequiredGender");

                    b.Property<byte>("RequiredType");

                    b.Property<byte>("Set");

                    b.Property<short>("Shape");

                    b.Property<bool>("ShowGroupPickup");

                    b.Property<byte>("SpellRecovery");

                    b.Property<uint>("StackSize");

                    b.Property<bool>("StartItem");

                    b.Property<byte>("Strong");

                    b.Property<string>("ToolTip");

                    b.Property<byte>("Type");

                    b.Property<short>("Unique");

                    b.Property<byte>("WearWeight");

                    b.Property<byte>("Weight");

                    b.HasKey("Index");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("BinData");

                    b.Property<int>("ControlPointIndex");

                    b.Property<int>("FlagIndex");

                    b.Property<bool>("Friday");

                    b.Property<bool>("FullMap");

                    b.Property<byte>("Game");

                    b.Property<int>("GateIndex");

                    b.Property<int>("GuardIndex");

                    b.Property<string>("KingLocationString");

                    b.Property<ushort>("KingSize");

                    b.Property<string>("LocationString");

                    b.Property<int>("MapIndex");

                    b.Property<bool>("Monday");

                    b.Property<string>("Name");

                    b.Property<int>("PalaceIndex");

                    b.Property<bool>("Saturday");

                    b.Property<int>("SiegeIndex");

                    b.Property<ushort>("Size");

                    b.Property<byte>("StartHour");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<byte>("Type");

                    b.Property<int>("WallIndex");

                    b.Property<int>("WarLength");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Index");

                    b.ToTable("ConquestInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.MagicInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("BaseCost");

                    b.Property<uint>("DelayBase");

                    b.Property<uint>("DelayReduction");

                    b.Property<byte>("Icon");

                    b.Property<byte>("Level1");

                    b.Property<byte>("Level2");

                    b.Property<byte>("Level3");

                    b.Property<byte>("LevelCost");

                    b.Property<ushort>("MPowerBase");

                    b.Property<ushort>("MPowerBonus");

                    b.Property<float>("MultiplierBase");

                    b.Property<float>("MultiplierBonus");

                    b.Property<string>("Name");

                    b.Property<ushort>("Need1");

                    b.Property<ushort>("Need2");

                    b.Property<ushort>("Need3");

                    b.Property<ushort>("PowerBase");

                    b.Property<ushort>("PowerBonus");

                    b.Property<byte>("Range");

                    b.Property<byte>("Spell");

                    b.HasKey("Index");

                    b.ToTable("Magics");
                });

            modelBuilder.Entity("Server.MirDatabase.MapInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<ushort>("BigMap");

                    b.Property<bool>("Fight");

                    b.Property<string>("FileName");

                    b.Property<bool>("Fire");

                    b.Property<int>("FireDamage");

                    b.Property<byte>("Light");

                    b.Property<bool>("Lightning");

                    b.Property<int>("LightningDamage");

                    b.Property<byte>("MapDarkLight");

                    b.Property<byte>("MineIndex");

                    b.Property<byte[]>("MineZoneBytes");

                    b.Property<ushort>("MiniMap");

                    b.Property<ushort>("Music");

                    b.Property<bool>("NeedBridle");

                    b.Property<bool>("NeedHole");

                    b.Property<bool>("NoDropMonster");

                    b.Property<bool>("NoDropPlayer");

                    b.Property<bool>("NoDrug");

                    b.Property<bool>("NoEscape");

                    b.Property<bool>("NoFight");

                    b.Property<bool>("NoMount");

                    b.Property<bool>("NoNames");

                    b.Property<bool>("NoPosition");

                    b.Property<bool>("NoRandom");

                    b.Property<bool>("NoRecall");

                    b.Property<bool>("NoReconnect");

                    b.Property<string>("NoReconnectMap");

                    b.Property<bool>("NoTeleport");

                    b.Property<bool>("NoThrowItem");

                    b.Property<byte[]>("SafeZoneBytes");

                    b.Property<string>("Title");

                    b.HasKey("Index");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Server.MirDatabase.MonsterInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("AI");

                    b.Property<byte>("Accuracy");

                    b.Property<byte>("Agility");

                    b.Property<ushort>("AttackSpeed");

                    b.Property<bool>("AutoRev");

                    b.Property<bool>("CanPush");

                    b.Property<bool>("CanTame");

                    b.Property<byte>("CoolEye");

                    b.Property<byte>("Effect");

                    b.Property<uint>("Experience");

                    b.Property<uint>("HP");

                    b.Property<bool>("HasDieScript");

                    b.Property<bool>("HasSpawnScript");

                    b.Property<ushort>("Image");

                    b.Property<ushort>("Level");

                    b.Property<byte>("Light");

                    b.Property<ushort>("MaxAC");

                    b.Property<ushort>("MaxDC");

                    b.Property<ushort>("MaxMAC");

                    b.Property<ushort>("MaxMC");

                    b.Property<ushort>("MaxSC");

                    b.Property<ushort>("MinAC");

                    b.Property<ushort>("MinDC");

                    b.Property<ushort>("MinMAC");

                    b.Property<ushort>("MinMC");

                    b.Property<ushort>("MinSC");

                    b.Property<ushort>("MoveSpeed");

                    b.Property<string>("Name");

                    b.Property<bool>("Undead");

                    b.Property<byte>("ViewRange");

                    b.HasKey("Index");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Server.MirDatabase.MovementInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConquestIndex");

                    b.Property<string>("DestinationString");

                    b.Property<int>("MapIndex");

                    b.Property<bool>("NeedHole");

                    b.Property<bool>("NeedMove");

                    b.Property<string>("SourceString");

                    b.HasKey("Index");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Server.MirDatabase.NPCInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassRequired");

                    b.Property<int>("ColorData");

                    b.Property<int>("Conquest");

                    b.Property<string>("DayofWeek");

                    b.Property<string>("FileName");

                    b.Property<int>("FlagNeeded");

                    b.Property<byte>("HourEnd");

                    b.Property<byte>("HourStart");

                    b.Property<ushort>("Image");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsRobot");

                    b.Property<string>("LocationString");

                    b.Property<int>("MapIndex");

                    b.Property<short>("MaxLev");

                    b.Property<short>("MinLev");

                    b.Property<byte>("MinuteEnd");

                    b.Property<byte>("MinuteStart");

                    b.Property<string>("Name");

                    b.Property<ushort>("Rate");

                    b.Property<bool>("Sabuk");

                    b.Property<bool>("TimeVisible");

                    b.HasKey("Index");

                    b.ToTable("NpcInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("CreditReward");

                    b.Property<uint>("ExpReward");

                    b.Property<string>("FileName");

                    b.Property<uint>("FinishNpcIndex");

                    b.Property<string>("FlagMessage");

                    b.Property<uint>("GoldReward");

                    b.Property<string>("GotoMessage");

                    b.Property<string>("Group");

                    b.Property<string>("ItemMessage");

                    b.Property<string>("KillMessage");

                    b.Property<string>("Name");

                    b.Property<uint>("NpcIndex");

                    b.Property<int?>("NpcInfoIndex");

                    b.Property<byte>("RequiredClass");

                    b.Property<int>("RequiredMaxLevel");

                    b.Property<int>("RequiredMinLevel");

                    b.Property<int>("RequiredQuest");

                    b.Property<byte>("Type");

                    b.HasKey("Index");

                    b.HasIndex("NpcInfoIndex");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Server.MirDatabase.RespawnInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd();

                    b.Property<ushort>("Count");

                    b.Property<ushort>("Delay");

                    b.Property<byte>("Direction");

                    b.Property<string>("LocationString");

                    b.Property<int>("MapIndex");

                    b.Property<int>("MonsterIndex");

                    b.Property<ushort>("RandomDelay");

                    b.Property<int>("RespawnIndex");

                    b.Property<ushort>("RespawnTicks");

                    b.Property<string>("RoutePath");

                    b.Property<bool>("SaveRespawnTime");

                    b.Property<ushort>("Spread");

                    b.HasKey("Index");

                    b.ToTable("Respawns");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.NPCInfo", "NpcInfo")
                        .WithMany()
                        .HasForeignKey("NpcInfoIndex");
                });
#pragma warning restore 612, 618
        }
    }
}
